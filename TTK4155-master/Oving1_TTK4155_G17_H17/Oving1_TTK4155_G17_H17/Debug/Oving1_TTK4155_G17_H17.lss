
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025e  00800100  0000166c  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080035e  0080035e  0000195e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c46  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c3  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000374  00000000  00000000  000032ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af6  00000000  00000000  00003a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000044ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e6       	ldi	r30, 0x6C	; 108
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 35       	cpi	r26, 0x5E	; 94
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	ae e5       	ldi	r26, 0x5E	; 94
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a4 37       	cpi	r26, 0x74	; 116
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c0 03 	call	0x780	; 0x780 <main>
      a6:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
      ae:	82 30       	cpi	r24, 0x02	; 2
      b0:	91 05       	cpc	r25, r1
      b2:	71 f0       	breq	.+28     	; 0xd0 <readADC+0x22>
      b4:	1c f4       	brge	.+6      	; 0xbc <readADC+0xe>
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	39 f0       	breq	.+14     	; 0xc8 <readADC+0x1a>
      ba:	1c c0       	rjmp	.+56     	; 0xf4 <readADC+0x46>
      bc:	83 30       	cpi	r24, 0x03	; 3
      be:	91 05       	cpc	r25, r1
      c0:	59 f0       	breq	.+22     	; 0xd8 <readADC+0x2a>
      c2:	04 97       	sbiw	r24, 0x04	; 4
      c4:	69 f0       	breq	.+26     	; 0xe0 <readADC+0x32>
      c6:	16 c0       	rjmp	.+44     	; 0xf4 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
      c8:	84 e1       	ldi	r24, 0x14	; 20
      ca:	80 93 00 14 	sts	0x1400, r24
      ce:	0b c0       	rjmp	.+22     	; 0xe6 <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
      d0:	85 e1       	ldi	r24, 0x15	; 21
      d2:	80 93 00 14 	sts	0x1400, r24
      d6:	07 c0       	rjmp	.+14     	; 0xe6 <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
      d8:	86 e1       	ldi	r24, 0x16	; 22
      da:	80 93 00 14 	sts	0x1400, r24
      de:	03 c0       	rjmp	.+6      	; 0xe6 <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
      e0:	87 e1       	ldi	r24, 0x17	; 23
      e2:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	82 e5       	ldi	r24, 0x52	; 82
      e8:	8a 95       	dec	r24
      ea:	f1 f7       	brne	.-4      	; 0xe8 <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
      ec:	80 91 00 14 	lds	r24, 0x1400
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
      f8:	08 95       	ret

000000fa <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
      fa:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
      fc:	bb 9a       	sbi	0x17, 3	; 23
	//BIT_ON(PORTB, PD2);//WHY DID WE DO THIS?
	//BIT_ON(PORTB, PD3);//LEAVING THIS HERE FOR NOW 21.09.2017
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
      fe:	85 b7       	in	r24, 0x35	; 53
     100:	81 60       	ori	r24, 0x01	; 1
     102:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     104:	85 b7       	in	r24, 0x35	; 53
     106:	82 60       	ori	r24, 0x02	; 2
     108:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     10a:	85 b7       	in	r24, 0x35	; 53
     10c:	84 60       	ori	r24, 0x04	; 4
     10e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     110:	85 b7       	in	r24, 0x35	; 53
     112:	88 60       	ori	r24, 0x08	; 8
     114:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     116:	8b b7       	in	r24, 0x3b	; 59
     118:	80 64       	ori	r24, 0x40	; 64
     11a:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     11c:	8b b7       	in	r24, 0x3b	; 59
     11e:	80 68       	ori	r24, 0x80	; 128
     120:	8b bf       	out	0x3b, r24	; 59
	sei();//enabling interrupts globaly
     122:	78 94       	sei
     124:	08 95       	ret

00000126 <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	2f 93       	push	r18
     13a:	3f 93       	push	r19
     13c:	4f 93       	push	r20
     13e:	5f 93       	push	r21
     140:	6f 93       	push	r22
     142:	7f 93       	push	r23
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
     148:	af 93       	push	r26
     14a:	bf 93       	push	r27
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     154:	8a e0       	ldi	r24, 0x0A	; 10
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	9f 93       	push	r25
     15a:	8f 93       	push	r24
     15c:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
     160:	82 e5       	ldi	r24, 0x52	; 82
     162:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     166:	f8 2e       	mov	r15, r24
     168:	e9 2e       	mov	r14, r25
     16a:	8c e4       	ldi	r24, 0x4C	; 76
     16c:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     170:	18 2f       	mov	r17, r24
     172:	09 2f       	mov	r16, r25
     174:	89 e5       	ldi	r24, 0x59	; 89
     176:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     17a:	c8 2f       	mov	r28, r24
     17c:	d9 2f       	mov	r29, r25
     17e:	88 e5       	ldi	r24, 0x58	; 88
     180:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	9f 93       	push	r25
     192:	8f 93       	push	r24
     194:	83 e3       	ldi	r24, 0x33	; 51
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
     1a0:	8d b7       	in	r24, 0x3d	; 61
     1a2:	9e b7       	in	r25, 0x3e	; 62
     1a4:	0c 96       	adiw	r24, 0x0c	; 12
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	9e bf       	out	0x3e, r25	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	8d bf       	out	0x3d, r24	; 61
}
     1b0:	ff 91       	pop	r31
     1b2:	ef 91       	pop	r30
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	bf 91       	pop	r27
     1ba:	af 91       	pop	r26
     1bc:	9f 91       	pop	r25
     1be:	8f 91       	pop	r24
     1c0:	7f 91       	pop	r23
     1c2:	6f 91       	pop	r22
     1c4:	5f 91       	pop	r21
     1c6:	4f 91       	pop	r20
     1c8:	3f 91       	pop	r19
     1ca:	2f 91       	pop	r18
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	0f 90       	pop	r0
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	0f 90       	pop	r0
     1da:	1f 90       	pop	r1
     1dc:	18 95       	reti

000001de <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     1de:	1f 92       	push	r1
     1e0:	0f 92       	push	r0
     1e2:	0f b6       	in	r0, 0x3f	; 63
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
	printf("Left Button Pressed\n");
     200:	8c e4       	ldi	r24, 0x4C	; 76
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
     208:	ff 91       	pop	r31
     20a:	ef 91       	pop	r30
     20c:	bf 91       	pop	r27
     20e:	af 91       	pop	r26
     210:	9f 91       	pop	r25
     212:	8f 91       	pop	r24
     214:	7f 91       	pop	r23
     216:	6f 91       	pop	r22
     218:	5f 91       	pop	r21
     21a:	4f 91       	pop	r20
     21c:	3f 91       	pop	r19
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	c4 e6       	ldi	r28, 0x64	; 100
     234:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     236:	00 91 68 03 	lds	r16, 0x0368
     23a:	10 91 69 03 	lds	r17, 0x0369
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     246:	01 58       	subi	r16, 0x81	; 129
     248:	1f 4f       	sbci	r17, 0xFF	; 255
     24a:	08 1b       	sub	r16, r24
     24c:	19 0b       	sbc	r17, r25
     24e:	10 93 69 03 	sts	0x0369, r17
     252:	00 93 68 03 	sts	0x0368, r16
		calibrate_y += 127 - readADC(2);
     256:	00 91 66 03 	lds	r16, 0x0366
     25a:	10 91 67 03 	lds	r17, 0x0367
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     266:	01 58       	subi	r16, 0x81	; 129
     268:	1f 4f       	sbci	r17, 0xFF	; 255
     26a:	08 1b       	sub	r16, r24
     26c:	19 0b       	sbc	r17, r25
     26e:	10 93 67 03 	sts	0x0367, r17
     272:	00 93 66 03 	sts	0x0366, r16
     276:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     278:	20 97       	sbiw	r28, 0x00	; 0
     27a:	e9 f6       	brne	.-70     	; 0x236 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     27c:	80 91 68 03 	lds	r24, 0x0368
     280:	90 91 69 03 	lds	r25, 0x0369
     284:	24 e6       	ldi	r18, 0x64	; 100
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	b9 01       	movw	r22, r18
     28a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__divmodhi4>
     28e:	70 93 69 03 	sts	0x0369, r23
     292:	60 93 68 03 	sts	0x0368, r22
	calibrate_y /= CALIBRATE_READINGS;
     296:	80 91 66 03 	lds	r24, 0x0366
     29a:	90 91 67 03 	lds	r25, 0x0367
     29e:	b9 01       	movw	r22, r18
     2a0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__divmodhi4>
     2a4:	70 93 67 03 	sts	0x0367, r23
     2a8:	60 93 66 03 	sts	0x0366, r22
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	08 95       	ret

000002b6 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     2b6:	2f 92       	push	r2
     2b8:	3f 92       	push	r3
     2ba:	4f 92       	push	r4
     2bc:	5f 92       	push	r5
     2be:	6f 92       	push	r6
     2c0:	7f 92       	push	r7
     2c2:	8f 92       	push	r8
     2c4:	9f 92       	push	r9
     2c6:	af 92       	push	r10
     2c8:	bf 92       	push	r11
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <signal_to_range+0x26>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <signal_to_range+0x28>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <signal_to_range+0x2a>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	3c 01       	movw	r6, r24
     2e6:	7a 83       	std	Y+2, r23	; 0x02
     2e8:	69 83       	std	Y+1, r22	; 0x01
     2ea:	5c 83       	std	Y+4, r21	; 0x04
     2ec:	4b 83       	std	Y+3, r20	; 0x03
     2ee:	3e 83       	std	Y+6, r19	; 0x06
     2f0:	2d 83       	std	Y+5, r18	; 0x05
     2f2:	18 01       	movw	r2, r16
     2f4:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     2f6:	b9 01       	movw	r22, r18
     2f8:	88 27       	eor	r24, r24
     2fa:	77 fd       	sbrc	r23, 7
     2fc:	80 95       	com	r24
     2fe:	98 2f       	mov	r25, r24
     300:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatsisf>
     304:	4b 01       	movw	r8, r22
     306:	5c 01       	movw	r10, r24
     308:	b3 01       	movw	r22, r6
     30a:	6e 0d       	add	r22, r14
     30c:	7f 1d       	adc	r23, r15
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	3a 81       	ldd	r19, Y+2	; 0x02
     312:	62 1b       	sub	r22, r18
     314:	73 0b       	sbc	r23, r19
     316:	88 27       	eor	r24, r24
     318:	77 fd       	sbrc	r23, 7
     31a:	80 95       	com	r24
     31c:	98 2f       	mov	r25, r24
     31e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatsisf>
     322:	2b 01       	movw	r4, r22
     324:	3c 01       	movw	r6, r24
     326:	b1 01       	movw	r22, r2
     328:	8d 81       	ldd	r24, Y+5	; 0x05
     32a:	9e 81       	ldd	r25, Y+6	; 0x06
     32c:	68 1b       	sub	r22, r24
     32e:	79 0b       	sbc	r23, r25
     330:	88 27       	eor	r24, r24
     332:	77 fd       	sbrc	r23, 7
     334:	80 95       	com	r24
     336:	98 2f       	mov	r25, r24
     338:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatsisf>
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c3 01       	movw	r24, r6
     342:	b2 01       	movw	r22, r4
     344:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsf3>
     348:	2b 01       	movw	r4, r22
     34a:	3c 01       	movw	r6, r24
     34c:	6b 81       	ldd	r22, Y+3	; 0x03
     34e:	7c 81       	ldd	r23, Y+4	; 0x04
     350:	e9 81       	ldd	r30, Y+1	; 0x01
     352:	fa 81       	ldd	r31, Y+2	; 0x02
     354:	6e 1b       	sub	r22, r30
     356:	7f 0b       	sbc	r23, r31
     358:	88 27       	eor	r24, r24
     35a:	77 fd       	sbrc	r23, 7
     35c:	80 95       	com	r24
     35e:	98 2f       	mov	r25, r24
     360:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatsisf>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	c3 01       	movw	r24, r6
     36a:	b2 01       	movw	r22, r4
     36c:	0e 94 3c 04 	call	0x878	; 0x878 <__divsf3>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	c5 01       	movw	r24, r10
     376:	b4 01       	movw	r22, r8
     378:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__addsf3>
     37c:	0e 94 a4 04 	call	0x948	; 0x948 <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     380:	c1 01       	movw	r24, r2
     382:	80 1b       	sub	r24, r16
     384:	91 0b       	sbc	r25, r17
     386:	68 17       	cp	r22, r24
     388:	79 07       	cpc	r23, r25
     38a:	74 f5       	brge	.+92     	; 0x3e8 <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	80 0f       	add	r24, r16
     392:	91 1f       	adc	r25, r17
     394:	86 17       	cp	r24, r22
     396:	97 07       	cpc	r25, r23
     398:	4c f5       	brge	.+82     	; 0x3ec <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     39a:	f8 01       	movw	r30, r16
     39c:	11 23       	and	r17, r17
     39e:	0c f4       	brge	.+2      	; 0x3a2 <signal_to_range+0xec>
     3a0:	31 96       	adiw	r30, 0x01	; 1
     3a2:	f5 95       	asr	r31
     3a4:	e7 95       	ror	r30
     3a6:	d8 01       	movw	r26, r16
     3a8:	12 c0       	rjmp	.+36     	; 0x3ce <signal_to_range+0x118>
     3aa:	8a 0f       	add	r24, r26
     3ac:	9b 1f       	adc	r25, r27
     3ae:	ac 01       	movw	r20, r24
     3b0:	4e 0f       	add	r20, r30
     3b2:	5f 1f       	adc	r21, r31
     3b4:	64 17       	cp	r22, r20
     3b6:	75 07       	cpc	r23, r21
     3b8:	14 f0       	brlt	.+4      	; 0x3be <signal_to_range+0x108>
				referance += step;
     3ba:	69 01       	movw	r12, r18
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     3be:	c6 01       	movw	r24, r12
     3c0:	8e 1b       	sub	r24, r30
     3c2:	9f 0b       	sbc	r25, r31
     3c4:	86 17       	cp	r24, r22
     3c6:	97 07       	cpc	r25, r23
     3c8:	14 f0       	brlt	.+4      	; 0x3ce <signal_to_range+0x118>
				referance -= step;
     3ca:	c0 1a       	sub	r12, r16
     3cc:	d1 0a       	sbc	r13, r17
     3ce:	c6 01       	movw	r24, r12
     3d0:	80 1b       	sub	r24, r16
     3d2:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     3d4:	96 01       	movw	r18, r12
     3d6:	20 0f       	add	r18, r16
     3d8:	31 1f       	adc	r19, r17
     3da:	62 17       	cp	r22, r18
     3dc:	73 07       	cpc	r23, r19
     3de:	2c f7       	brge	.-54     	; 0x3aa <signal_to_range+0xf4>
     3e0:	86 17       	cp	r24, r22
     3e2:	97 07       	cpc	r25, r23
     3e4:	14 f7       	brge	.-60     	; 0x3aa <signal_to_range+0xf4>
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     3e8:	61 01       	movw	r12, r2
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     3ec:	cd 80       	ldd	r12, Y+5	; 0x05
     3ee:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     3f0:	c6 01       	movw	r24, r12
     3f2:	26 96       	adiw	r28, 0x06	; 6
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	9f 90       	pop	r9
     414:	8f 90       	pop	r8
     416:	7f 90       	pop	r7
     418:	6f 90       	pop	r6
     41a:	5f 90       	pop	r5
     41c:	4f 90       	pop	r4
     41e:	3f 90       	pop	r3
     420:	2f 90       	pop	r2
     422:	08 95       	ret

00000424 <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
	switch(channel){
     434:	82 35       	cpi	r24, 0x52	; 82
     436:	09 f4       	brne	.+2      	; 0x43a <read_control_input+0x16>
     438:	74 c0       	rjmp	.+232    	; 0x522 <__stack+0x23>
     43a:	20 f4       	brcc	.+8      	; 0x444 <read_control_input+0x20>
     43c:	8c 34       	cpi	r24, 0x4C	; 76
     43e:	09 f4       	brne	.+2      	; 0x442 <read_control_input+0x1e>
     440:	4e c0       	rjmp	.+156    	; 0x4de <read_control_input+0xba>
     442:	91 c0       	rjmp	.+290    	; 0x566 <__stack+0x67>
     444:	88 35       	cpi	r24, 0x58	; 88
     446:	19 f0       	breq	.+6      	; 0x44e <read_control_input+0x2a>
     448:	89 35       	cpi	r24, 0x59	; 89
     44a:	29 f1       	breq	.+74     	; 0x496 <read_control_input+0x72>
     44c:	8c c0       	rjmp	.+280    	; 0x566 <__stack+0x67>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     44e:	c0 90 64 03 	lds	r12, 0x0364
     452:	d0 90 65 03 	lds	r13, 0x0365
     456:	e0 90 68 03 	lds	r14, 0x0368
     45a:	f0 90 69 03 	lds	r15, 0x0369
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     466:	0f 2e       	mov	r0, r31
     468:	fa e0       	ldi	r31, 0x0A	; 10
     46a:	af 2e       	mov	r10, r31
     46c:	b1 2c       	mov	r11, r1
     46e:	f0 2d       	mov	r31, r0
     470:	04 e6       	ldi	r16, 0x64	; 100
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	2c e9       	ldi	r18, 0x9C	; 156
     476:	3f ef       	ldi	r19, 0xFF	; 255
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <signal_to_range>
     484:	90 93 65 03 	sts	0x0365, r25
     488:	80 93 64 03 	sts	0x0364, r24
			return ref_X;
     48c:	80 91 64 03 	lds	r24, 0x0364
     490:	90 91 65 03 	lds	r25, 0x0365
     494:	6a c0       	rjmp	.+212    	; 0x56a <__stack+0x6b>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     496:	c0 90 62 03 	lds	r12, 0x0362
     49a:	d0 90 63 03 	lds	r13, 0x0363
     49e:	e0 90 66 03 	lds	r14, 0x0366
     4a2:	f0 90 67 03 	lds	r15, 0x0367
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     4ae:	0f 2e       	mov	r0, r31
     4b0:	fa e0       	ldi	r31, 0x0A	; 10
     4b2:	af 2e       	mov	r10, r31
     4b4:	b1 2c       	mov	r11, r1
     4b6:	f0 2d       	mov	r31, r0
     4b8:	04 e6       	ldi	r16, 0x64	; 100
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	2c e9       	ldi	r18, 0x9C	; 156
     4be:	3f ef       	ldi	r19, 0xFF	; 255
     4c0:	4f ef       	ldi	r20, 0xFF	; 255
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <signal_to_range>
     4cc:	90 93 63 03 	sts	0x0363, r25
     4d0:	80 93 62 03 	sts	0x0362, r24
			return ref_Y;
     4d4:	80 91 62 03 	lds	r24, 0x0362
     4d8:	90 91 63 03 	lds	r25, 0x0363
     4dc:	46 c0       	rjmp	.+140    	; 0x56a <__stack+0x6b>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     4de:	c0 90 60 03 	lds	r12, 0x0360
     4e2:	d0 90 61 03 	lds	r13, 0x0361
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     4ee:	0f 2e       	mov	r0, r31
     4f0:	fa e0       	ldi	r31, 0x0A	; 10
     4f2:	af 2e       	mov	r10, r31
     4f4:	b1 2c       	mov	r11, r1
     4f6:	f0 2d       	mov	r31, r0
     4f8:	e1 2c       	mov	r14, r1
     4fa:	f1 2c       	mov	r15, r1
     4fc:	04 e6       	ldi	r16, 0x64	; 100
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <signal_to_range>
     510:	90 93 61 03 	sts	0x0361, r25
     514:	80 93 60 03 	sts	0x0360, r24
		return ref_L;
     518:	80 91 60 03 	lds	r24, 0x0360
     51c:	90 91 61 03 	lds	r25, 0x0361
     520:	24 c0       	rjmp	.+72     	; 0x56a <__stack+0x6b>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     522:	c0 90 5e 03 	lds	r12, 0x035E
     526:	d0 90 5f 03 	lds	r13, 0x035F
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     532:	0f 2e       	mov	r0, r31
     534:	fa e0       	ldi	r31, 0x0A	; 10
     536:	af 2e       	mov	r10, r31
     538:	b1 2c       	mov	r11, r1
     53a:	f0 2d       	mov	r31, r0
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	04 e6       	ldi	r16, 0x64	; 100
     542:	10 e0       	ldi	r17, 0x00	; 0
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <signal_to_range>
     554:	90 93 5f 03 	sts	0x035F, r25
     558:	80 93 5e 03 	sts	0x035E, r24
			return ref_R;
     55c:	80 91 5e 03 	lds	r24, 0x035E
     560:	90 91 5f 03 	lds	r25, 0x035F
     564:	02 c0       	rjmp	.+4      	; 0x56a <__stack+0x6b>
	}
	return 0;
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
}
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	08 95       	ret

0000057c <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     57c:	0e 94 15 01 	call	0x22a	; 0x22a <calibrate_joystick>
	ref_X = read_control_input('X');
     580:	88 e5       	ldi	r24, 0x58	; 88
     582:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     586:	90 93 65 03 	sts	0x0365, r25
     58a:	80 93 64 03 	sts	0x0364, r24
	ref_Y = read_control_input('Y');
     58e:	89 e5       	ldi	r24, 0x59	; 89
     590:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     594:	90 93 63 03 	sts	0x0363, r25
     598:	80 93 62 03 	sts	0x0362, r24
	ref_L = read_control_input('L');
     59c:	8c e4       	ldi	r24, 0x4C	; 76
     59e:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     5a2:	90 93 61 03 	sts	0x0361, r25
     5a6:	80 93 60 03 	sts	0x0360, r24
	ref_R = read_control_input('R');
     5aa:	82 e5       	ldi	r24, 0x52	; 82
     5ac:	0e 94 12 02 	call	0x424	; 0x424 <read_control_input>
     5b0:	90 93 5f 03 	sts	0x035F, r25
     5b4:	80 93 5e 03 	sts	0x035E, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     5b8:	20 91 66 03 	lds	r18, 0x0366
     5bc:	30 91 67 03 	lds	r19, 0x0367
     5c0:	80 91 68 03 	lds	r24, 0x0368
     5c4:	90 91 69 03 	lds	r25, 0x0369
     5c8:	3f 93       	push	r19
     5ca:	2f 93       	push	r18
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	80 e6       	ldi	r24, 0x60	; 96
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     5dc:	60 91 5e 03 	lds	r22, 0x035E
     5e0:	70 91 5f 03 	lds	r23, 0x035F
     5e4:	40 91 60 03 	lds	r20, 0x0360
     5e8:	50 91 61 03 	lds	r21, 0x0361
     5ec:	20 91 62 03 	lds	r18, 0x0362
     5f0:	30 91 63 03 	lds	r19, 0x0363
     5f4:	80 91 64 03 	lds	r24, 0x0364
     5f8:	90 91 65 03 	lds	r25, 0x0365
     5fc:	7f 93       	push	r23
     5fe:	6f 93       	push	r22
     600:	5f 93       	push	r21
     602:	4f 93       	push	r20
     604:	3f 93       	push	r19
     606:	2f 93       	push	r18
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	89 e8       	ldi	r24, 0x89	; 137
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
     618:	8d b7       	in	r24, 0x3d	; 61
     61a:	9e b7       	in	r25, 0x3e	; 62
     61c:	40 96       	adiw	r24, 0x10	; 16
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	9e bf       	out	0x3e, r25	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	8d bf       	out	0x3d, r24	; 61
     628:	08 95       	ret

0000062a <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     63a:	82 eb       	ldi	r24, 0xB2	; 178
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     642:	0e 94 3c 06 	call	0xc78	; 0xc78 <rand>
     646:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     648:	0e 94 41 06 	call	0xc82	; 0xc82 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     64c:	c0 e0       	ldi	r28, 0x00	; 0
     64e:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     650:	00 e0       	ldi	r16, 0x00	; 0
     652:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     654:	0f 2e       	mov	r0, r31
     656:	f8 ec       	ldi	r31, 0xC8	; 200
     658:	ef 2e       	mov	r14, r31
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	ff 2e       	mov	r15, r31
     65e:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     660:	0e 94 3c 06 	call	0xc78	; 0xc78 <rand>
     664:	fe 01       	movw	r30, r28
     666:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     668:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     66a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     66c:	28 17       	cp	r18, r24
     66e:	a9 f0       	breq	.+42     	; 0x69a <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     670:	99 27       	eor	r25, r25
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	1f 92       	push	r1
     678:	2f 93       	push	r18
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	ff 92       	push	r15
     680:	ef 92       	push	r14
     682:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
			write_errors++;
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	8d b7       	in	r24, 0x3d	; 61
     68c:	9e b7       	in	r25, 0x3e	; 62
     68e:	08 96       	adiw	r24, 0x08	; 8
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	9e bf       	out	0x3e, r25	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	c1 15       	cp	r28, r1
     69e:	98 e0       	ldi	r25, 0x08	; 8
     6a0:	d9 07       	cpc	r29, r25
     6a2:	f1 f6       	brne	.-68     	; 0x660 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     6a4:	c6 01       	movw	r24, r12
     6a6:	0e 94 41 06 	call	0xc82	; 0xc82 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     6ae:	e1 2c       	mov	r14, r1
     6b0:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	cf 2e       	mov	r12, r31
     6b8:	f2 e0       	ldi	r31, 0x02	; 2
     6ba:	df 2e       	mov	r13, r31
     6bc:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     6be:	0e 94 3c 06 	call	0xc78	; 0xc78 <rand>
     6c2:	fe 01       	movw	r30, r28
     6c4:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     6c6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     6c8:	28 17       	cp	r18, r24
     6ca:	b1 f0       	breq	.+44     	; 0x6f8 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6cc:	99 27       	eor	r25, r25
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	1f 92       	push	r1
     6d4:	2f 93       	push	r18
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	df 92       	push	r13
     6dc:	cf 92       	push	r12
     6de:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
			retrieval_errors++;
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	e8 1a       	sub	r14, r24
     6e6:	f8 0a       	sbc	r15, r24
     6e8:	8d b7       	in	r24, 0x3d	; 61
     6ea:	9e b7       	in	r25, 0x3e	; 62
     6ec:	08 96       	adiw	r24, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	9e bf       	out	0x3e, r25	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6f8:	21 96       	adiw	r28, 0x01	; 1
     6fa:	c1 15       	cp	r28, r1
     6fc:	98 e0       	ldi	r25, 0x08	; 8
     6fe:	d9 07       	cpc	r29, r25
     700:	f1 f6       	brne	.-68     	; 0x6be <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     702:	ff 92       	push	r15
     704:	ef 92       	push	r14
     706:	1f 93       	push	r17
     708:	0f 93       	push	r16
     70a:	8e e3       	ldi	r24, 0x3E	; 62
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	0e 94 97 06 	call	0xd2e	; 0xd2e <printf>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	08 95       	ret

00000734 <initalize>:



void initalize(void){
	
	init_UART(UBBR);
     734:	8f e1       	ldi	r24, 0x1F	; 31
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 cc 03 	call	0x798	; 0x798 <init_UART>
	printf("INITIALIZING...\n\nUART successfully initialized\n\n");
     73c:	85 e9       	ldi	r24, 0x95	; 149
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     744:	85 b7       	in	r24, 0x35	; 53
     746:	80 68       	ori	r24, 0x80	; 128
     748:	85 bf       	out	0x35, r24	; 53
	initialize_control_input();
     74a:	0e 94 be 02 	call	0x57c	; 0x57c <initialize_control_input>
	printf("controll input successfully initialized\n\n");
     74e:	85 ec       	ldi	r24, 0xC5	; 197
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	SRAM_test();
     756:	0e 94 15 03 	call	0x62a	; 0x62a <SRAM_test>
	printf("SRAM successfully initialized\n");
     75a:	8e ee       	ldi	r24, 0xEE	; 238
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	initalize_interrupts();
     762:	0e 94 7d 00 	call	0xfa	; 0xfa <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     766:	8c e0       	ldi	r24, 0x0C	; 12
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	printf("Interrupts activated\n");
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     776:	85 e4       	ldi	r24, 0x45	; 69
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	0e 94 ab 06 	call	0xd56	; 0xd56 <puts>
     77e:	08 95       	ret

00000780 <main>:


int main(void)
{
	
	initalize();	
     780:	0e 94 9a 03 	call	0x734	; 0x734 <initalize>
     784:	ff cf       	rjmp	.-2      	; 0x784 <main+0x4>

00000786 <send_UART>:
 */ 
#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );
     786:	5d 9b       	sbis	0x0b, 5	; 11
     788:	fe cf       	rjmp	.-4      	; 0x786 <send_UART>
	UDR0 = letter;
     78a:	8c b9       	out	0x0c, r24	; 12
     78c:	08 95       	ret

0000078e <recieve_UART>:
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
}

unsigned int recieve_UART(void){
	while (!(UCSR0A & (1 << RXC0)));
     78e:	5f 9b       	sbis	0x0b, 7	; 11
     790:	fe cf       	rjmp	.-4      	; 0x78e <recieve_UART>
	return UDR0;
     792:	8c b1       	in	r24, 0x0c	; 12
}
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	08 95       	ret

00000798 <init_UART>:
	UDR0 = letter;
}

void init_UART(unsigned int ubrr){
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     798:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     79a:	89 b9       	out	0x09, r24	; 9
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     79c:	88 e1       	ldi	r24, 0x18	; 24
     79e:	8a b9       	out	0x0a, r24	; 10
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
     7a0:	67 ec       	ldi	r22, 0xC7	; 199
     7a2:	73 e0       	ldi	r23, 0x03	; 3
     7a4:	83 ec       	ldi	r24, 0xC3	; 195
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 4c 06 	call	0xc98	; 0xc98 <fdevopen>
     7ac:	08 95       	ret

000007ae <__subsf3>:
     7ae:	50 58       	subi	r21, 0x80	; 128

000007b0 <__addsf3>:
     7b0:	bb 27       	eor	r27, r27
     7b2:	aa 27       	eor	r26, r26
     7b4:	0e d0       	rcall	.+28     	; 0x7d2 <__addsf3x>
     7b6:	4d c1       	rjmp	.+666    	; 0xa52 <__fp_round>
     7b8:	3e d1       	rcall	.+636    	; 0xa36 <__fp_pscA>
     7ba:	30 f0       	brcs	.+12     	; 0x7c8 <__addsf3+0x18>
     7bc:	43 d1       	rcall	.+646    	; 0xa44 <__fp_pscB>
     7be:	20 f0       	brcs	.+8      	; 0x7c8 <__addsf3+0x18>
     7c0:	31 f4       	brne	.+12     	; 0x7ce <__addsf3+0x1e>
     7c2:	9f 3f       	cpi	r25, 0xFF	; 255
     7c4:	11 f4       	brne	.+4      	; 0x7ca <__addsf3+0x1a>
     7c6:	1e f4       	brtc	.+6      	; 0x7ce <__addsf3+0x1e>
     7c8:	33 c1       	rjmp	.+614    	; 0xa30 <__fp_nan>
     7ca:	0e f4       	brtc	.+2      	; 0x7ce <__addsf3+0x1e>
     7cc:	e0 95       	com	r30
     7ce:	e7 fb       	bst	r30, 7
     7d0:	29 c1       	rjmp	.+594    	; 0xa24 <__fp_inf>

000007d2 <__addsf3x>:
     7d2:	e9 2f       	mov	r30, r25
     7d4:	4f d1       	rcall	.+670    	; 0xa74 <__fp_split3>
     7d6:	80 f3       	brcs	.-32     	; 0x7b8 <__addsf3+0x8>
     7d8:	ba 17       	cp	r27, r26
     7da:	62 07       	cpc	r22, r18
     7dc:	73 07       	cpc	r23, r19
     7de:	84 07       	cpc	r24, r20
     7e0:	95 07       	cpc	r25, r21
     7e2:	18 f0       	brcs	.+6      	; 0x7ea <__addsf3x+0x18>
     7e4:	71 f4       	brne	.+28     	; 0x802 <__addsf3x+0x30>
     7e6:	9e f5       	brtc	.+102    	; 0x84e <__addsf3x+0x7c>
     7e8:	67 c1       	rjmp	.+718    	; 0xab8 <__fp_zero>
     7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3x+0x1c>
     7ec:	e0 95       	com	r30
     7ee:	0b 2e       	mov	r0, r27
     7f0:	ba 2f       	mov	r27, r26
     7f2:	a0 2d       	mov	r26, r0
     7f4:	0b 01       	movw	r0, r22
     7f6:	b9 01       	movw	r22, r18
     7f8:	90 01       	movw	r18, r0
     7fa:	0c 01       	movw	r0, r24
     7fc:	ca 01       	movw	r24, r20
     7fe:	a0 01       	movw	r20, r0
     800:	11 24       	eor	r1, r1
     802:	ff 27       	eor	r31, r31
     804:	59 1b       	sub	r21, r25
     806:	99 f0       	breq	.+38     	; 0x82e <__addsf3x+0x5c>
     808:	59 3f       	cpi	r21, 0xF9	; 249
     80a:	50 f4       	brcc	.+20     	; 0x820 <__addsf3x+0x4e>
     80c:	50 3e       	cpi	r21, 0xE0	; 224
     80e:	68 f1       	brcs	.+90     	; 0x86a <__addsf3x+0x98>
     810:	1a 16       	cp	r1, r26
     812:	f0 40       	sbci	r31, 0x00	; 0
     814:	a2 2f       	mov	r26, r18
     816:	23 2f       	mov	r18, r19
     818:	34 2f       	mov	r19, r20
     81a:	44 27       	eor	r20, r20
     81c:	58 5f       	subi	r21, 0xF8	; 248
     81e:	f3 cf       	rjmp	.-26     	; 0x806 <__addsf3x+0x34>
     820:	46 95       	lsr	r20
     822:	37 95       	ror	r19
     824:	27 95       	ror	r18
     826:	a7 95       	ror	r26
     828:	f0 40       	sbci	r31, 0x00	; 0
     82a:	53 95       	inc	r21
     82c:	c9 f7       	brne	.-14     	; 0x820 <__addsf3x+0x4e>
     82e:	7e f4       	brtc	.+30     	; 0x84e <__addsf3x+0x7c>
     830:	1f 16       	cp	r1, r31
     832:	ba 0b       	sbc	r27, r26
     834:	62 0b       	sbc	r22, r18
     836:	73 0b       	sbc	r23, r19
     838:	84 0b       	sbc	r24, r20
     83a:	ba f0       	brmi	.+46     	; 0x86a <__addsf3x+0x98>
     83c:	91 50       	subi	r25, 0x01	; 1
     83e:	a1 f0       	breq	.+40     	; 0x868 <__addsf3x+0x96>
     840:	ff 0f       	add	r31, r31
     842:	bb 1f       	adc	r27, r27
     844:	66 1f       	adc	r22, r22
     846:	77 1f       	adc	r23, r23
     848:	88 1f       	adc	r24, r24
     84a:	c2 f7       	brpl	.-16     	; 0x83c <__addsf3x+0x6a>
     84c:	0e c0       	rjmp	.+28     	; 0x86a <__addsf3x+0x98>
     84e:	ba 0f       	add	r27, r26
     850:	62 1f       	adc	r22, r18
     852:	73 1f       	adc	r23, r19
     854:	84 1f       	adc	r24, r20
     856:	48 f4       	brcc	.+18     	; 0x86a <__addsf3x+0x98>
     858:	87 95       	ror	r24
     85a:	77 95       	ror	r23
     85c:	67 95       	ror	r22
     85e:	b7 95       	ror	r27
     860:	f7 95       	ror	r31
     862:	9e 3f       	cpi	r25, 0xFE	; 254
     864:	08 f0       	brcs	.+2      	; 0x868 <__addsf3x+0x96>
     866:	b3 cf       	rjmp	.-154    	; 0x7ce <__addsf3+0x1e>
     868:	93 95       	inc	r25
     86a:	88 0f       	add	r24, r24
     86c:	08 f0       	brcs	.+2      	; 0x870 <__addsf3x+0x9e>
     86e:	99 27       	eor	r25, r25
     870:	ee 0f       	add	r30, r30
     872:	97 95       	ror	r25
     874:	87 95       	ror	r24
     876:	08 95       	ret

00000878 <__divsf3>:
     878:	0c d0       	rcall	.+24     	; 0x892 <__divsf3x>
     87a:	eb c0       	rjmp	.+470    	; 0xa52 <__fp_round>
     87c:	e3 d0       	rcall	.+454    	; 0xa44 <__fp_pscB>
     87e:	40 f0       	brcs	.+16     	; 0x890 <__divsf3+0x18>
     880:	da d0       	rcall	.+436    	; 0xa36 <__fp_pscA>
     882:	30 f0       	brcs	.+12     	; 0x890 <__divsf3+0x18>
     884:	21 f4       	brne	.+8      	; 0x88e <__divsf3+0x16>
     886:	5f 3f       	cpi	r21, 0xFF	; 255
     888:	19 f0       	breq	.+6      	; 0x890 <__divsf3+0x18>
     88a:	cc c0       	rjmp	.+408    	; 0xa24 <__fp_inf>
     88c:	51 11       	cpse	r21, r1
     88e:	15 c1       	rjmp	.+554    	; 0xaba <__fp_szero>
     890:	cf c0       	rjmp	.+414    	; 0xa30 <__fp_nan>

00000892 <__divsf3x>:
     892:	f0 d0       	rcall	.+480    	; 0xa74 <__fp_split3>
     894:	98 f3       	brcs	.-26     	; 0x87c <__divsf3+0x4>

00000896 <__divsf3_pse>:
     896:	99 23       	and	r25, r25
     898:	c9 f3       	breq	.-14     	; 0x88c <__divsf3+0x14>
     89a:	55 23       	and	r21, r21
     89c:	b1 f3       	breq	.-20     	; 0x88a <__divsf3+0x12>
     89e:	95 1b       	sub	r25, r21
     8a0:	55 0b       	sbc	r21, r21
     8a2:	bb 27       	eor	r27, r27
     8a4:	aa 27       	eor	r26, r26
     8a6:	62 17       	cp	r22, r18
     8a8:	73 07       	cpc	r23, r19
     8aa:	84 07       	cpc	r24, r20
     8ac:	38 f0       	brcs	.+14     	; 0x8bc <__divsf3_pse+0x26>
     8ae:	9f 5f       	subi	r25, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	44 1f       	adc	r20, r20
     8b8:	aa 1f       	adc	r26, r26
     8ba:	a9 f3       	breq	.-22     	; 0x8a6 <__divsf3_pse+0x10>
     8bc:	33 d0       	rcall	.+102    	; 0x924 <__divsf3_pse+0x8e>
     8be:	0e 2e       	mov	r0, r30
     8c0:	3a f0       	brmi	.+14     	; 0x8d0 <__divsf3_pse+0x3a>
     8c2:	e0 e8       	ldi	r30, 0x80	; 128
     8c4:	30 d0       	rcall	.+96     	; 0x926 <__divsf3_pse+0x90>
     8c6:	91 50       	subi	r25, 0x01	; 1
     8c8:	50 40       	sbci	r21, 0x00	; 0
     8ca:	e6 95       	lsr	r30
     8cc:	00 1c       	adc	r0, r0
     8ce:	ca f7       	brpl	.-14     	; 0x8c2 <__divsf3_pse+0x2c>
     8d0:	29 d0       	rcall	.+82     	; 0x924 <__divsf3_pse+0x8e>
     8d2:	fe 2f       	mov	r31, r30
     8d4:	27 d0       	rcall	.+78     	; 0x924 <__divsf3_pse+0x8e>
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	88 1f       	adc	r24, r24
     8dc:	bb 1f       	adc	r27, r27
     8de:	26 17       	cp	r18, r22
     8e0:	37 07       	cpc	r19, r23
     8e2:	48 07       	cpc	r20, r24
     8e4:	ab 07       	cpc	r26, r27
     8e6:	b0 e8       	ldi	r27, 0x80	; 128
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__divsf3_pse+0x56>
     8ea:	bb 0b       	sbc	r27, r27
     8ec:	80 2d       	mov	r24, r0
     8ee:	bf 01       	movw	r22, r30
     8f0:	ff 27       	eor	r31, r31
     8f2:	93 58       	subi	r25, 0x83	; 131
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	2a f0       	brmi	.+10     	; 0x902 <__divsf3_pse+0x6c>
     8f8:	9e 3f       	cpi	r25, 0xFE	; 254
     8fa:	51 05       	cpc	r21, r1
     8fc:	68 f0       	brcs	.+26     	; 0x918 <__divsf3_pse+0x82>
     8fe:	92 c0       	rjmp	.+292    	; 0xa24 <__fp_inf>
     900:	dc c0       	rjmp	.+440    	; 0xaba <__fp_szero>
     902:	5f 3f       	cpi	r21, 0xFF	; 255
     904:	ec f3       	brlt	.-6      	; 0x900 <__divsf3_pse+0x6a>
     906:	98 3e       	cpi	r25, 0xE8	; 232
     908:	dc f3       	brlt	.-10     	; 0x900 <__divsf3_pse+0x6a>
     90a:	86 95       	lsr	r24
     90c:	77 95       	ror	r23
     90e:	67 95       	ror	r22
     910:	b7 95       	ror	r27
     912:	f7 95       	ror	r31
     914:	9f 5f       	subi	r25, 0xFF	; 255
     916:	c9 f7       	brne	.-14     	; 0x90a <__divsf3_pse+0x74>
     918:	88 0f       	add	r24, r24
     91a:	91 1d       	adc	r25, r1
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	97 f9       	bld	r25, 7
     922:	08 95       	ret
     924:	e1 e0       	ldi	r30, 0x01	; 1
     926:	66 0f       	add	r22, r22
     928:	77 1f       	adc	r23, r23
     92a:	88 1f       	adc	r24, r24
     92c:	bb 1f       	adc	r27, r27
     92e:	62 17       	cp	r22, r18
     930:	73 07       	cpc	r23, r19
     932:	84 07       	cpc	r24, r20
     934:	ba 07       	cpc	r27, r26
     936:	20 f0       	brcs	.+8      	; 0x940 <__divsf3_pse+0xaa>
     938:	62 1b       	sub	r22, r18
     93a:	73 0b       	sbc	r23, r19
     93c:	84 0b       	sbc	r24, r20
     93e:	ba 0b       	sbc	r27, r26
     940:	ee 1f       	adc	r30, r30
     942:	88 f7       	brcc	.-30     	; 0x926 <__divsf3_pse+0x90>
     944:	e0 95       	com	r30
     946:	08 95       	ret

00000948 <__fixsfsi>:
     948:	04 d0       	rcall	.+8      	; 0x952 <__fixunssfsi>
     94a:	68 94       	set
     94c:	b1 11       	cpse	r27, r1
     94e:	b5 c0       	rjmp	.+362    	; 0xaba <__fp_szero>
     950:	08 95       	ret

00000952 <__fixunssfsi>:
     952:	98 d0       	rcall	.+304    	; 0xa84 <__fp_splitA>
     954:	88 f0       	brcs	.+34     	; 0x978 <__fixunssfsi+0x26>
     956:	9f 57       	subi	r25, 0x7F	; 127
     958:	90 f0       	brcs	.+36     	; 0x97e <__fixunssfsi+0x2c>
     95a:	b9 2f       	mov	r27, r25
     95c:	99 27       	eor	r25, r25
     95e:	b7 51       	subi	r27, 0x17	; 23
     960:	a0 f0       	brcs	.+40     	; 0x98a <__fixunssfsi+0x38>
     962:	d1 f0       	breq	.+52     	; 0x998 <__fixunssfsi+0x46>
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	88 1f       	adc	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	1a f0       	brmi	.+6      	; 0x974 <__fixunssfsi+0x22>
     96e:	ba 95       	dec	r27
     970:	c9 f7       	brne	.-14     	; 0x964 <__fixunssfsi+0x12>
     972:	12 c0       	rjmp	.+36     	; 0x998 <__fixunssfsi+0x46>
     974:	b1 30       	cpi	r27, 0x01	; 1
     976:	81 f0       	breq	.+32     	; 0x998 <__fixunssfsi+0x46>
     978:	9f d0       	rcall	.+318    	; 0xab8 <__fp_zero>
     97a:	b1 e0       	ldi	r27, 0x01	; 1
     97c:	08 95       	ret
     97e:	9c c0       	rjmp	.+312    	; 0xab8 <__fp_zero>
     980:	67 2f       	mov	r22, r23
     982:	78 2f       	mov	r23, r24
     984:	88 27       	eor	r24, r24
     986:	b8 5f       	subi	r27, 0xF8	; 248
     988:	39 f0       	breq	.+14     	; 0x998 <__fixunssfsi+0x46>
     98a:	b9 3f       	cpi	r27, 0xF9	; 249
     98c:	cc f3       	brlt	.-14     	; 0x980 <__fixunssfsi+0x2e>
     98e:	86 95       	lsr	r24
     990:	77 95       	ror	r23
     992:	67 95       	ror	r22
     994:	b3 95       	inc	r27
     996:	d9 f7       	brne	.-10     	; 0x98e <__fixunssfsi+0x3c>
     998:	3e f4       	brtc	.+14     	; 0x9a8 <__fixunssfsi+0x56>
     99a:	90 95       	com	r25
     99c:	80 95       	com	r24
     99e:	70 95       	com	r23
     9a0:	61 95       	neg	r22
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	8f 4f       	sbci	r24, 0xFF	; 255
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	08 95       	ret

000009aa <__floatunsisf>:
     9aa:	e8 94       	clt
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__floatsisf+0x12>

000009ae <__floatsisf>:
     9ae:	97 fb       	bst	r25, 7
     9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__floatsisf+0x12>
     9b2:	90 95       	com	r25
     9b4:	80 95       	com	r24
     9b6:	70 95       	com	r23
     9b8:	61 95       	neg	r22
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	8f 4f       	sbci	r24, 0xFF	; 255
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	99 23       	and	r25, r25
     9c2:	a9 f0       	breq	.+42     	; 0x9ee <__floatsisf+0x40>
     9c4:	f9 2f       	mov	r31, r25
     9c6:	96 e9       	ldi	r25, 0x96	; 150
     9c8:	bb 27       	eor	r27, r27
     9ca:	93 95       	inc	r25
     9cc:	f6 95       	lsr	r31
     9ce:	87 95       	ror	r24
     9d0:	77 95       	ror	r23
     9d2:	67 95       	ror	r22
     9d4:	b7 95       	ror	r27
     9d6:	f1 11       	cpse	r31, r1
     9d8:	f8 cf       	rjmp	.-16     	; 0x9ca <__floatsisf+0x1c>
     9da:	fa f4       	brpl	.+62     	; 0xa1a <__floatsisf+0x6c>
     9dc:	bb 0f       	add	r27, r27
     9de:	11 f4       	brne	.+4      	; 0x9e4 <__floatsisf+0x36>
     9e0:	60 ff       	sbrs	r22, 0
     9e2:	1b c0       	rjmp	.+54     	; 0xa1a <__floatsisf+0x6c>
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	16 c0       	rjmp	.+44     	; 0xa1a <__floatsisf+0x6c>
     9ee:	88 23       	and	r24, r24
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <__floatsisf+0x48>
     9f2:	96 e9       	ldi	r25, 0x96	; 150
     9f4:	11 c0       	rjmp	.+34     	; 0xa18 <__floatsisf+0x6a>
     9f6:	77 23       	and	r23, r23
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__floatsisf+0x54>
     9fa:	9e e8       	ldi	r25, 0x8E	; 142
     9fc:	87 2f       	mov	r24, r23
     9fe:	76 2f       	mov	r23, r22
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <__floatsisf+0x5e>
     a02:	66 23       	and	r22, r22
     a04:	71 f0       	breq	.+28     	; 0xa22 <__floatsisf+0x74>
     a06:	96 e8       	ldi	r25, 0x86	; 134
     a08:	86 2f       	mov	r24, r22
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	2a f0       	brmi	.+10     	; 0xa1a <__floatsisf+0x6c>
     a10:	9a 95       	dec	r25
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	da f7       	brpl	.-10     	; 0xa10 <__floatsisf+0x62>
     a1a:	88 0f       	add	r24, r24
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	97 f9       	bld	r25, 7
     a22:	08 95       	ret

00000a24 <__fp_inf>:
     a24:	97 f9       	bld	r25, 7
     a26:	9f 67       	ori	r25, 0x7F	; 127
     a28:	80 e8       	ldi	r24, 0x80	; 128
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	08 95       	ret

00000a30 <__fp_nan>:
     a30:	9f ef       	ldi	r25, 0xFF	; 255
     a32:	80 ec       	ldi	r24, 0xC0	; 192
     a34:	08 95       	ret

00000a36 <__fp_pscA>:
     a36:	00 24       	eor	r0, r0
     a38:	0a 94       	dec	r0
     a3a:	16 16       	cp	r1, r22
     a3c:	17 06       	cpc	r1, r23
     a3e:	18 06       	cpc	r1, r24
     a40:	09 06       	cpc	r0, r25
     a42:	08 95       	ret

00000a44 <__fp_pscB>:
     a44:	00 24       	eor	r0, r0
     a46:	0a 94       	dec	r0
     a48:	12 16       	cp	r1, r18
     a4a:	13 06       	cpc	r1, r19
     a4c:	14 06       	cpc	r1, r20
     a4e:	05 06       	cpc	r0, r21
     a50:	08 95       	ret

00000a52 <__fp_round>:
     a52:	09 2e       	mov	r0, r25
     a54:	03 94       	inc	r0
     a56:	00 0c       	add	r0, r0
     a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0xc>
     a5a:	88 23       	and	r24, r24
     a5c:	52 f0       	brmi	.+20     	; 0xa72 <__fp_round+0x20>
     a5e:	bb 0f       	add	r27, r27
     a60:	40 f4       	brcc	.+16     	; 0xa72 <__fp_round+0x20>
     a62:	bf 2b       	or	r27, r31
     a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0x18>
     a66:	60 ff       	sbrs	r22, 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__fp_round+0x20>
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8f 4f       	sbci	r24, 0xFF	; 255
     a70:	9f 4f       	sbci	r25, 0xFF	; 255
     a72:	08 95       	ret

00000a74 <__fp_split3>:
     a74:	57 fd       	sbrc	r21, 7
     a76:	90 58       	subi	r25, 0x80	; 128
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	59 f0       	breq	.+22     	; 0xa94 <__fp_splitA+0x10>
     a7e:	5f 3f       	cpi	r21, 0xFF	; 255
     a80:	71 f0       	breq	.+28     	; 0xa9e <__fp_splitA+0x1a>
     a82:	47 95       	ror	r20

00000a84 <__fp_splitA>:
     a84:	88 0f       	add	r24, r24
     a86:	97 fb       	bst	r25, 7
     a88:	99 1f       	adc	r25, r25
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <__fp_splitA+0x20>
     a8c:	9f 3f       	cpi	r25, 0xFF	; 255
     a8e:	79 f0       	breq	.+30     	; 0xaae <__fp_splitA+0x2a>
     a90:	87 95       	ror	r24
     a92:	08 95       	ret
     a94:	12 16       	cp	r1, r18
     a96:	13 06       	cpc	r1, r19
     a98:	14 06       	cpc	r1, r20
     a9a:	55 1f       	adc	r21, r21
     a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <__fp_split3+0xe>
     a9e:	46 95       	lsr	r20
     aa0:	f1 df       	rcall	.-30     	; 0xa84 <__fp_splitA>
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__fp_splitA+0x30>
     aa4:	16 16       	cp	r1, r22
     aa6:	17 06       	cpc	r1, r23
     aa8:	18 06       	cpc	r1, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	f1 cf       	rjmp	.-30     	; 0xa90 <__fp_splitA+0xc>
     aae:	86 95       	lsr	r24
     ab0:	71 05       	cpc	r23, r1
     ab2:	61 05       	cpc	r22, r1
     ab4:	08 94       	sec
     ab6:	08 95       	ret

00000ab8 <__fp_zero>:
     ab8:	e8 94       	clt

00000aba <__fp_szero>:
     aba:	bb 27       	eor	r27, r27
     abc:	66 27       	eor	r22, r22
     abe:	77 27       	eor	r23, r23
     ac0:	cb 01       	movw	r24, r22
     ac2:	97 f9       	bld	r25, 7
     ac4:	08 95       	ret

00000ac6 <__mulsf3>:
     ac6:	0b d0       	rcall	.+22     	; 0xade <__mulsf3x>
     ac8:	c4 cf       	rjmp	.-120    	; 0xa52 <__fp_round>
     aca:	b5 df       	rcall	.-150    	; 0xa36 <__fp_pscA>
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__mulsf3+0x12>
     ace:	ba df       	rcall	.-140    	; 0xa44 <__fp_pscB>
     ad0:	18 f0       	brcs	.+6      	; 0xad8 <__mulsf3+0x12>
     ad2:	95 23       	and	r25, r21
     ad4:	09 f0       	breq	.+2      	; 0xad8 <__mulsf3+0x12>
     ad6:	a6 cf       	rjmp	.-180    	; 0xa24 <__fp_inf>
     ad8:	ab cf       	rjmp	.-170    	; 0xa30 <__fp_nan>
     ada:	11 24       	eor	r1, r1
     adc:	ee cf       	rjmp	.-36     	; 0xaba <__fp_szero>

00000ade <__mulsf3x>:
     ade:	ca df       	rcall	.-108    	; 0xa74 <__fp_split3>
     ae0:	a0 f3       	brcs	.-24     	; 0xaca <__mulsf3+0x4>

00000ae2 <__mulsf3_pse>:
     ae2:	95 9f       	mul	r25, r21
     ae4:	d1 f3       	breq	.-12     	; 0xada <__mulsf3+0x14>
     ae6:	95 0f       	add	r25, r21
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	55 1f       	adc	r21, r21
     aec:	62 9f       	mul	r22, r18
     aee:	f0 01       	movw	r30, r0
     af0:	72 9f       	mul	r23, r18
     af2:	bb 27       	eor	r27, r27
     af4:	f0 0d       	add	r31, r0
     af6:	b1 1d       	adc	r27, r1
     af8:	63 9f       	mul	r22, r19
     afa:	aa 27       	eor	r26, r26
     afc:	f0 0d       	add	r31, r0
     afe:	b1 1d       	adc	r27, r1
     b00:	aa 1f       	adc	r26, r26
     b02:	64 9f       	mul	r22, r20
     b04:	66 27       	eor	r22, r22
     b06:	b0 0d       	add	r27, r0
     b08:	a1 1d       	adc	r26, r1
     b0a:	66 1f       	adc	r22, r22
     b0c:	82 9f       	mul	r24, r18
     b0e:	22 27       	eor	r18, r18
     b10:	b0 0d       	add	r27, r0
     b12:	a1 1d       	adc	r26, r1
     b14:	62 1f       	adc	r22, r18
     b16:	73 9f       	mul	r23, r19
     b18:	b0 0d       	add	r27, r0
     b1a:	a1 1d       	adc	r26, r1
     b1c:	62 1f       	adc	r22, r18
     b1e:	83 9f       	mul	r24, r19
     b20:	a0 0d       	add	r26, r0
     b22:	61 1d       	adc	r22, r1
     b24:	22 1f       	adc	r18, r18
     b26:	74 9f       	mul	r23, r20
     b28:	33 27       	eor	r19, r19
     b2a:	a0 0d       	add	r26, r0
     b2c:	61 1d       	adc	r22, r1
     b2e:	23 1f       	adc	r18, r19
     b30:	84 9f       	mul	r24, r20
     b32:	60 0d       	add	r22, r0
     b34:	21 1d       	adc	r18, r1
     b36:	82 2f       	mov	r24, r18
     b38:	76 2f       	mov	r23, r22
     b3a:	6a 2f       	mov	r22, r26
     b3c:	11 24       	eor	r1, r1
     b3e:	9f 57       	subi	r25, 0x7F	; 127
     b40:	50 40       	sbci	r21, 0x00	; 0
     b42:	8a f0       	brmi	.+34     	; 0xb66 <__mulsf3_pse+0x84>
     b44:	e1 f0       	breq	.+56     	; 0xb7e <__mulsf3_pse+0x9c>
     b46:	88 23       	and	r24, r24
     b48:	4a f0       	brmi	.+18     	; 0xb5c <__mulsf3_pse+0x7a>
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	bb 1f       	adc	r27, r27
     b50:	66 1f       	adc	r22, r22
     b52:	77 1f       	adc	r23, r23
     b54:	88 1f       	adc	r24, r24
     b56:	91 50       	subi	r25, 0x01	; 1
     b58:	50 40       	sbci	r21, 0x00	; 0
     b5a:	a9 f7       	brne	.-22     	; 0xb46 <__mulsf3_pse+0x64>
     b5c:	9e 3f       	cpi	r25, 0xFE	; 254
     b5e:	51 05       	cpc	r21, r1
     b60:	70 f0       	brcs	.+28     	; 0xb7e <__mulsf3_pse+0x9c>
     b62:	60 cf       	rjmp	.-320    	; 0xa24 <__fp_inf>
     b64:	aa cf       	rjmp	.-172    	; 0xaba <__fp_szero>
     b66:	5f 3f       	cpi	r21, 0xFF	; 255
     b68:	ec f3       	brlt	.-6      	; 0xb64 <__mulsf3_pse+0x82>
     b6a:	98 3e       	cpi	r25, 0xE8	; 232
     b6c:	dc f3       	brlt	.-10     	; 0xb64 <__mulsf3_pse+0x82>
     b6e:	86 95       	lsr	r24
     b70:	77 95       	ror	r23
     b72:	67 95       	ror	r22
     b74:	b7 95       	ror	r27
     b76:	f7 95       	ror	r31
     b78:	e7 95       	ror	r30
     b7a:	9f 5f       	subi	r25, 0xFF	; 255
     b7c:	c1 f7       	brne	.-16     	; 0xb6e <__mulsf3_pse+0x8c>
     b7e:	fe 2b       	or	r31, r30
     b80:	88 0f       	add	r24, r24
     b82:	91 1d       	adc	r25, r1
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
     b88:	97 f9       	bld	r25, 7
     b8a:	08 95       	ret

00000b8c <__divmodhi4>:
     b8c:	97 fb       	bst	r25, 7
     b8e:	07 2e       	mov	r0, r23
     b90:	16 f4       	brtc	.+4      	; 0xb96 <__divmodhi4+0xa>
     b92:	00 94       	com	r0
     b94:	07 d0       	rcall	.+14     	; 0xba4 <__divmodhi4_neg1>
     b96:	77 fd       	sbrc	r23, 7
     b98:	09 d0       	rcall	.+18     	; 0xbac <__divmodhi4_neg2>
     b9a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodhi4>
     b9e:	07 fc       	sbrc	r0, 7
     ba0:	05 d0       	rcall	.+10     	; 0xbac <__divmodhi4_neg2>
     ba2:	3e f4       	brtc	.+14     	; 0xbb2 <__divmodhi4_exit>

00000ba4 <__divmodhi4_neg1>:
     ba4:	90 95       	com	r25
     ba6:	81 95       	neg	r24
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	08 95       	ret

00000bac <__divmodhi4_neg2>:
     bac:	70 95       	com	r23
     bae:	61 95       	neg	r22
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb2 <__divmodhi4_exit>:
     bb2:	08 95       	ret

00000bb4 <__udivmodhi4>:
     bb4:	aa 1b       	sub	r26, r26
     bb6:	bb 1b       	sub	r27, r27
     bb8:	51 e1       	ldi	r21, 0x11	; 17
     bba:	07 c0       	rjmp	.+14     	; 0xbca <__udivmodhi4_ep>

00000bbc <__udivmodhi4_loop>:
     bbc:	aa 1f       	adc	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	a6 17       	cp	r26, r22
     bc2:	b7 07       	cpc	r27, r23
     bc4:	10 f0       	brcs	.+4      	; 0xbca <__udivmodhi4_ep>
     bc6:	a6 1b       	sub	r26, r22
     bc8:	b7 0b       	sbc	r27, r23

00000bca <__udivmodhi4_ep>:
     bca:	88 1f       	adc	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	5a 95       	dec	r21
     bd0:	a9 f7       	brne	.-22     	; 0xbbc <__udivmodhi4_loop>
     bd2:	80 95       	com	r24
     bd4:	90 95       	com	r25
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	08 95       	ret

00000bdc <do_rand>:
     bdc:	8f 92       	push	r8
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
     bf2:	68 81       	ld	r22, Y
     bf4:	79 81       	ldd	r23, Y+1	; 0x01
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	9b 81       	ldd	r25, Y+3	; 0x03
     bfa:	61 15       	cp	r22, r1
     bfc:	71 05       	cpc	r23, r1
     bfe:	81 05       	cpc	r24, r1
     c00:	91 05       	cpc	r25, r1
     c02:	21 f4       	brne	.+8      	; 0xc0c <do_rand+0x30>
     c04:	64 e2       	ldi	r22, 0x24	; 36
     c06:	79 ed       	ldi	r23, 0xD9	; 217
     c08:	8b e5       	ldi	r24, 0x5B	; 91
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	2d e1       	ldi	r18, 0x1D	; 29
     c0e:	33 ef       	ldi	r19, 0xF3	; 243
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__divmodsi4>
     c18:	49 01       	movw	r8, r18
     c1a:	5a 01       	movw	r10, r20
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	a7 ea       	ldi	r26, 0xA7	; 167
     c22:	b1 e4       	ldi	r27, 0x41	; 65
     c24:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__muluhisi3>
     c28:	6b 01       	movw	r12, r22
     c2a:	7c 01       	movw	r14, r24
     c2c:	ac ee       	ldi	r26, 0xEC	; 236
     c2e:	b4 ef       	ldi	r27, 0xF4	; 244
     c30:	a5 01       	movw	r20, r10
     c32:	94 01       	movw	r18, r8
     c34:	0e 94 c7 0a 	call	0x158e	; 0x158e <__mulohisi3>
     c38:	c6 0e       	add	r12, r22
     c3a:	d7 1e       	adc	r13, r23
     c3c:	e8 1e       	adc	r14, r24
     c3e:	f9 1e       	adc	r15, r25
     c40:	f7 fe       	sbrs	r15, 7
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <do_rand+0x74>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	c8 1a       	sub	r12, r24
     c48:	d1 08       	sbc	r13, r1
     c4a:	e1 08       	sbc	r14, r1
     c4c:	80 e8       	ldi	r24, 0x80	; 128
     c4e:	f8 0a       	sbc	r15, r24
     c50:	c8 82       	st	Y, r12
     c52:	d9 82       	std	Y+1, r13	; 0x01
     c54:	ea 82       	std	Y+2, r14	; 0x02
     c56:	fb 82       	std	Y+3, r15	; 0x03
     c58:	c6 01       	movw	r24, r12
     c5a:	9f 77       	andi	r25, 0x7F	; 127
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	bf 90       	pop	r11
     c6a:	af 90       	pop	r10
     c6c:	9f 90       	pop	r9
     c6e:	8f 90       	pop	r8
     c70:	08 95       	ret

00000c72 <rand_r>:
     c72:	0e 94 ee 05 	call	0xbdc	; 0xbdc <do_rand>
     c76:	08 95       	ret

00000c78 <rand>:
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <do_rand>
     c80:	08 95       	ret

00000c82 <srand>:
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	80 93 00 01 	sts	0x0100, r24
     c8a:	90 93 01 01 	sts	0x0101, r25
     c8e:	a0 93 02 01 	sts	0x0102, r26
     c92:	b0 93 03 01 	sts	0x0103, r27
     c96:	08 95       	ret

00000c98 <fdevopen>:
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	8b 01       	movw	r16, r22
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <fdevopen+0x1c>
     ca8:	61 15       	cp	r22, r1
     caa:	71 05       	cpc	r23, r1
     cac:	19 f4       	brne	.+6      	; 0xcb4 <fdevopen+0x1c>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	38 c0       	rjmp	.+112    	; 0xd24 <fdevopen+0x8c>
     cb4:	6e e0       	ldi	r22, 0x0E	; 14
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 aa 08 	call	0x1154	; 0x1154 <calloc>
     cc0:	fc 01       	movw	r30, r24
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	a1 f3       	breq	.-24     	; 0xcae <fdevopen+0x16>
     cc6:	80 e8       	ldi	r24, 0x80	; 128
     cc8:	83 83       	std	Z+3, r24	; 0x03
     cca:	01 15       	cp	r16, r1
     ccc:	11 05       	cpc	r17, r1
     cce:	71 f0       	breq	.+28     	; 0xcec <fdevopen+0x54>
     cd0:	13 87       	std	Z+11, r17	; 0x0b
     cd2:	02 87       	std	Z+10, r16	; 0x0a
     cd4:	81 e8       	ldi	r24, 0x81	; 129
     cd6:	83 83       	std	Z+3, r24	; 0x03
     cd8:	80 91 6a 03 	lds	r24, 0x036A
     cdc:	90 91 6b 03 	lds	r25, 0x036B
     ce0:	89 2b       	or	r24, r25
     ce2:	21 f4       	brne	.+8      	; 0xcec <fdevopen+0x54>
     ce4:	f0 93 6b 03 	sts	0x036B, r31
     ce8:	e0 93 6a 03 	sts	0x036A, r30
     cec:	20 97       	sbiw	r28, 0x00	; 0
     cee:	c9 f0       	breq	.+50     	; 0xd22 <fdevopen+0x8a>
     cf0:	d1 87       	std	Z+9, r29	; 0x09
     cf2:	c0 87       	std	Z+8, r28	; 0x08
     cf4:	83 81       	ldd	r24, Z+3	; 0x03
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	83 83       	std	Z+3, r24	; 0x03
     cfa:	80 91 6c 03 	lds	r24, 0x036C
     cfe:	90 91 6d 03 	lds	r25, 0x036D
     d02:	89 2b       	or	r24, r25
     d04:	71 f4       	brne	.+28     	; 0xd22 <fdevopen+0x8a>
     d06:	f0 93 6d 03 	sts	0x036D, r31
     d0a:	e0 93 6c 03 	sts	0x036C, r30
     d0e:	80 91 6e 03 	lds	r24, 0x036E
     d12:	90 91 6f 03 	lds	r25, 0x036F
     d16:	89 2b       	or	r24, r25
     d18:	21 f4       	brne	.+8      	; 0xd22 <fdevopen+0x8a>
     d1a:	f0 93 6f 03 	sts	0x036F, r31
     d1e:	e0 93 6e 03 	sts	0x036E, r30
     d22:	cf 01       	movw	r24, r30
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <printf>:
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ed e9       	ldi	r30, 0x9D	; 157
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__prologue_saves__+0x20>
     d3a:	fe 01       	movw	r30, r28
     d3c:	35 96       	adiw	r30, 0x05	; 5
     d3e:	61 91       	ld	r22, Z+
     d40:	71 91       	ld	r23, Z+
     d42:	af 01       	movw	r20, r30
     d44:	80 91 6c 03 	lds	r24, 0x036C
     d48:	90 91 6d 03 	lds	r25, 0x036D
     d4c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vfprintf>
     d50:	e2 e0       	ldi	r30, 0x02	; 2
     d52:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__epilogue_restores__+0x20>

00000d56 <puts>:
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	e0 91 6c 03 	lds	r30, 0x036C
     d62:	f0 91 6d 03 	lds	r31, 0x036D
     d66:	23 81       	ldd	r18, Z+3	; 0x03
     d68:	21 ff       	sbrs	r18, 1
     d6a:	1b c0       	rjmp	.+54     	; 0xda2 <puts+0x4c>
     d6c:	ec 01       	movw	r28, r24
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	89 91       	ld	r24, Y+
     d74:	60 91 6c 03 	lds	r22, 0x036C
     d78:	70 91 6d 03 	lds	r23, 0x036D
     d7c:	db 01       	movw	r26, r22
     d7e:	18 96       	adiw	r26, 0x08	; 8
     d80:	ed 91       	ld	r30, X+
     d82:	fc 91       	ld	r31, X
     d84:	19 97       	sbiw	r26, 0x09	; 9
     d86:	88 23       	and	r24, r24
     d88:	31 f0       	breq	.+12     	; 0xd96 <puts+0x40>
     d8a:	09 95       	icall
     d8c:	89 2b       	or	r24, r25
     d8e:	89 f3       	breq	.-30     	; 0xd72 <puts+0x1c>
     d90:	0f ef       	ldi	r16, 0xFF	; 255
     d92:	1f ef       	ldi	r17, 0xFF	; 255
     d94:	ee cf       	rjmp	.-36     	; 0xd72 <puts+0x1c>
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	09 95       	icall
     d9a:	89 2b       	or	r24, r25
     d9c:	11 f4       	brne	.+4      	; 0xda2 <puts+0x4c>
     d9e:	c8 01       	movw	r24, r16
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <puts+0x50>
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	08 95       	ret

00000db0 <vfprintf>:
     db0:	ac e0       	ldi	r26, 0x0C	; 12
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ee ed       	ldi	r30, 0xDE	; 222
     db6:	f6 e0       	ldi	r31, 0x06	; 6
     db8:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__prologue_saves__>
     dbc:	7c 01       	movw	r14, r24
     dbe:	6b 01       	movw	r12, r22
     dc0:	8a 01       	movw	r16, r20
     dc2:	fc 01       	movw	r30, r24
     dc4:	17 82       	std	Z+7, r1	; 0x07
     dc6:	16 82       	std	Z+6, r1	; 0x06
     dc8:	83 81       	ldd	r24, Z+3	; 0x03
     dca:	81 ff       	sbrs	r24, 1
     dcc:	bd c1       	rjmp	.+890    	; 0x1148 <vfprintf+0x398>
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	4c 01       	movw	r8, r24
     dd4:	f7 01       	movw	r30, r14
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	f6 01       	movw	r30, r12
     dda:	93 fd       	sbrc	r25, 3
     ddc:	85 91       	lpm	r24, Z+
     dde:	93 ff       	sbrs	r25, 3
     de0:	81 91       	ld	r24, Z+
     de2:	6f 01       	movw	r12, r30
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <vfprintf+0x3a>
     de8:	ab c1       	rjmp	.+854    	; 0x1140 <vfprintf+0x390>
     dea:	85 32       	cpi	r24, 0x25	; 37
     dec:	39 f4       	brne	.+14     	; 0xdfc <vfprintf+0x4c>
     dee:	93 fd       	sbrc	r25, 3
     df0:	85 91       	lpm	r24, Z+
     df2:	93 ff       	sbrs	r25, 3
     df4:	81 91       	ld	r24, Z+
     df6:	6f 01       	movw	r12, r30
     df8:	85 32       	cpi	r24, 0x25	; 37
     dfa:	29 f4       	brne	.+10     	; 0xe06 <vfprintf+0x56>
     dfc:	b7 01       	movw	r22, r14
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     e04:	e7 cf       	rjmp	.-50     	; 0xdd4 <vfprintf+0x24>
     e06:	51 2c       	mov	r5, r1
     e08:	31 2c       	mov	r3, r1
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	20 32       	cpi	r18, 0x20	; 32
     e0e:	a0 f4       	brcc	.+40     	; 0xe38 <vfprintf+0x88>
     e10:	8b 32       	cpi	r24, 0x2B	; 43
     e12:	69 f0       	breq	.+26     	; 0xe2e <vfprintf+0x7e>
     e14:	30 f4       	brcc	.+12     	; 0xe22 <vfprintf+0x72>
     e16:	80 32       	cpi	r24, 0x20	; 32
     e18:	59 f0       	breq	.+22     	; 0xe30 <vfprintf+0x80>
     e1a:	83 32       	cpi	r24, 0x23	; 35
     e1c:	69 f4       	brne	.+26     	; 0xe38 <vfprintf+0x88>
     e1e:	20 61       	ori	r18, 0x10	; 16
     e20:	2c c0       	rjmp	.+88     	; 0xe7a <vfprintf+0xca>
     e22:	8d 32       	cpi	r24, 0x2D	; 45
     e24:	39 f0       	breq	.+14     	; 0xe34 <vfprintf+0x84>
     e26:	80 33       	cpi	r24, 0x30	; 48
     e28:	39 f4       	brne	.+14     	; 0xe38 <vfprintf+0x88>
     e2a:	21 60       	ori	r18, 0x01	; 1
     e2c:	26 c0       	rjmp	.+76     	; 0xe7a <vfprintf+0xca>
     e2e:	22 60       	ori	r18, 0x02	; 2
     e30:	24 60       	ori	r18, 0x04	; 4
     e32:	23 c0       	rjmp	.+70     	; 0xe7a <vfprintf+0xca>
     e34:	28 60       	ori	r18, 0x08	; 8
     e36:	21 c0       	rjmp	.+66     	; 0xe7a <vfprintf+0xca>
     e38:	27 fd       	sbrc	r18, 7
     e3a:	27 c0       	rjmp	.+78     	; 0xe8a <vfprintf+0xda>
     e3c:	30 ed       	ldi	r19, 0xD0	; 208
     e3e:	38 0f       	add	r19, r24
     e40:	3a 30       	cpi	r19, 0x0A	; 10
     e42:	78 f4       	brcc	.+30     	; 0xe62 <vfprintf+0xb2>
     e44:	26 ff       	sbrs	r18, 6
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0xa4>
     e48:	fa e0       	ldi	r31, 0x0A	; 10
     e4a:	5f 9e       	mul	r5, r31
     e4c:	30 0d       	add	r19, r0
     e4e:	11 24       	eor	r1, r1
     e50:	53 2e       	mov	r5, r19
     e52:	13 c0       	rjmp	.+38     	; 0xe7a <vfprintf+0xca>
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	38 9e       	mul	r3, r24
     e58:	30 0d       	add	r19, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	33 2e       	mov	r3, r19
     e5e:	20 62       	ori	r18, 0x20	; 32
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <vfprintf+0xca>
     e62:	8e 32       	cpi	r24, 0x2E	; 46
     e64:	21 f4       	brne	.+8      	; 0xe6e <vfprintf+0xbe>
     e66:	26 fd       	sbrc	r18, 6
     e68:	6b c1       	rjmp	.+726    	; 0x1140 <vfprintf+0x390>
     e6a:	20 64       	ori	r18, 0x40	; 64
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <vfprintf+0xca>
     e6e:	8c 36       	cpi	r24, 0x6C	; 108
     e70:	11 f4       	brne	.+4      	; 0xe76 <vfprintf+0xc6>
     e72:	20 68       	ori	r18, 0x80	; 128
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0xca>
     e76:	88 36       	cpi	r24, 0x68	; 104
     e78:	41 f4       	brne	.+16     	; 0xe8a <vfprintf+0xda>
     e7a:	f6 01       	movw	r30, r12
     e7c:	93 fd       	sbrc	r25, 3
     e7e:	85 91       	lpm	r24, Z+
     e80:	93 ff       	sbrs	r25, 3
     e82:	81 91       	ld	r24, Z+
     e84:	6f 01       	movw	r12, r30
     e86:	81 11       	cpse	r24, r1
     e88:	c1 cf       	rjmp	.-126    	; 0xe0c <vfprintf+0x5c>
     e8a:	98 2f       	mov	r25, r24
     e8c:	9f 7d       	andi	r25, 0xDF	; 223
     e8e:	95 54       	subi	r25, 0x45	; 69
     e90:	93 30       	cpi	r25, 0x03	; 3
     e92:	28 f4       	brcc	.+10     	; 0xe9e <vfprintf+0xee>
     e94:	0c 5f       	subi	r16, 0xFC	; 252
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	ff e3       	ldi	r31, 0x3F	; 63
     e9a:	f9 83       	std	Y+1, r31	; 0x01
     e9c:	0d c0       	rjmp	.+26     	; 0xeb8 <vfprintf+0x108>
     e9e:	83 36       	cpi	r24, 0x63	; 99
     ea0:	31 f0       	breq	.+12     	; 0xeae <vfprintf+0xfe>
     ea2:	83 37       	cpi	r24, 0x73	; 115
     ea4:	71 f0       	breq	.+28     	; 0xec2 <vfprintf+0x112>
     ea6:	83 35       	cpi	r24, 0x53	; 83
     ea8:	09 f0       	breq	.+2      	; 0xeac <vfprintf+0xfc>
     eaa:	5b c0       	rjmp	.+182    	; 0xf62 <vfprintf+0x1b2>
     eac:	22 c0       	rjmp	.+68     	; 0xef2 <vfprintf+0x142>
     eae:	f8 01       	movw	r30, r16
     eb0:	80 81       	ld	r24, Z
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	0e 5f       	subi	r16, 0xFE	; 254
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	44 24       	eor	r4, r4
     eba:	43 94       	inc	r4
     ebc:	51 2c       	mov	r5, r1
     ebe:	54 01       	movw	r10, r8
     ec0:	15 c0       	rjmp	.+42     	; 0xeec <vfprintf+0x13c>
     ec2:	38 01       	movw	r6, r16
     ec4:	f2 e0       	ldi	r31, 0x02	; 2
     ec6:	6f 0e       	add	r6, r31
     ec8:	71 1c       	adc	r7, r1
     eca:	f8 01       	movw	r30, r16
     ecc:	a0 80       	ld	r10, Z
     ece:	b1 80       	ldd	r11, Z+1	; 0x01
     ed0:	26 ff       	sbrs	r18, 6
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x12a>
     ed4:	65 2d       	mov	r22, r5
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x12e>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	c5 01       	movw	r24, r10
     ee0:	2c 87       	std	Y+12, r18	; 0x0c
     ee2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <strnlen>
     ee6:	2c 01       	movw	r4, r24
     ee8:	83 01       	movw	r16, r6
     eea:	2c 85       	ldd	r18, Y+12	; 0x0c
     eec:	2f 77       	andi	r18, 0x7F	; 127
     eee:	22 2e       	mov	r2, r18
     ef0:	17 c0       	rjmp	.+46     	; 0xf20 <vfprintf+0x170>
     ef2:	38 01       	movw	r6, r16
     ef4:	f2 e0       	ldi	r31, 0x02	; 2
     ef6:	6f 0e       	add	r6, r31
     ef8:	71 1c       	adc	r7, r1
     efa:	f8 01       	movw	r30, r16
     efc:	a0 80       	ld	r10, Z
     efe:	b1 80       	ldd	r11, Z+1	; 0x01
     f00:	26 ff       	sbrs	r18, 6
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <vfprintf+0x15a>
     f04:	65 2d       	mov	r22, r5
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <vfprintf+0x15e>
     f0a:	6f ef       	ldi	r22, 0xFF	; 255
     f0c:	7f ef       	ldi	r23, 0xFF	; 255
     f0e:	c5 01       	movw	r24, r10
     f10:	2c 87       	std	Y+12, r18	; 0x0c
     f12:	0e 94 ed 09 	call	0x13da	; 0x13da <strnlen_P>
     f16:	2c 01       	movw	r4, r24
     f18:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1a:	20 68       	ori	r18, 0x80	; 128
     f1c:	22 2e       	mov	r2, r18
     f1e:	83 01       	movw	r16, r6
     f20:	23 fc       	sbrc	r2, 3
     f22:	1b c0       	rjmp	.+54     	; 0xf5a <vfprintf+0x1aa>
     f24:	83 2d       	mov	r24, r3
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	48 16       	cp	r4, r24
     f2a:	59 06       	cpc	r5, r25
     f2c:	b0 f4       	brcc	.+44     	; 0xf5a <vfprintf+0x1aa>
     f2e:	b7 01       	movw	r22, r14
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     f38:	3a 94       	dec	r3
     f3a:	f4 cf       	rjmp	.-24     	; 0xf24 <vfprintf+0x174>
     f3c:	f5 01       	movw	r30, r10
     f3e:	27 fc       	sbrc	r2, 7
     f40:	85 91       	lpm	r24, Z+
     f42:	27 fe       	sbrs	r2, 7
     f44:	81 91       	ld	r24, Z+
     f46:	5f 01       	movw	r10, r30
     f48:	b7 01       	movw	r22, r14
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
     f50:	31 10       	cpse	r3, r1
     f52:	3a 94       	dec	r3
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	4f 1a       	sub	r4, r31
     f58:	51 08       	sbc	r5, r1
     f5a:	41 14       	cp	r4, r1
     f5c:	51 04       	cpc	r5, r1
     f5e:	71 f7       	brne	.-36     	; 0xf3c <vfprintf+0x18c>
     f60:	e5 c0       	rjmp	.+458    	; 0x112c <vfprintf+0x37c>
     f62:	84 36       	cpi	r24, 0x64	; 100
     f64:	11 f0       	breq	.+4      	; 0xf6a <vfprintf+0x1ba>
     f66:	89 36       	cpi	r24, 0x69	; 105
     f68:	39 f5       	brne	.+78     	; 0xfb8 <vfprintf+0x208>
     f6a:	f8 01       	movw	r30, r16
     f6c:	27 ff       	sbrs	r18, 7
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <vfprintf+0x1ce>
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	0c 5f       	subi	r16, 0xFC	; 252
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <vfprintf+0x1de>
     f7e:	60 81       	ld	r22, Z
     f80:	71 81       	ldd	r23, Z+1	; 0x01
     f82:	88 27       	eor	r24, r24
     f84:	77 fd       	sbrc	r23, 7
     f86:	80 95       	com	r24
     f88:	98 2f       	mov	r25, r24
     f8a:	0e 5f       	subi	r16, 0xFE	; 254
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	2f 76       	andi	r18, 0x6F	; 111
     f90:	b2 2e       	mov	r11, r18
     f92:	97 ff       	sbrs	r25, 7
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <vfprintf+0x1f8>
     f96:	90 95       	com	r25
     f98:	80 95       	com	r24
     f9a:	70 95       	com	r23
     f9c:	61 95       	neg	r22
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	20 68       	ori	r18, 0x80	; 128
     fa6:	b2 2e       	mov	r11, r18
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	a4 01       	movw	r20, r8
     fae:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__ultoa_invert>
     fb2:	a8 2e       	mov	r10, r24
     fb4:	a8 18       	sub	r10, r8
     fb6:	44 c0       	rjmp	.+136    	; 0x1040 <vfprintf+0x290>
     fb8:	85 37       	cpi	r24, 0x75	; 117
     fba:	29 f4       	brne	.+10     	; 0xfc6 <vfprintf+0x216>
     fbc:	2f 7e       	andi	r18, 0xEF	; 239
     fbe:	b2 2e       	mov	r11, r18
     fc0:	2a e0       	ldi	r18, 0x0A	; 10
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	25 c0       	rjmp	.+74     	; 0x1010 <vfprintf+0x260>
     fc6:	f2 2f       	mov	r31, r18
     fc8:	f9 7f       	andi	r31, 0xF9	; 249
     fca:	bf 2e       	mov	r11, r31
     fcc:	8f 36       	cpi	r24, 0x6F	; 111
     fce:	c1 f0       	breq	.+48     	; 0x1000 <vfprintf+0x250>
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <vfprintf+0x228>
     fd2:	88 35       	cpi	r24, 0x58	; 88
     fd4:	79 f0       	breq	.+30     	; 0xff4 <vfprintf+0x244>
     fd6:	b4 c0       	rjmp	.+360    	; 0x1140 <vfprintf+0x390>
     fd8:	80 37       	cpi	r24, 0x70	; 112
     fda:	19 f0       	breq	.+6      	; 0xfe2 <vfprintf+0x232>
     fdc:	88 37       	cpi	r24, 0x78	; 120
     fde:	21 f0       	breq	.+8      	; 0xfe8 <vfprintf+0x238>
     fe0:	af c0       	rjmp	.+350    	; 0x1140 <vfprintf+0x390>
     fe2:	2f 2f       	mov	r18, r31
     fe4:	20 61       	ori	r18, 0x10	; 16
     fe6:	b2 2e       	mov	r11, r18
     fe8:	b4 fe       	sbrs	r11, 4
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <vfprintf+0x256>
     fec:	8b 2d       	mov	r24, r11
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	b8 2e       	mov	r11, r24
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <vfprintf+0x256>
     ff4:	24 ff       	sbrs	r18, 4
     ff6:	0a c0       	rjmp	.+20     	; 0x100c <vfprintf+0x25c>
     ff8:	9f 2f       	mov	r25, r31
     ffa:	96 60       	ori	r25, 0x06	; 6
     ffc:	b9 2e       	mov	r11, r25
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <vfprintf+0x25c>
    1000:	28 e0       	ldi	r18, 0x08	; 8
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <vfprintf+0x260>
    1006:	20 e1       	ldi	r18, 0x10	; 16
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x260>
    100c:	20 e1       	ldi	r18, 0x10	; 16
    100e:	32 e0       	ldi	r19, 0x02	; 2
    1010:	f8 01       	movw	r30, r16
    1012:	b7 fe       	sbrs	r11, 7
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <vfprintf+0x274>
    1016:	60 81       	ld	r22, Z
    1018:	71 81       	ldd	r23, Z+1	; 0x01
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	0c 5f       	subi	r16, 0xFC	; 252
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <vfprintf+0x280>
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 5f       	subi	r16, 0xFE	; 254
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	a4 01       	movw	r20, r8
    1032:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__ultoa_invert>
    1036:	a8 2e       	mov	r10, r24
    1038:	a8 18       	sub	r10, r8
    103a:	fb 2d       	mov	r31, r11
    103c:	ff 77       	andi	r31, 0x7F	; 127
    103e:	bf 2e       	mov	r11, r31
    1040:	b6 fe       	sbrs	r11, 6
    1042:	0b c0       	rjmp	.+22     	; 0x105a <vfprintf+0x2aa>
    1044:	2b 2d       	mov	r18, r11
    1046:	2e 7f       	andi	r18, 0xFE	; 254
    1048:	a5 14       	cp	r10, r5
    104a:	50 f4       	brcc	.+20     	; 0x1060 <vfprintf+0x2b0>
    104c:	b4 fe       	sbrs	r11, 4
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <vfprintf+0x2b4>
    1050:	b2 fc       	sbrc	r11, 2
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <vfprintf+0x2b4>
    1054:	2b 2d       	mov	r18, r11
    1056:	2e 7e       	andi	r18, 0xEE	; 238
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <vfprintf+0x2b4>
    105a:	7a 2c       	mov	r7, r10
    105c:	2b 2d       	mov	r18, r11
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x2b6>
    1060:	7a 2c       	mov	r7, r10
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <vfprintf+0x2b6>
    1064:	75 2c       	mov	r7, r5
    1066:	24 ff       	sbrs	r18, 4
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <vfprintf+0x2d4>
    106a:	fe 01       	movw	r30, r28
    106c:	ea 0d       	add	r30, r10
    106e:	f1 1d       	adc	r31, r1
    1070:	80 81       	ld	r24, Z
    1072:	80 33       	cpi	r24, 0x30	; 48
    1074:	11 f4       	brne	.+4      	; 0x107a <vfprintf+0x2ca>
    1076:	29 7e       	andi	r18, 0xE9	; 233
    1078:	09 c0       	rjmp	.+18     	; 0x108c <vfprintf+0x2dc>
    107a:	22 ff       	sbrs	r18, 2
    107c:	06 c0       	rjmp	.+12     	; 0x108a <vfprintf+0x2da>
    107e:	73 94       	inc	r7
    1080:	73 94       	inc	r7
    1082:	04 c0       	rjmp	.+8      	; 0x108c <vfprintf+0x2dc>
    1084:	82 2f       	mov	r24, r18
    1086:	86 78       	andi	r24, 0x86	; 134
    1088:	09 f0       	breq	.+2      	; 0x108c <vfprintf+0x2dc>
    108a:	73 94       	inc	r7
    108c:	23 fd       	sbrc	r18, 3
    108e:	13 c0       	rjmp	.+38     	; 0x10b6 <vfprintf+0x306>
    1090:	20 ff       	sbrs	r18, 0
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <vfprintf+0x2f0>
    1094:	5a 2c       	mov	r5, r10
    1096:	73 14       	cp	r7, r3
    1098:	18 f4       	brcc	.+6      	; 0x10a0 <vfprintf+0x2f0>
    109a:	53 0c       	add	r5, r3
    109c:	57 18       	sub	r5, r7
    109e:	73 2c       	mov	r7, r3
    10a0:	73 14       	cp	r7, r3
    10a2:	68 f4       	brcc	.+26     	; 0x10be <vfprintf+0x30e>
    10a4:	b7 01       	movw	r22, r14
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	2c 87       	std	Y+12, r18	; 0x0c
    10ac:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    10b0:	73 94       	inc	r7
    10b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b4:	f5 cf       	rjmp	.-22     	; 0x10a0 <vfprintf+0x2f0>
    10b6:	73 14       	cp	r7, r3
    10b8:	10 f4       	brcc	.+4      	; 0x10be <vfprintf+0x30e>
    10ba:	37 18       	sub	r3, r7
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <vfprintf+0x310>
    10be:	31 2c       	mov	r3, r1
    10c0:	24 ff       	sbrs	r18, 4
    10c2:	12 c0       	rjmp	.+36     	; 0x10e8 <vfprintf+0x338>
    10c4:	b7 01       	movw	r22, r14
    10c6:	80 e3       	ldi	r24, 0x30	; 48
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	2c 87       	std	Y+12, r18	; 0x0c
    10cc:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    10d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d2:	22 ff       	sbrs	r18, 2
    10d4:	17 c0       	rjmp	.+46     	; 0x1104 <vfprintf+0x354>
    10d6:	21 ff       	sbrs	r18, 1
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfprintf+0x330>
    10da:	88 e5       	ldi	r24, 0x58	; 88
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <vfprintf+0x334>
    10e0:	88 e7       	ldi	r24, 0x78	; 120
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	b7 01       	movw	r22, r14
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <vfprintf+0x350>
    10e8:	82 2f       	mov	r24, r18
    10ea:	86 78       	andi	r24, 0x86	; 134
    10ec:	59 f0       	breq	.+22     	; 0x1104 <vfprintf+0x354>
    10ee:	21 fd       	sbrc	r18, 1
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x346>
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <vfprintf+0x348>
    10f6:	8b e2       	ldi	r24, 0x2B	; 43
    10f8:	27 fd       	sbrc	r18, 7
    10fa:	8d e2       	ldi	r24, 0x2D	; 45
    10fc:	b7 01       	movw	r22, r14
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1104:	a5 14       	cp	r10, r5
    1106:	38 f4       	brcc	.+14     	; 0x1116 <vfprintf+0x366>
    1108:	b7 01       	movw	r22, r14
    110a:	80 e3       	ldi	r24, 0x30	; 48
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1112:	5a 94       	dec	r5
    1114:	f7 cf       	rjmp	.-18     	; 0x1104 <vfprintf+0x354>
    1116:	aa 94       	dec	r10
    1118:	f4 01       	movw	r30, r8
    111a:	ea 0d       	add	r30, r10
    111c:	f1 1d       	adc	r31, r1
    111e:	80 81       	ld	r24, Z
    1120:	b7 01       	movw	r22, r14
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    1128:	a1 10       	cpse	r10, r1
    112a:	f5 cf       	rjmp	.-22     	; 0x1116 <vfprintf+0x366>
    112c:	33 20       	and	r3, r3
    112e:	09 f4       	brne	.+2      	; 0x1132 <vfprintf+0x382>
    1130:	51 ce       	rjmp	.-862    	; 0xdd4 <vfprintf+0x24>
    1132:	b7 01       	movw	r22, r14
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 0a 0a 	call	0x1414	; 0x1414 <fputc>
    113c:	3a 94       	dec	r3
    113e:	f6 cf       	rjmp	.-20     	; 0x112c <vfprintf+0x37c>
    1140:	f7 01       	movw	r30, r14
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	97 81       	ldd	r25, Z+7	; 0x07
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x39c>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    114c:	2c 96       	adiw	r28, 0x0c	; 12
    114e:	e2 e1       	ldi	r30, 0x12	; 18
    1150:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__epilogue_restores__>

00001154 <calloc>:
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	86 9f       	mul	r24, r22
    115e:	80 01       	movw	r16, r0
    1160:	87 9f       	mul	r24, r23
    1162:	10 0d       	add	r17, r0
    1164:	96 9f       	mul	r25, r22
    1166:	10 0d       	add	r17, r0
    1168:	11 24       	eor	r1, r1
    116a:	c8 01       	movw	r24, r16
    116c:	0e 94 c6 08 	call	0x118c	; 0x118c <malloc>
    1170:	ec 01       	movw	r28, r24
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	29 f0       	breq	.+10     	; 0x1180 <calloc+0x2c>
    1176:	a8 01       	movw	r20, r16
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <memset>
    1180:	ce 01       	movw	r24, r28
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <malloc>:
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	91 05       	cpc	r25, r1
    1194:	10 f4       	brcc	.+4      	; 0x119a <malloc+0xe>
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	e0 91 72 03 	lds	r30, 0x0372
    119e:	f0 91 73 03 	lds	r31, 0x0373
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	39 f1       	breq	.+78     	; 0x11fc <malloc+0x70>
    11ae:	40 81       	ld	r20, Z
    11b0:	51 81       	ldd	r21, Z+1	; 0x01
    11b2:	48 17       	cp	r20, r24
    11b4:	59 07       	cpc	r21, r25
    11b6:	b8 f0       	brcs	.+46     	; 0x11e6 <malloc+0x5a>
    11b8:	48 17       	cp	r20, r24
    11ba:	59 07       	cpc	r21, r25
    11bc:	71 f4       	brne	.+28     	; 0x11da <malloc+0x4e>
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	10 97       	sbiw	r26, 0x00	; 0
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <malloc+0x44>
    11c6:	13 96       	adiw	r26, 0x03	; 3
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	12 97       	sbiw	r26, 0x02	; 2
    11ce:	2c c0       	rjmp	.+88     	; 0x1228 <malloc+0x9c>
    11d0:	90 93 73 03 	sts	0x0373, r25
    11d4:	80 93 72 03 	sts	0x0372, r24
    11d8:	27 c0       	rjmp	.+78     	; 0x1228 <malloc+0x9c>
    11da:	21 15       	cp	r18, r1
    11dc:	31 05       	cpc	r19, r1
    11de:	31 f0       	breq	.+12     	; 0x11ec <malloc+0x60>
    11e0:	42 17       	cp	r20, r18
    11e2:	53 07       	cpc	r21, r19
    11e4:	18 f0       	brcs	.+6      	; 0x11ec <malloc+0x60>
    11e6:	a9 01       	movw	r20, r18
    11e8:	db 01       	movw	r26, r22
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <malloc+0x62>
    11ec:	ef 01       	movw	r28, r30
    11ee:	9a 01       	movw	r18, r20
    11f0:	bd 01       	movw	r22, r26
    11f2:	df 01       	movw	r26, r30
    11f4:	02 80       	ldd	r0, Z+2	; 0x02
    11f6:	f3 81       	ldd	r31, Z+3	; 0x03
    11f8:	e0 2d       	mov	r30, r0
    11fa:	d7 cf       	rjmp	.-82     	; 0x11aa <malloc+0x1e>
    11fc:	21 15       	cp	r18, r1
    11fe:	31 05       	cpc	r19, r1
    1200:	f9 f0       	breq	.+62     	; 0x1240 <malloc+0xb4>
    1202:	28 1b       	sub	r18, r24
    1204:	39 0b       	sbc	r19, r25
    1206:	24 30       	cpi	r18, 0x04	; 4
    1208:	31 05       	cpc	r19, r1
    120a:	80 f4       	brcc	.+32     	; 0x122c <malloc+0xa0>
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	61 15       	cp	r22, r1
    1212:	71 05       	cpc	r23, r1
    1214:	21 f0       	breq	.+8      	; 0x121e <malloc+0x92>
    1216:	fb 01       	movw	r30, r22
    1218:	93 83       	std	Z+3, r25	; 0x03
    121a:	82 83       	std	Z+2, r24	; 0x02
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <malloc+0x9a>
    121e:	90 93 73 03 	sts	0x0373, r25
    1222:	80 93 72 03 	sts	0x0372, r24
    1226:	fe 01       	movw	r30, r28
    1228:	32 96       	adiw	r30, 0x02	; 2
    122a:	44 c0       	rjmp	.+136    	; 0x12b4 <malloc+0x128>
    122c:	fe 01       	movw	r30, r28
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	81 93       	st	Z+, r24
    1234:	91 93       	st	Z+, r25
    1236:	22 50       	subi	r18, 0x02	; 2
    1238:	31 09       	sbc	r19, r1
    123a:	39 83       	std	Y+1, r19	; 0x01
    123c:	28 83       	st	Y, r18
    123e:	3a c0       	rjmp	.+116    	; 0x12b4 <malloc+0x128>
    1240:	20 91 70 03 	lds	r18, 0x0370
    1244:	30 91 71 03 	lds	r19, 0x0371
    1248:	23 2b       	or	r18, r19
    124a:	41 f4       	brne	.+16     	; 0x125c <malloc+0xd0>
    124c:	20 91 06 01 	lds	r18, 0x0106
    1250:	30 91 07 01 	lds	r19, 0x0107
    1254:	30 93 71 03 	sts	0x0371, r19
    1258:	20 93 70 03 	sts	0x0370, r18
    125c:	20 91 04 01 	lds	r18, 0x0104
    1260:	30 91 05 01 	lds	r19, 0x0105
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	41 f4       	brne	.+16     	; 0x127a <malloc+0xee>
    126a:	2d b7       	in	r18, 0x3d	; 61
    126c:	3e b7       	in	r19, 0x3e	; 62
    126e:	40 91 08 01 	lds	r20, 0x0108
    1272:	50 91 09 01 	lds	r21, 0x0109
    1276:	24 1b       	sub	r18, r20
    1278:	35 0b       	sbc	r19, r21
    127a:	e0 91 70 03 	lds	r30, 0x0370
    127e:	f0 91 71 03 	lds	r31, 0x0371
    1282:	e2 17       	cp	r30, r18
    1284:	f3 07       	cpc	r31, r19
    1286:	a0 f4       	brcc	.+40     	; 0x12b0 <malloc+0x124>
    1288:	2e 1b       	sub	r18, r30
    128a:	3f 0b       	sbc	r19, r31
    128c:	28 17       	cp	r18, r24
    128e:	39 07       	cpc	r19, r25
    1290:	78 f0       	brcs	.+30     	; 0x12b0 <malloc+0x124>
    1292:	ac 01       	movw	r20, r24
    1294:	4e 5f       	subi	r20, 0xFE	; 254
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	24 17       	cp	r18, r20
    129a:	35 07       	cpc	r19, r21
    129c:	48 f0       	brcs	.+18     	; 0x12b0 <malloc+0x124>
    129e:	4e 0f       	add	r20, r30
    12a0:	5f 1f       	adc	r21, r31
    12a2:	50 93 71 03 	sts	0x0371, r21
    12a6:	40 93 70 03 	sts	0x0370, r20
    12aa:	81 93       	st	Z+, r24
    12ac:	91 93       	st	Z+, r25
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <malloc+0x128>
    12b0:	e0 e0       	ldi	r30, 0x00	; 0
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	cf 01       	movw	r24, r30
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <free>:
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <free+0xa>
    12c4:	87 c0       	rjmp	.+270    	; 0x13d4 <free+0x118>
    12c6:	fc 01       	movw	r30, r24
    12c8:	32 97       	sbiw	r30, 0x02	; 2
    12ca:	13 82       	std	Z+3, r1	; 0x03
    12cc:	12 82       	std	Z+2, r1	; 0x02
    12ce:	c0 91 72 03 	lds	r28, 0x0372
    12d2:	d0 91 73 03 	lds	r29, 0x0373
    12d6:	20 97       	sbiw	r28, 0x00	; 0
    12d8:	81 f4       	brne	.+32     	; 0x12fa <free+0x3e>
    12da:	20 81       	ld	r18, Z
    12dc:	31 81       	ldd	r19, Z+1	; 0x01
    12de:	28 0f       	add	r18, r24
    12e0:	39 1f       	adc	r19, r25
    12e2:	80 91 70 03 	lds	r24, 0x0370
    12e6:	90 91 71 03 	lds	r25, 0x0371
    12ea:	82 17       	cp	r24, r18
    12ec:	93 07       	cpc	r25, r19
    12ee:	79 f5       	brne	.+94     	; 0x134e <free+0x92>
    12f0:	f0 93 71 03 	sts	0x0371, r31
    12f4:	e0 93 70 03 	sts	0x0370, r30
    12f8:	6d c0       	rjmp	.+218    	; 0x13d4 <free+0x118>
    12fa:	de 01       	movw	r26, r28
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	ae 17       	cp	r26, r30
    1302:	bf 07       	cpc	r27, r31
    1304:	50 f4       	brcc	.+20     	; 0x131a <free+0x5e>
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	4d 91       	ld	r20, X+
    130a:	5c 91       	ld	r21, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	9d 01       	movw	r18, r26
    1310:	41 15       	cp	r20, r1
    1312:	51 05       	cpc	r21, r1
    1314:	09 f1       	breq	.+66     	; 0x1358 <free+0x9c>
    1316:	da 01       	movw	r26, r20
    1318:	f3 cf       	rjmp	.-26     	; 0x1300 <free+0x44>
    131a:	b3 83       	std	Z+3, r27	; 0x03
    131c:	a2 83       	std	Z+2, r26	; 0x02
    131e:	40 81       	ld	r20, Z
    1320:	51 81       	ldd	r21, Z+1	; 0x01
    1322:	84 0f       	add	r24, r20
    1324:	95 1f       	adc	r25, r21
    1326:	8a 17       	cp	r24, r26
    1328:	9b 07       	cpc	r25, r27
    132a:	71 f4       	brne	.+28     	; 0x1348 <free+0x8c>
    132c:	8d 91       	ld	r24, X+
    132e:	9c 91       	ld	r25, X
    1330:	11 97       	sbiw	r26, 0x01	; 1
    1332:	84 0f       	add	r24, r20
    1334:	95 1f       	adc	r25, r21
    1336:	02 96       	adiw	r24, 0x02	; 2
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	13 97       	sbiw	r26, 0x03	; 3
    1344:	93 83       	std	Z+3, r25	; 0x03
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	29 f4       	brne	.+10     	; 0x1358 <free+0x9c>
    134e:	f0 93 73 03 	sts	0x0373, r31
    1352:	e0 93 72 03 	sts	0x0372, r30
    1356:	3e c0       	rjmp	.+124    	; 0x13d4 <free+0x118>
    1358:	d9 01       	movw	r26, r18
    135a:	13 96       	adiw	r26, 0x03	; 3
    135c:	fc 93       	st	X, r31
    135e:	ee 93       	st	-X, r30
    1360:	12 97       	sbiw	r26, 0x02	; 2
    1362:	4d 91       	ld	r20, X+
    1364:	5d 91       	ld	r21, X+
    1366:	a4 0f       	add	r26, r20
    1368:	b5 1f       	adc	r27, r21
    136a:	ea 17       	cp	r30, r26
    136c:	fb 07       	cpc	r31, r27
    136e:	79 f4       	brne	.+30     	; 0x138e <free+0xd2>
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	84 0f       	add	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	02 96       	adiw	r24, 0x02	; 2
    137a:	d9 01       	movw	r26, r18
    137c:	11 96       	adiw	r26, 0x01	; 1
    137e:	9c 93       	st	X, r25
    1380:	8e 93       	st	-X, r24
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	13 96       	adiw	r26, 0x03	; 3
    1388:	9c 93       	st	X, r25
    138a:	8e 93       	st	-X, r24
    138c:	12 97       	sbiw	r26, 0x02	; 2
    138e:	e0 e0       	ldi	r30, 0x00	; 0
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	19 f0       	breq	.+6      	; 0x13a0 <free+0xe4>
    139a:	fe 01       	movw	r30, r28
    139c:	ec 01       	movw	r28, r24
    139e:	f9 cf       	rjmp	.-14     	; 0x1392 <free+0xd6>
    13a0:	ce 01       	movw	r24, r28
    13a2:	02 96       	adiw	r24, 0x02	; 2
    13a4:	28 81       	ld	r18, Y
    13a6:	39 81       	ldd	r19, Y+1	; 0x01
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	20 91 70 03 	lds	r18, 0x0370
    13b0:	30 91 71 03 	lds	r19, 0x0371
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <free+0x118>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <free+0x10c>
    13be:	10 92 73 03 	sts	0x0373, r1
    13c2:	10 92 72 03 	sts	0x0372, r1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <free+0x110>
    13c8:	13 82       	std	Z+3, r1	; 0x03
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	d0 93 71 03 	sts	0x0371, r29
    13d0:	c0 93 70 03 	sts	0x0370, r28
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <strnlen_P>:
    13da:	fc 01       	movw	r30, r24
    13dc:	05 90       	lpm	r0, Z+
    13de:	61 50       	subi	r22, 0x01	; 1
    13e0:	70 40       	sbci	r23, 0x00	; 0
    13e2:	01 10       	cpse	r0, r1
    13e4:	d8 f7       	brcc	.-10     	; 0x13dc <strnlen_P+0x2>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	8e 0f       	add	r24, r30
    13ec:	9f 1f       	adc	r25, r31
    13ee:	08 95       	ret

000013f0 <memset>:
    13f0:	dc 01       	movw	r26, r24
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <memset+0x6>
    13f4:	6d 93       	st	X+, r22
    13f6:	41 50       	subi	r20, 0x01	; 1
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	e0 f7       	brcc	.-8      	; 0x13f4 <memset+0x4>
    13fc:	08 95       	ret

000013fe <strnlen>:
    13fe:	fc 01       	movw	r30, r24
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 90       	ld	r0, Z+
    1406:	01 10       	cpse	r0, r1
    1408:	d8 f7       	brcc	.-10     	; 0x1400 <strnlen+0x2>
    140a:	80 95       	com	r24
    140c:	90 95       	com	r25
    140e:	8e 0f       	add	r24, r30
    1410:	9f 1f       	adc	r25, r31
    1412:	08 95       	ret

00001414 <fputc>:
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	18 2f       	mov	r17, r24
    141e:	09 2f       	mov	r16, r25
    1420:	eb 01       	movw	r28, r22
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	81 fd       	sbrc	r24, 1
    1426:	03 c0       	rjmp	.+6      	; 0x142e <fputc+0x1a>
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	9f ef       	ldi	r25, 0xFF	; 255
    142c:	20 c0       	rjmp	.+64     	; 0x146e <fputc+0x5a>
    142e:	82 ff       	sbrs	r24, 2
    1430:	10 c0       	rjmp	.+32     	; 0x1452 <fputc+0x3e>
    1432:	4e 81       	ldd	r20, Y+6	; 0x06
    1434:	5f 81       	ldd	r21, Y+7	; 0x07
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	42 17       	cp	r20, r18
    143c:	53 07       	cpc	r21, r19
    143e:	7c f4       	brge	.+30     	; 0x145e <fputc+0x4a>
    1440:	e8 81       	ld	r30, Y
    1442:	f9 81       	ldd	r31, Y+1	; 0x01
    1444:	9f 01       	movw	r18, r30
    1446:	2f 5f       	subi	r18, 0xFF	; 255
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	39 83       	std	Y+1, r19	; 0x01
    144c:	28 83       	st	Y, r18
    144e:	10 83       	st	Z, r17
    1450:	06 c0       	rjmp	.+12     	; 0x145e <fputc+0x4a>
    1452:	e8 85       	ldd	r30, Y+8	; 0x08
    1454:	f9 85       	ldd	r31, Y+9	; 0x09
    1456:	81 2f       	mov	r24, r17
    1458:	09 95       	icall
    145a:	89 2b       	or	r24, r25
    145c:	29 f7       	brne	.-54     	; 0x1428 <fputc+0x14>
    145e:	2e 81       	ldd	r18, Y+6	; 0x06
    1460:	3f 81       	ldd	r19, Y+7	; 0x07
    1462:	2f 5f       	subi	r18, 0xFF	; 255
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	3f 83       	std	Y+7, r19	; 0x07
    1468:	2e 83       	std	Y+6, r18	; 0x06
    146a:	81 2f       	mov	r24, r17
    146c:	90 2f       	mov	r25, r16
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <__ultoa_invert>:
    1478:	fa 01       	movw	r30, r20
    147a:	aa 27       	eor	r26, r26
    147c:	28 30       	cpi	r18, 0x08	; 8
    147e:	51 f1       	breq	.+84     	; 0x14d4 <__ultoa_invert+0x5c>
    1480:	20 31       	cpi	r18, 0x10	; 16
    1482:	81 f1       	breq	.+96     	; 0x14e4 <__ultoa_invert+0x6c>
    1484:	e8 94       	clt
    1486:	6f 93       	push	r22
    1488:	6e 7f       	andi	r22, 0xFE	; 254
    148a:	6e 5f       	subi	r22, 0xFE	; 254
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	af 4f       	sbci	r26, 0xFF	; 255
    1494:	b1 e0       	ldi	r27, 0x01	; 1
    1496:	3e d0       	rcall	.+124    	; 0x1514 <__ultoa_invert+0x9c>
    1498:	b4 e0       	ldi	r27, 0x04	; 4
    149a:	3c d0       	rcall	.+120    	; 0x1514 <__ultoa_invert+0x9c>
    149c:	67 0f       	add	r22, r23
    149e:	78 1f       	adc	r23, r24
    14a0:	89 1f       	adc	r24, r25
    14a2:	9a 1f       	adc	r25, r26
    14a4:	a1 1d       	adc	r26, r1
    14a6:	68 0f       	add	r22, r24
    14a8:	79 1f       	adc	r23, r25
    14aa:	8a 1f       	adc	r24, r26
    14ac:	91 1d       	adc	r25, r1
    14ae:	a1 1d       	adc	r26, r1
    14b0:	6a 0f       	add	r22, r26
    14b2:	71 1d       	adc	r23, r1
    14b4:	81 1d       	adc	r24, r1
    14b6:	91 1d       	adc	r25, r1
    14b8:	a1 1d       	adc	r26, r1
    14ba:	20 d0       	rcall	.+64     	; 0x14fc <__ultoa_invert+0x84>
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <__ultoa_invert+0x48>
    14be:	68 94       	set
    14c0:	3f 91       	pop	r19
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	26 9f       	mul	r18, r22
    14c6:	11 24       	eor	r1, r1
    14c8:	30 19       	sub	r19, r0
    14ca:	30 5d       	subi	r19, 0xD0	; 208
    14cc:	31 93       	st	Z+, r19
    14ce:	de f6       	brtc	.-74     	; 0x1486 <__ultoa_invert+0xe>
    14d0:	cf 01       	movw	r24, r30
    14d2:	08 95       	ret
    14d4:	46 2f       	mov	r20, r22
    14d6:	47 70       	andi	r20, 0x07	; 7
    14d8:	40 5d       	subi	r20, 0xD0	; 208
    14da:	41 93       	st	Z+, r20
    14dc:	b3 e0       	ldi	r27, 0x03	; 3
    14de:	0f d0       	rcall	.+30     	; 0x14fe <__ultoa_invert+0x86>
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0x5c>
    14e2:	f6 cf       	rjmp	.-20     	; 0x14d0 <__ultoa_invert+0x58>
    14e4:	46 2f       	mov	r20, r22
    14e6:	4f 70       	andi	r20, 0x0F	; 15
    14e8:	40 5d       	subi	r20, 0xD0	; 208
    14ea:	4a 33       	cpi	r20, 0x3A	; 58
    14ec:	18 f0       	brcs	.+6      	; 0x14f4 <__ultoa_invert+0x7c>
    14ee:	49 5d       	subi	r20, 0xD9	; 217
    14f0:	31 fd       	sbrc	r19, 1
    14f2:	40 52       	subi	r20, 0x20	; 32
    14f4:	41 93       	st	Z+, r20
    14f6:	02 d0       	rcall	.+4      	; 0x14fc <__ultoa_invert+0x84>
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__ultoa_invert+0x6c>
    14fa:	ea cf       	rjmp	.-44     	; 0x14d0 <__ultoa_invert+0x58>
    14fc:	b4 e0       	ldi	r27, 0x04	; 4
    14fe:	a6 95       	lsr	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	ba 95       	dec	r27
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__ultoa_invert+0x86>
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 05       	cpc	r22, r1
    1510:	71 05       	cpc	r23, r1
    1512:	08 95       	ret
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	0a 2e       	mov	r0, r26
    151a:	06 94       	lsr	r0
    151c:	57 95       	ror	r21
    151e:	47 95       	ror	r20
    1520:	37 95       	ror	r19
    1522:	27 95       	ror	r18
    1524:	ba 95       	dec	r27
    1526:	c9 f7       	brne	.-14     	; 0x151a <__ultoa_invert+0xa2>
    1528:	62 0f       	add	r22, r18
    152a:	73 1f       	adc	r23, r19
    152c:	84 1f       	adc	r24, r20
    152e:	95 1f       	adc	r25, r21
    1530:	a0 1d       	adc	r26, r0
    1532:	08 95       	ret

00001534 <__divmodsi4>:
    1534:	05 2e       	mov	r0, r21
    1536:	97 fb       	bst	r25, 7
    1538:	1e f4       	brtc	.+6      	; 0x1540 <__divmodsi4+0xc>
    153a:	00 94       	com	r0
    153c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__negsi2>
    1540:	57 fd       	sbrc	r21, 7
    1542:	07 d0       	rcall	.+14     	; 0x1552 <__divmodsi4_neg2>
    1544:	0e 94 03 0b 	call	0x1606	; 0x1606 <__udivmodsi4>
    1548:	07 fc       	sbrc	r0, 7
    154a:	03 d0       	rcall	.+6      	; 0x1552 <__divmodsi4_neg2>
    154c:	4e f4       	brtc	.+18     	; 0x1560 <__divmodsi4_exit>
    154e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__negsi2>

00001552 <__divmodsi4_neg2>:
    1552:	50 95       	com	r21
    1554:	40 95       	com	r20
    1556:	30 95       	com	r19
    1558:	21 95       	neg	r18
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	4f 4f       	sbci	r20, 0xFF	; 255
    155e:	5f 4f       	sbci	r21, 0xFF	; 255

00001560 <__divmodsi4_exit>:
    1560:	08 95       	ret

00001562 <__negsi2>:
    1562:	90 95       	com	r25
    1564:	80 95       	com	r24
    1566:	70 95       	com	r23
    1568:	61 95       	neg	r22
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	08 95       	ret

00001572 <__muluhisi3>:
    1572:	0e 94 25 0b 	call	0x164a	; 0x164a <__umulhisi3>
    1576:	a5 9f       	mul	r26, r21
    1578:	90 0d       	add	r25, r0
    157a:	b4 9f       	mul	r27, r20
    157c:	90 0d       	add	r25, r0
    157e:	a4 9f       	mul	r26, r20
    1580:	80 0d       	add	r24, r0
    1582:	91 1d       	adc	r25, r1
    1584:	11 24       	eor	r1, r1
    1586:	08 95       	ret

00001588 <__mulshisi3>:
    1588:	b7 ff       	sbrs	r27, 7
    158a:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__muluhisi3>

0000158e <__mulohisi3>:
    158e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__muluhisi3>
    1592:	82 1b       	sub	r24, r18
    1594:	93 0b       	sbc	r25, r19
    1596:	08 95       	ret

00001598 <__prologue_saves__>:
    1598:	2f 92       	push	r2
    159a:	3f 92       	push	r3
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	ca 1b       	sub	r28, r26
    15c2:	db 0b       	sbc	r29, r27
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	09 94       	ijmp

000015d0 <__epilogue_restores__>:
    15d0:	2a 88       	ldd	r2, Y+18	; 0x12
    15d2:	39 88       	ldd	r3, Y+17	; 0x11
    15d4:	48 88       	ldd	r4, Y+16	; 0x10
    15d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    15d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    15da:	7d 84       	ldd	r7, Y+13	; 0x0d
    15dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    15de:	9b 84       	ldd	r9, Y+11	; 0x0b
    15e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e2:	b9 84       	ldd	r11, Y+9	; 0x09
    15e4:	c8 84       	ldd	r12, Y+8	; 0x08
    15e6:	df 80       	ldd	r13, Y+7	; 0x07
    15e8:	ee 80       	ldd	r14, Y+6	; 0x06
    15ea:	fd 80       	ldd	r15, Y+5	; 0x05
    15ec:	0c 81       	ldd	r16, Y+4	; 0x04
    15ee:	1b 81       	ldd	r17, Y+3	; 0x03
    15f0:	aa 81       	ldd	r26, Y+2	; 0x02
    15f2:	b9 81       	ldd	r27, Y+1	; 0x01
    15f4:	ce 0f       	add	r28, r30
    15f6:	d1 1d       	adc	r29, r1
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	ed 01       	movw	r28, r26
    1604:	08 95       	ret

00001606 <__udivmodsi4>:
    1606:	a1 e2       	ldi	r26, 0x21	; 33
    1608:	1a 2e       	mov	r1, r26
    160a:	aa 1b       	sub	r26, r26
    160c:	bb 1b       	sub	r27, r27
    160e:	fd 01       	movw	r30, r26
    1610:	0d c0       	rjmp	.+26     	; 0x162c <__udivmodsi4_ep>

00001612 <__udivmodsi4_loop>:
    1612:	aa 1f       	adc	r26, r26
    1614:	bb 1f       	adc	r27, r27
    1616:	ee 1f       	adc	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	a2 17       	cp	r26, r18
    161c:	b3 07       	cpc	r27, r19
    161e:	e4 07       	cpc	r30, r20
    1620:	f5 07       	cpc	r31, r21
    1622:	20 f0       	brcs	.+8      	; 0x162c <__udivmodsi4_ep>
    1624:	a2 1b       	sub	r26, r18
    1626:	b3 0b       	sbc	r27, r19
    1628:	e4 0b       	sbc	r30, r20
    162a:	f5 0b       	sbc	r31, r21

0000162c <__udivmodsi4_ep>:
    162c:	66 1f       	adc	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	88 1f       	adc	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	1a 94       	dec	r1
    1636:	69 f7       	brne	.-38     	; 0x1612 <__udivmodsi4_loop>
    1638:	60 95       	com	r22
    163a:	70 95       	com	r23
    163c:	80 95       	com	r24
    163e:	90 95       	com	r25
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	bd 01       	movw	r22, r26
    1646:	cf 01       	movw	r24, r30
    1648:	08 95       	ret

0000164a <__umulhisi3>:
    164a:	a2 9f       	mul	r26, r18
    164c:	b0 01       	movw	r22, r0
    164e:	b3 9f       	mul	r27, r19
    1650:	c0 01       	movw	r24, r0
    1652:	a3 9f       	mul	r26, r19
    1654:	70 0d       	add	r23, r0
    1656:	81 1d       	adc	r24, r1
    1658:	11 24       	eor	r1, r1
    165a:	91 1d       	adc	r25, r1
    165c:	b2 9f       	mul	r27, r18
    165e:	70 0d       	add	r23, r0
    1660:	81 1d       	adc	r24, r1
    1662:	11 24       	eor	r1, r1
    1664:	91 1d       	adc	r25, r1
    1666:	08 95       	ret

00001668 <_exit>:
    1668:	f8 94       	cli

0000166a <__stop_program>:
    166a:	ff cf       	rjmp	.-2      	; 0x166a <__stop_program>
