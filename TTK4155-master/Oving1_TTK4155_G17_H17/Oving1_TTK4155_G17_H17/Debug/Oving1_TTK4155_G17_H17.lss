
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  0000167e  00001712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080034a  0080034a  0000195c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bbd  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000561  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e7  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e2  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af6  00000000  00000000  000037da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000042d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_1>
       8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e7       	ldi	r30, 0x7E	; 126
      84:	f6 e1       	ldi	r31, 0x16	; 22
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 34       	cpi	r26, 0x4A	; 74
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	aa e4       	ldi	r26, 0x4A	; 74
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 36       	cpi	r26, 0x60	; 96
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c2 03 	call	0x784	; 0x784 <main>
      a6:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
      ae:	82 30       	cpi	r24, 0x02	; 2
      b0:	91 05       	cpc	r25, r1
      b2:	71 f0       	breq	.+28     	; 0xd0 <readADC+0x22>
      b4:	1c f4       	brge	.+6      	; 0xbc <readADC+0xe>
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	39 f0       	breq	.+14     	; 0xc8 <readADC+0x1a>
      ba:	1c c0       	rjmp	.+56     	; 0xf4 <readADC+0x46>
      bc:	83 30       	cpi	r24, 0x03	; 3
      be:	91 05       	cpc	r25, r1
      c0:	59 f0       	breq	.+22     	; 0xd8 <readADC+0x2a>
      c2:	04 97       	sbiw	r24, 0x04	; 4
      c4:	69 f0       	breq	.+26     	; 0xe0 <readADC+0x32>
      c6:	16 c0       	rjmp	.+44     	; 0xf4 <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
      c8:	84 e1       	ldi	r24, 0x14	; 20
      ca:	80 93 00 14 	sts	0x1400, r24
      ce:	0b c0       	rjmp	.+22     	; 0xe6 <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
      d0:	85 e1       	ldi	r24, 0x15	; 21
      d2:	80 93 00 14 	sts	0x1400, r24
      d6:	07 c0       	rjmp	.+14     	; 0xe6 <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
      d8:	86 e1       	ldi	r24, 0x16	; 22
      da:	80 93 00 14 	sts	0x1400, r24
      de:	03 c0       	rjmp	.+6      	; 0xe6 <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
      e0:	87 e1       	ldi	r24, 0x17	; 23
      e2:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	82 e5       	ldi	r24, 0x52	; 82
      e8:	8a 95       	dec	r24
      ea:	f1 f7       	brne	.-4      	; 0xe8 <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
      ec:	80 91 00 14 	lds	r24, 0x1400
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
      f8:	08 95       	ret

000000fa <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	c4 e6       	ldi	r28, 0x64	; 100
     104:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     106:	00 91 54 03 	lds	r16, 0x0354
     10a:	10 91 55 03 	lds	r17, 0x0355
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     116:	01 58       	subi	r16, 0x81	; 129
     118:	1f 4f       	sbci	r17, 0xFF	; 255
     11a:	08 1b       	sub	r16, r24
     11c:	19 0b       	sbc	r17, r25
     11e:	10 93 55 03 	sts	0x0355, r17
     122:	00 93 54 03 	sts	0x0354, r16
		calibrate_y += 127 - readADC(2);
     126:	00 91 52 03 	lds	r16, 0x0352
     12a:	10 91 53 03 	lds	r17, 0x0353
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     136:	01 58       	subi	r16, 0x81	; 129
     138:	1f 4f       	sbci	r17, 0xFF	; 255
     13a:	08 1b       	sub	r16, r24
     13c:	19 0b       	sbc	r17, r25
     13e:	10 93 53 03 	sts	0x0353, r17
     142:	00 93 52 03 	sts	0x0352, r16
     146:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     148:	20 97       	sbiw	r28, 0x00	; 0
     14a:	e9 f6       	brne	.-70     	; 0x106 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     14c:	80 91 54 03 	lds	r24, 0x0354
     150:	90 91 55 03 	lds	r25, 0x0355
     154:	24 e6       	ldi	r18, 0x64	; 100
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	b9 01       	movw	r22, r18
     15a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divmodhi4>
     15e:	70 93 55 03 	sts	0x0355, r23
     162:	60 93 54 03 	sts	0x0354, r22
	calibrate_y /= CALIBRATE_READINGS;
     166:	80 91 52 03 	lds	r24, 0x0352
     16a:	90 91 53 03 	lds	r25, 0x0353
     16e:	b9 01       	movw	r22, r18
     170:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divmodhi4>
     174:	70 93 53 03 	sts	0x0353, r23
     178:	60 93 52 03 	sts	0x0352, r22
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	08 95       	ret

00000186 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int referance, int step){
     186:	2f 92       	push	r2
     188:	3f 92       	push	r3
     18a:	4f 92       	push	r4
     18c:	5f 92       	push	r5
     18e:	6f 92       	push	r6
     190:	7f 92       	push	r7
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <signal_to_range+0x26>
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <signal_to_range+0x28>
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <signal_to_range+0x2a>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	3c 01       	movw	r6, r24
     1b6:	7a 83       	std	Y+2, r23	; 0x02
     1b8:	69 83       	std	Y+1, r22	; 0x01
     1ba:	5c 83       	std	Y+4, r21	; 0x04
     1bc:	4b 83       	std	Y+3, r20	; 0x03
     1be:	3e 83       	std	Y+6, r19	; 0x06
     1c0:	2d 83       	std	Y+5, r18	; 0x05
     1c2:	18 01       	movw	r2, r16
     1c4:	85 01       	movw	r16, r10
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     1c6:	b9 01       	movw	r22, r18
     1c8:	88 27       	eor	r24, r24
     1ca:	77 fd       	sbrc	r23, 7
     1cc:	80 95       	com	r24
     1ce:	98 2f       	mov	r25, r24
     1d0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatsisf>
     1d4:	4b 01       	movw	r8, r22
     1d6:	5c 01       	movw	r10, r24
     1d8:	b3 01       	movw	r22, r6
     1da:	6e 0d       	add	r22, r14
     1dc:	7f 1d       	adc	r23, r15
     1de:	29 81       	ldd	r18, Y+1	; 0x01
     1e0:	3a 81       	ldd	r19, Y+2	; 0x02
     1e2:	62 1b       	sub	r22, r18
     1e4:	73 0b       	sbc	r23, r19
     1e6:	88 27       	eor	r24, r24
     1e8:	77 fd       	sbrc	r23, 7
     1ea:	80 95       	com	r24
     1ec:	98 2f       	mov	r25, r24
     1ee:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatsisf>
     1f2:	2b 01       	movw	r4, r22
     1f4:	3c 01       	movw	r6, r24
     1f6:	b1 01       	movw	r22, r2
     1f8:	8d 81       	ldd	r24, Y+5	; 0x05
     1fa:	9e 81       	ldd	r25, Y+6	; 0x06
     1fc:	68 1b       	sub	r22, r24
     1fe:	79 0b       	sbc	r23, r25
     200:	88 27       	eor	r24, r24
     202:	77 fd       	sbrc	r23, 7
     204:	80 95       	com	r24
     206:	98 2f       	mov	r25, r24
     208:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatsisf>
     20c:	9b 01       	movw	r18, r22
     20e:	ac 01       	movw	r20, r24
     210:	c3 01       	movw	r24, r6
     212:	b2 01       	movw	r22, r4
     214:	0e 94 65 05 	call	0xaca	; 0xaca <__mulsf3>
     218:	2b 01       	movw	r4, r22
     21a:	3c 01       	movw	r6, r24
     21c:	6b 81       	ldd	r22, Y+3	; 0x03
     21e:	7c 81       	ldd	r23, Y+4	; 0x04
     220:	e9 81       	ldd	r30, Y+1	; 0x01
     222:	fa 81       	ldd	r31, Y+2	; 0x02
     224:	6e 1b       	sub	r22, r30
     226:	7f 0b       	sbc	r23, r31
     228:	88 27       	eor	r24, r24
     22a:	77 fd       	sbrc	r23, 7
     22c:	80 95       	com	r24
     22e:	98 2f       	mov	r25, r24
     230:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatsisf>
     234:	9b 01       	movw	r18, r22
     236:	ac 01       	movw	r20, r24
     238:	c3 01       	movw	r24, r6
     23a:	b2 01       	movw	r22, r4
     23c:	0e 94 3e 04 	call	0x87c	; 0x87c <__divsf3>
     240:	9b 01       	movw	r18, r22
     242:	ac 01       	movw	r20, r24
     244:	c5 01       	movw	r24, r10
     246:	b4 01       	movw	r22, r8
     248:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__addsf3>
     24c:	0e 94 a6 04 	call	0x94c	; 0x94c <__fixsfsi>
	
		
	if (new_signal >= output_max - step){
     250:	c1 01       	movw	r24, r2
     252:	80 1b       	sub	r24, r16
     254:	91 0b       	sbc	r25, r17
     256:	68 17       	cp	r22, r24
     258:	79 07       	cpc	r23, r25
     25a:	74 f5       	brge	.+92     	; 0x2b8 <signal_to_range+0x132>
		referance = output_max;
	}else if(new_signal <= output_min + step){
     25c:	8d 81       	ldd	r24, Y+5	; 0x05
     25e:	9e 81       	ldd	r25, Y+6	; 0x06
     260:	80 0f       	add	r24, r16
     262:	91 1f       	adc	r25, r17
     264:	86 17       	cp	r24, r22
     266:	97 07       	cpc	r25, r23
     268:	4c f5       	brge	.+82     	; 0x2bc <signal_to_range+0x136>
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
			if((new_signal >= referance + step/2)){
     26a:	f8 01       	movw	r30, r16
     26c:	11 23       	and	r17, r17
     26e:	0c f4       	brge	.+2      	; 0x272 <signal_to_range+0xec>
     270:	31 96       	adiw	r30, 0x01	; 1
     272:	f5 95       	asr	r31
     274:	e7 95       	ror	r30
     276:	d8 01       	movw	r26, r16
     278:	12 c0       	rjmp	.+36     	; 0x29e <signal_to_range+0x118>
     27a:	8a 0f       	add	r24, r26
     27c:	9b 1f       	adc	r25, r27
     27e:	ac 01       	movw	r20, r24
     280:	4e 0f       	add	r20, r30
     282:	5f 1f       	adc	r21, r31
     284:	64 17       	cp	r22, r20
     286:	75 07       	cpc	r23, r21
     288:	14 f0       	brlt	.+4      	; 0x28e <signal_to_range+0x108>
				referance += step;
     28a:	69 01       	movw	r12, r18
     28c:	0b c0       	rjmp	.+22     	; 0x2a4 <signal_to_range+0x11e>
			}
			else if (new_signal <= referance - step/2){
     28e:	c6 01       	movw	r24, r12
     290:	8e 1b       	sub	r24, r30
     292:	9f 0b       	sbc	r25, r31
     294:	86 17       	cp	r24, r22
     296:	97 07       	cpc	r25, r23
     298:	14 f0       	brlt	.+4      	; 0x29e <signal_to_range+0x118>
				referance -= step;
     29a:	c0 1a       	sub	r12, r16
     29c:	d1 0a       	sbc	r13, r17
     29e:	c6 01       	movw	r24, r12
     2a0:	80 1b       	sub	r24, r16
     2a2:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		referance = output_max;
	}else if(new_signal <= output_min + step){
		referance = output_min;
	}else{
		while (!(((new_signal < referance + step) && (new_signal > referance - step)))){
     2a4:	96 01       	movw	r18, r12
     2a6:	20 0f       	add	r18, r16
     2a8:	31 1f       	adc	r19, r17
     2aa:	62 17       	cp	r22, r18
     2ac:	73 07       	cpc	r23, r19
     2ae:	2c f7       	brge	.-54     	; 0x27a <signal_to_range+0xf4>
     2b0:	86 17       	cp	r24, r22
     2b2:	97 07       	cpc	r25, r23
     2b4:	14 f7       	brge	.-60     	; 0x27a <signal_to_range+0xf4>
     2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <signal_to_range+0x13a>
	
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	if (new_signal >= output_max - step){
		referance = output_max;
     2b8:	61 01       	movw	r12, r2
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		referance = output_min;
     2bc:	cd 80       	ldd	r12, Y+5	; 0x05
     2be:	de 80       	ldd	r13, Y+6	; 0x06
			 
		}
	}
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, referance);
	return referance;
}
     2c0:	c6 01       	movw	r24, r12
     2c2:	26 96       	adiw	r28, 0x06	; 6
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	bf 90       	pop	r11
     2e0:	af 90       	pop	r10
     2e2:	9f 90       	pop	r9
     2e4:	8f 90       	pop	r8
     2e6:	7f 90       	pop	r7
     2e8:	6f 90       	pop	r6
     2ea:	5f 90       	pop	r5
     2ec:	4f 90       	pop	r4
     2ee:	3f 90       	pop	r3
     2f0:	2f 90       	pop	r2
     2f2:	08 95       	ret

000002f4 <read_control_input>:
	}
	calibrate_x /= CALIBRATE_READINGS;
	calibrate_y /= CALIBRATE_READINGS;
}

int read_control_input(char channel){
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
	switch(channel){
     304:	82 35       	cpi	r24, 0x52	; 82
     306:	09 f4       	brne	.+2      	; 0x30a <read_control_input+0x16>
     308:	74 c0       	rjmp	.+232    	; 0x3f2 <read_control_input+0xfe>
     30a:	20 f4       	brcc	.+8      	; 0x314 <read_control_input+0x20>
     30c:	8c 34       	cpi	r24, 0x4C	; 76
     30e:	09 f4       	brne	.+2      	; 0x312 <read_control_input+0x1e>
     310:	4e c0       	rjmp	.+156    	; 0x3ae <read_control_input+0xba>
     312:	91 c0       	rjmp	.+290    	; 0x436 <read_control_input+0x142>
     314:	88 35       	cpi	r24, 0x58	; 88
     316:	19 f0       	breq	.+6      	; 0x31e <read_control_input+0x2a>
     318:	89 35       	cpi	r24, 0x59	; 89
     31a:	29 f1       	breq	.+74     	; 0x366 <read_control_input+0x72>
     31c:	8c c0       	rjmp	.+280    	; 0x436 <read_control_input+0x142>
		case 'X': 
			ref_X = signal_to_range(readADC(1), 0, 255, -100, 100, calibrate_x, ref_X, 10); 
     31e:	c0 90 50 03 	lds	r12, 0x0350
     322:	d0 90 51 03 	lds	r13, 0x0351
     326:	e0 90 54 03 	lds	r14, 0x0354
     32a:	f0 90 55 03 	lds	r15, 0x0355
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     336:	0f 2e       	mov	r0, r31
     338:	fa e0       	ldi	r31, 0x0A	; 10
     33a:	af 2e       	mov	r10, r31
     33c:	b1 2c       	mov	r11, r1
     33e:	f0 2d       	mov	r31, r0
     340:	04 e6       	ldi	r16, 0x64	; 100
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	2c e9       	ldi	r18, 0x9C	; 156
     346:	3f ef       	ldi	r19, 0xFF	; 255
     348:	4f ef       	ldi	r20, 0xFF	; 255
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	0e 94 c3 00 	call	0x186	; 0x186 <signal_to_range>
     354:	90 93 51 03 	sts	0x0351, r25
     358:	80 93 50 03 	sts	0x0350, r24
			return ref_X;
     35c:	80 91 50 03 	lds	r24, 0x0350
     360:	90 91 51 03 	lds	r25, 0x0351
     364:	6a c0       	rjmp	.+212    	; 0x43a <read_control_input+0x146>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), 0, 255, -100, 100, calibrate_y, ref_Y, 10);
     366:	c0 90 4e 03 	lds	r12, 0x034E
     36a:	d0 90 4f 03 	lds	r13, 0x034F
     36e:	e0 90 52 03 	lds	r14, 0x0352
     372:	f0 90 53 03 	lds	r15, 0x0353
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     37e:	0f 2e       	mov	r0, r31
     380:	fa e0       	ldi	r31, 0x0A	; 10
     382:	af 2e       	mov	r10, r31
     384:	b1 2c       	mov	r11, r1
     386:	f0 2d       	mov	r31, r0
     388:	04 e6       	ldi	r16, 0x64	; 100
     38a:	10 e0       	ldi	r17, 0x00	; 0
     38c:	2c e9       	ldi	r18, 0x9C	; 156
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	4f ef       	ldi	r20, 0xFF	; 255
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	0e 94 c3 00 	call	0x186	; 0x186 <signal_to_range>
     39c:	90 93 4f 03 	sts	0x034F, r25
     3a0:	80 93 4e 03 	sts	0x034E, r24
			return ref_Y;
     3a4:	80 91 4e 03 	lds	r24, 0x034E
     3a8:	90 91 4f 03 	lds	r25, 0x034F
     3ac:	46 c0       	rjmp	.+140    	; 0x43a <read_control_input+0x146>
		case 'L':
		ref_L = signal_to_range(readADC(3), 0, 255, 0, 100, 0, ref_L, 10);
     3ae:	c0 90 4c 03 	lds	r12, 0x034C
     3b2:	d0 90 4d 03 	lds	r13, 0x034D
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     3be:	0f 2e       	mov	r0, r31
     3c0:	fa e0       	ldi	r31, 0x0A	; 10
     3c2:	af 2e       	mov	r10, r31
     3c4:	b1 2c       	mov	r11, r1
     3c6:	f0 2d       	mov	r31, r0
     3c8:	e1 2c       	mov	r14, r1
     3ca:	f1 2c       	mov	r15, r1
     3cc:	04 e6       	ldi	r16, 0x64	; 100
     3ce:	10 e0       	ldi	r17, 0x00	; 0
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4f ef       	ldi	r20, 0xFF	; 255
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 c3 00 	call	0x186	; 0x186 <signal_to_range>
     3e0:	90 93 4d 03 	sts	0x034D, r25
     3e4:	80 93 4c 03 	sts	0x034C, r24
		return ref_L;
     3e8:	80 91 4c 03 	lds	r24, 0x034C
     3ec:	90 91 4d 03 	lds	r25, 0x034D
     3f0:	24 c0       	rjmp	.+72     	; 0x43a <read_control_input+0x146>
		case 'R': 
			ref_R = signal_to_range(readADC(4), 0, 255, 0, 100, 0, ref_R, 10);
     3f2:	c0 90 4a 03 	lds	r12, 0x034A
     3f6:	d0 90 4b 03 	lds	r13, 0x034B
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 57 00 	call	0xae	; 0xae <readADC>
     402:	0f 2e       	mov	r0, r31
     404:	fa e0       	ldi	r31, 0x0A	; 10
     406:	af 2e       	mov	r10, r31
     408:	b1 2c       	mov	r11, r1
     40a:	f0 2d       	mov	r31, r0
     40c:	e1 2c       	mov	r14, r1
     40e:	f1 2c       	mov	r15, r1
     410:	04 e6       	ldi	r16, 0x64	; 100
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	4f ef       	ldi	r20, 0xFF	; 255
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0e 94 c3 00 	call	0x186	; 0x186 <signal_to_range>
     424:	90 93 4b 03 	sts	0x034B, r25
     428:	80 93 4a 03 	sts	0x034A, r24
			return ref_R;
     42c:	80 91 4a 03 	lds	r24, 0x034A
     430:	90 91 4b 03 	lds	r25, 0x034B
     434:	02 c0       	rjmp	.+4      	; 0x43a <read_control_input+0x146>
	}
	return 0;
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
}
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	08 95       	ret

0000044c <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     44c:	0e 94 7d 00 	call	0xfa	; 0xfa <calibrate_joystick>
	ref_X = read_control_input('X');
     450:	88 e5       	ldi	r24, 0x58	; 88
     452:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     456:	90 93 51 03 	sts	0x0351, r25
     45a:	80 93 50 03 	sts	0x0350, r24
	ref_Y = read_control_input('Y');
     45e:	89 e5       	ldi	r24, 0x59	; 89
     460:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     464:	90 93 4f 03 	sts	0x034F, r25
     468:	80 93 4e 03 	sts	0x034E, r24
	ref_L = read_control_input('L');
     46c:	8c e4       	ldi	r24, 0x4C	; 76
     46e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     472:	90 93 4d 03 	sts	0x034D, r25
     476:	80 93 4c 03 	sts	0x034C, r24
	ref_R = read_control_input('R');
     47a:	82 e5       	ldi	r24, 0x52	; 82
     47c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     480:	90 93 4b 03 	sts	0x034B, r25
     484:	80 93 4a 03 	sts	0x034A, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     488:	20 91 52 03 	lds	r18, 0x0352
     48c:	30 91 53 03 	lds	r19, 0x0353
     490:	80 91 54 03 	lds	r24, 0x0354
     494:	90 91 55 03 	lds	r25, 0x0355
     498:	3f 93       	push	r19
     49a:	2f 93       	push	r18
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	8a e0       	ldi	r24, 0x0A	; 10
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     4ac:	60 91 4a 03 	lds	r22, 0x034A
     4b0:	70 91 4b 03 	lds	r23, 0x034B
     4b4:	40 91 4c 03 	lds	r20, 0x034C
     4b8:	50 91 4d 03 	lds	r21, 0x034D
     4bc:	20 91 4e 03 	lds	r18, 0x034E
     4c0:	30 91 4f 03 	lds	r19, 0x034F
     4c4:	80 91 50 03 	lds	r24, 0x0350
     4c8:	90 91 51 03 	lds	r25, 0x0351
     4cc:	7f 93       	push	r23
     4ce:	6f 93       	push	r22
     4d0:	5f 93       	push	r21
     4d2:	4f 93       	push	r20
     4d4:	3f 93       	push	r19
     4d6:	2f 93       	push	r18
     4d8:	9f 93       	push	r25
     4da:	8f 93       	push	r24
     4dc:	83 e3       	ldi	r24, 0x33	; 51
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
     4e8:	8d b7       	in	r24, 0x3d	; 61
     4ea:	9e b7       	in	r25, 0x3e	; 62
     4ec:	40 96       	adiw	r24, 0x10	; 16
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	9e bf       	out	0x3e, r25	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	8d bf       	out	0x3d, r24	; 61
     4f8:	08 95       	ret

000004fa <initalize_interrupts>:
	//testUart();
	
}

void initalize_interrupts(){
	BIT_ON(DDRB, PD2);
     4fa:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     4fc:	bb 9a       	sbi	0x17, 3	; 23
	BIT_ON(PORTB, PD2);
     4fe:	c2 9a       	sbi	0x18, 2	; 24
	BIT_ON(PORTB, PD3);
     500:	c3 9a       	sbi	0x18, 3	; 24
	
	BIT_ON(MCUCR, ISC00);
     502:	85 b7       	in	r24, 0x35	; 53
     504:	81 60       	ori	r24, 0x01	; 1
     506:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	82 60       	ori	r24, 0x02	; 2
     50c:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC10);
     50e:	85 b7       	in	r24, 0x35	; 53
     510:	84 60       	ori	r24, 0x04	; 4
     512:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     514:	85 b7       	in	r24, 0x35	; 53
     516:	88 60       	ori	r24, 0x08	; 8
     518:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);
     51a:	8b b7       	in	r24, 0x3b	; 59
     51c:	80 64       	ori	r24, 0x40	; 64
     51e:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     520:	8b b7       	in	r24, 0x3b	; 59
     522:	80 68       	ori	r24, 0x80	; 128
     524:	8b bf       	out	0x3b, r24	; 59
	sei();
     526:	78 94       	sei
     528:	08 95       	ret

0000052a <__vector_1>:
}




ISR(INT0_vect){//interrupt button Right
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	printf("Right button pressed, printing values:\t\t");
     558:	8c e5       	ldi	r24, 0x5C	; 92
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
	printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));
     564:	82 e5       	ldi	r24, 0x52	; 82
     566:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     56a:	f8 2e       	mov	r15, r24
     56c:	e9 2e       	mov	r14, r25
     56e:	8c e4       	ldi	r24, 0x4C	; 76
     570:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     574:	18 2f       	mov	r17, r24
     576:	09 2f       	mov	r16, r25
     578:	89 e5       	ldi	r24, 0x59	; 89
     57a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     57e:	c8 2f       	mov	r28, r24
     580:	d9 2f       	mov	r29, r25
     582:	88 e5       	ldi	r24, 0x58	; 88
     584:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_control_input>
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	df 93       	push	r29
     592:	cf 93       	push	r28
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	85 e8       	ldi	r24, 0x85	; 133
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
     5a4:	8d b7       	in	r24, 0x3d	; 61
     5a6:	9e b7       	in	r25, 0x3e	; 62
     5a8:	0c 96       	adiw	r24, 0x0c	; 12
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	9e bf       	out	0x3e, r25	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	8d bf       	out	0x3d, r24	; 61
	
}
     5b4:	ff 91       	pop	r31
     5b6:	ef 91       	pop	r30
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	printf("L");
     604:	8c e4       	ldi	r24, 0x4C	; 76
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 ad 06 	call	0xd5a	; 0xd5a <putchar>
	
}
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	bf 91       	pop	r27
     612:	af 91       	pop	r26
     614:	9f 91       	pop	r25
     616:	8f 91       	pop	r24
     618:	7f 91       	pop	r23
     61a:	6f 91       	pop	r22
     61c:	5f 91       	pop	r21
     61e:	4f 91       	pop	r20
     620:	3f 91       	pop	r19
     622:	2f 91       	pop	r18
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <SRAM_test>:
	printf("\nINITIALIZATION COMPLETE\n");
}

#include <stdlib.h>
void SRAM_test(void)
{
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
     63e:	8e e9       	ldi	r24, 0x9E	; 158
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     646:	0e 94 3e 06 	call	0xc7c	; 0xc7c <rand>
     64a:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     64c:	0e 94 43 06 	call	0xc86	; 0xc86 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     650:	c0 e0       	ldi	r28, 0x00	; 0
     652:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdlib.h>
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     654:	00 e0       	ldi	r16, 0x00	; 0
     656:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     658:	0f 2e       	mov	r0, r31
     65a:	f4 eb       	ldi	r31, 0xB4	; 180
     65c:	ef 2e       	mov	r14, r31
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	ff 2e       	mov	r15, r31
     662:	f0 2d       	mov	r31, r0
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     664:	0e 94 3e 06 	call	0xc7c	; 0xc7c <rand>
     668:	fe 01       	movw	r30, r28
     66a:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     66c:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     66e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     670:	28 17       	cp	r18, r24
     672:	a9 f0       	breq	.+42     	; 0x69e <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
     674:	99 27       	eor	r25, r25
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	1f 92       	push	r1
     67c:	2f 93       	push	r18
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	ff 92       	push	r15
     684:	ef 92       	push	r14
     686:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
			write_errors++;
     68a:	0f 5f       	subi	r16, 0xFF	; 255
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	8d b7       	in	r24, 0x3d	; 61
     690:	9e b7       	in	r25, 0x3e	; 62
     692:	08 96       	adiw	r24, 0x08	; 8
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	9e bf       	out	0x3e, r25	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     69e:	21 96       	adiw	r28, 0x01	; 1
     6a0:	c1 15       	cp	r28, r1
     6a2:	98 e0       	ldi	r25, 0x08	; 8
     6a4:	d9 07       	cpc	r29, r25
     6a6:	f1 f6       	brne	.-68     	; 0x664 <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i,	retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
     6a8:	c6 01       	movw	r24, r12
     6aa:	0e 94 43 06 	call	0xc86	; 0xc86 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6ae:	c0 e0       	ldi	r28, 0x00	; 0
     6b0:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     6b2:	e1 2c       	mov	r14, r1
     6b4:	f1 2c       	mov	r15, r1
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6b6:	0f 2e       	mov	r0, r31
     6b8:	fd ee       	ldi	r31, 0xED	; 237
     6ba:	cf 2e       	mov	r12, r31
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	df 2e       	mov	r13, r31
     6c0:	f0 2d       	mov	r31, r0
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     6c2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <rand>
     6c6:	fe 01       	movw	r30, r28
     6c8:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     6ca:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     6cc:	28 17       	cp	r18, r24
     6ce:	b1 f0       	breq	.+44     	; 0x6fc <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
     6d0:	99 27       	eor	r25, r25
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	1f 92       	push	r1
     6d8:	2f 93       	push	r18
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	df 92       	push	r13
     6e0:	cf 92       	push	r12
     6e2:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
			retrieval_errors++;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	e8 1a       	sub	r14, r24
     6ea:	f8 0a       	sbc	r15, r24
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	08 96       	adiw	r24, 0x08	; 8
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	9e bf       	out	0x3e, r25	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the writephase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6fc:	21 96       	adiw	r28, 0x01	; 1
     6fe:	c1 15       	cp	r28, r1
     700:	98 e0       	ldi	r25, 0x08	; 8
     702:	d9 07       	cpc	r29, r25
     704:	f1 f6       	brne	.-68     	; 0x6c2 <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n",i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors	in retrieval phase\n\n", write_errors, retrieval_errors);
     706:	ff 92       	push	r15
     708:	ef 92       	push	r14
     70a:	1f 93       	push	r17
     70c:	0f 93       	push	r16
     70e:	8a e2       	ldi	r24, 0x2A	; 42
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 99 06 	call	0xd32	; 0xd32 <printf>
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	08 95       	ret

00000738 <initalize>:
}


void initalize(void){
	
	init_UART(UBBR);
     738:	8f e1       	ldi	r24, 0x1F	; 31
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 ce 03 	call	0x79c	; 0x79c <init_UART>
	printf("INITIALIZING...\n\nUART successfully initialized\n\n");
     740:	81 e8       	ldi	r24, 0x81	; 129
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     748:	85 b7       	in	r24, 0x35	; 53
     74a:	80 68       	ori	r24, 0x80	; 128
     74c:	85 bf       	out	0x35, r24	; 53
	initialize_control_input();
     74e:	0e 94 26 02 	call	0x44c	; 0x44c <initialize_control_input>
	printf("controll input successfully initialized\n\n");
     752:	81 eb       	ldi	r24, 0xB1	; 177
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	SRAM_test();
     75a:	0e 94 17 03 	call	0x62e	; 0x62e <SRAM_test>
	printf("SRAM successfully initialized\n");
     75e:	8a ed       	ldi	r24, 0xDA	; 218
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	initalize_interrupts();
     766:	0e 94 7d 02 	call	0x4fa	; 0x4fa <initalize_interrupts>
	printf("Interrupts successfully initialized\n");
     76a:	88 ef       	ldi	r24, 0xF8	; 248
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	printf("Interrupts activated\n");
     772:	8c e1       	ldi	r24, 0x1C	; 28
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
	printf("\nINITIALIZATION COMPLETE\n");
     77a:	81 e3       	ldi	r24, 0x31	; 49
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 b4 06 	call	0xd68	; 0xd68 <puts>
     782:	08 95       	ret

00000784 <main>:
void initalize(void);
void initalize_interrupts();
int main(void)
{
	
	initalize();	
     784:	0e 94 9c 03 	call	0x738	; 0x738 <initalize>
     788:	ff cf       	rjmp	.-2      	; 0x788 <main+0x4>

0000078a <send_UART>:
 */ 
#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );
     78a:	5d 9b       	sbis	0x0b, 5	; 11
     78c:	fe cf       	rjmp	.-4      	; 0x78a <send_UART>
	UDR0 = letter;
     78e:	8c b9       	out	0x0c, r24	; 12
     790:	08 95       	ret

00000792 <recieve_UART>:
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
}

unsigned int recieve_UART(void){
	while (!(UCSR0A & (1 << RXC0)));
     792:	5f 9b       	sbis	0x0b, 7	; 11
     794:	fe cf       	rjmp	.-4      	; 0x792 <recieve_UART>
	return UDR0;
     796:	8c b1       	in	r24, 0x0c	; 12
}
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	08 95       	ret

0000079c <init_UART>:
	UDR0 = letter;
}

void init_UART(unsigned int ubrr){
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     79c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     79e:	89 b9       	out	0x09, r24	; 9
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7a0:	88 e1       	ldi	r24, 0x18	; 24
     7a2:	8a b9       	out	0x0a, r24	; 10
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
     7a4:	69 ec       	ldi	r22, 0xC9	; 201
     7a6:	73 e0       	ldi	r23, 0x03	; 3
     7a8:	85 ec       	ldi	r24, 0xC5	; 197
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 4e 06 	call	0xc9c	; 0xc9c <fdevopen>
     7b0:	08 95       	ret

000007b2 <__subsf3>:
     7b2:	50 58       	subi	r21, 0x80	; 128

000007b4 <__addsf3>:
     7b4:	bb 27       	eor	r27, r27
     7b6:	aa 27       	eor	r26, r26
     7b8:	0e d0       	rcall	.+28     	; 0x7d6 <__addsf3x>
     7ba:	4d c1       	rjmp	.+666    	; 0xa56 <__fp_round>
     7bc:	3e d1       	rcall	.+636    	; 0xa3a <__fp_pscA>
     7be:	30 f0       	brcs	.+12     	; 0x7cc <__addsf3+0x18>
     7c0:	43 d1       	rcall	.+646    	; 0xa48 <__fp_pscB>
     7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3+0x18>
     7c4:	31 f4       	brne	.+12     	; 0x7d2 <__addsf3+0x1e>
     7c6:	9f 3f       	cpi	r25, 0xFF	; 255
     7c8:	11 f4       	brne	.+4      	; 0x7ce <__addsf3+0x1a>
     7ca:	1e f4       	brtc	.+6      	; 0x7d2 <__addsf3+0x1e>
     7cc:	33 c1       	rjmp	.+614    	; 0xa34 <__fp_nan>
     7ce:	0e f4       	brtc	.+2      	; 0x7d2 <__addsf3+0x1e>
     7d0:	e0 95       	com	r30
     7d2:	e7 fb       	bst	r30, 7
     7d4:	29 c1       	rjmp	.+594    	; 0xa28 <__fp_inf>

000007d6 <__addsf3x>:
     7d6:	e9 2f       	mov	r30, r25
     7d8:	4f d1       	rcall	.+670    	; 0xa78 <__fp_split3>
     7da:	80 f3       	brcs	.-32     	; 0x7bc <__addsf3+0x8>
     7dc:	ba 17       	cp	r27, r26
     7de:	62 07       	cpc	r22, r18
     7e0:	73 07       	cpc	r23, r19
     7e2:	84 07       	cpc	r24, r20
     7e4:	95 07       	cpc	r25, r21
     7e6:	18 f0       	brcs	.+6      	; 0x7ee <__addsf3x+0x18>
     7e8:	71 f4       	brne	.+28     	; 0x806 <__addsf3x+0x30>
     7ea:	9e f5       	brtc	.+102    	; 0x852 <__addsf3x+0x7c>
     7ec:	67 c1       	rjmp	.+718    	; 0xabc <__fp_zero>
     7ee:	0e f4       	brtc	.+2      	; 0x7f2 <__addsf3x+0x1c>
     7f0:	e0 95       	com	r30
     7f2:	0b 2e       	mov	r0, r27
     7f4:	ba 2f       	mov	r27, r26
     7f6:	a0 2d       	mov	r26, r0
     7f8:	0b 01       	movw	r0, r22
     7fa:	b9 01       	movw	r22, r18
     7fc:	90 01       	movw	r18, r0
     7fe:	0c 01       	movw	r0, r24
     800:	ca 01       	movw	r24, r20
     802:	a0 01       	movw	r20, r0
     804:	11 24       	eor	r1, r1
     806:	ff 27       	eor	r31, r31
     808:	59 1b       	sub	r21, r25
     80a:	99 f0       	breq	.+38     	; 0x832 <__addsf3x+0x5c>
     80c:	59 3f       	cpi	r21, 0xF9	; 249
     80e:	50 f4       	brcc	.+20     	; 0x824 <__addsf3x+0x4e>
     810:	50 3e       	cpi	r21, 0xE0	; 224
     812:	68 f1       	brcs	.+90     	; 0x86e <__addsf3x+0x98>
     814:	1a 16       	cp	r1, r26
     816:	f0 40       	sbci	r31, 0x00	; 0
     818:	a2 2f       	mov	r26, r18
     81a:	23 2f       	mov	r18, r19
     81c:	34 2f       	mov	r19, r20
     81e:	44 27       	eor	r20, r20
     820:	58 5f       	subi	r21, 0xF8	; 248
     822:	f3 cf       	rjmp	.-26     	; 0x80a <__addsf3x+0x34>
     824:	46 95       	lsr	r20
     826:	37 95       	ror	r19
     828:	27 95       	ror	r18
     82a:	a7 95       	ror	r26
     82c:	f0 40       	sbci	r31, 0x00	; 0
     82e:	53 95       	inc	r21
     830:	c9 f7       	brne	.-14     	; 0x824 <__addsf3x+0x4e>
     832:	7e f4       	brtc	.+30     	; 0x852 <__addsf3x+0x7c>
     834:	1f 16       	cp	r1, r31
     836:	ba 0b       	sbc	r27, r26
     838:	62 0b       	sbc	r22, r18
     83a:	73 0b       	sbc	r23, r19
     83c:	84 0b       	sbc	r24, r20
     83e:	ba f0       	brmi	.+46     	; 0x86e <__addsf3x+0x98>
     840:	91 50       	subi	r25, 0x01	; 1
     842:	a1 f0       	breq	.+40     	; 0x86c <__addsf3x+0x96>
     844:	ff 0f       	add	r31, r31
     846:	bb 1f       	adc	r27, r27
     848:	66 1f       	adc	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	88 1f       	adc	r24, r24
     84e:	c2 f7       	brpl	.-16     	; 0x840 <__addsf3x+0x6a>
     850:	0e c0       	rjmp	.+28     	; 0x86e <__addsf3x+0x98>
     852:	ba 0f       	add	r27, r26
     854:	62 1f       	adc	r22, r18
     856:	73 1f       	adc	r23, r19
     858:	84 1f       	adc	r24, r20
     85a:	48 f4       	brcc	.+18     	; 0x86e <__addsf3x+0x98>
     85c:	87 95       	ror	r24
     85e:	77 95       	ror	r23
     860:	67 95       	ror	r22
     862:	b7 95       	ror	r27
     864:	f7 95       	ror	r31
     866:	9e 3f       	cpi	r25, 0xFE	; 254
     868:	08 f0       	brcs	.+2      	; 0x86c <__addsf3x+0x96>
     86a:	b3 cf       	rjmp	.-154    	; 0x7d2 <__addsf3+0x1e>
     86c:	93 95       	inc	r25
     86e:	88 0f       	add	r24, r24
     870:	08 f0       	brcs	.+2      	; 0x874 <__addsf3x+0x9e>
     872:	99 27       	eor	r25, r25
     874:	ee 0f       	add	r30, r30
     876:	97 95       	ror	r25
     878:	87 95       	ror	r24
     87a:	08 95       	ret

0000087c <__divsf3>:
     87c:	0c d0       	rcall	.+24     	; 0x896 <__divsf3x>
     87e:	eb c0       	rjmp	.+470    	; 0xa56 <__fp_round>
     880:	e3 d0       	rcall	.+454    	; 0xa48 <__fp_pscB>
     882:	40 f0       	brcs	.+16     	; 0x894 <__divsf3+0x18>
     884:	da d0       	rcall	.+436    	; 0xa3a <__fp_pscA>
     886:	30 f0       	brcs	.+12     	; 0x894 <__divsf3+0x18>
     888:	21 f4       	brne	.+8      	; 0x892 <__divsf3+0x16>
     88a:	5f 3f       	cpi	r21, 0xFF	; 255
     88c:	19 f0       	breq	.+6      	; 0x894 <__divsf3+0x18>
     88e:	cc c0       	rjmp	.+408    	; 0xa28 <__fp_inf>
     890:	51 11       	cpse	r21, r1
     892:	15 c1       	rjmp	.+554    	; 0xabe <__fp_szero>
     894:	cf c0       	rjmp	.+414    	; 0xa34 <__fp_nan>

00000896 <__divsf3x>:
     896:	f0 d0       	rcall	.+480    	; 0xa78 <__fp_split3>
     898:	98 f3       	brcs	.-26     	; 0x880 <__divsf3+0x4>

0000089a <__divsf3_pse>:
     89a:	99 23       	and	r25, r25
     89c:	c9 f3       	breq	.-14     	; 0x890 <__divsf3+0x14>
     89e:	55 23       	and	r21, r21
     8a0:	b1 f3       	breq	.-20     	; 0x88e <__divsf3+0x12>
     8a2:	95 1b       	sub	r25, r21
     8a4:	55 0b       	sbc	r21, r21
     8a6:	bb 27       	eor	r27, r27
     8a8:	aa 27       	eor	r26, r26
     8aa:	62 17       	cp	r22, r18
     8ac:	73 07       	cpc	r23, r19
     8ae:	84 07       	cpc	r24, r20
     8b0:	38 f0       	brcs	.+14     	; 0x8c0 <__divsf3_pse+0x26>
     8b2:	9f 5f       	subi	r25, 0xFF	; 255
     8b4:	5f 4f       	sbci	r21, 0xFF	; 255
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	44 1f       	adc	r20, r20
     8bc:	aa 1f       	adc	r26, r26
     8be:	a9 f3       	breq	.-22     	; 0x8aa <__divsf3_pse+0x10>
     8c0:	33 d0       	rcall	.+102    	; 0x928 <__divsf3_pse+0x8e>
     8c2:	0e 2e       	mov	r0, r30
     8c4:	3a f0       	brmi	.+14     	; 0x8d4 <__divsf3_pse+0x3a>
     8c6:	e0 e8       	ldi	r30, 0x80	; 128
     8c8:	30 d0       	rcall	.+96     	; 0x92a <__divsf3_pse+0x90>
     8ca:	91 50       	subi	r25, 0x01	; 1
     8cc:	50 40       	sbci	r21, 0x00	; 0
     8ce:	e6 95       	lsr	r30
     8d0:	00 1c       	adc	r0, r0
     8d2:	ca f7       	brpl	.-14     	; 0x8c6 <__divsf3_pse+0x2c>
     8d4:	29 d0       	rcall	.+82     	; 0x928 <__divsf3_pse+0x8e>
     8d6:	fe 2f       	mov	r31, r30
     8d8:	27 d0       	rcall	.+78     	; 0x928 <__divsf3_pse+0x8e>
     8da:	66 0f       	add	r22, r22
     8dc:	77 1f       	adc	r23, r23
     8de:	88 1f       	adc	r24, r24
     8e0:	bb 1f       	adc	r27, r27
     8e2:	26 17       	cp	r18, r22
     8e4:	37 07       	cpc	r19, r23
     8e6:	48 07       	cpc	r20, r24
     8e8:	ab 07       	cpc	r26, r27
     8ea:	b0 e8       	ldi	r27, 0x80	; 128
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <__divsf3_pse+0x56>
     8ee:	bb 0b       	sbc	r27, r27
     8f0:	80 2d       	mov	r24, r0
     8f2:	bf 01       	movw	r22, r30
     8f4:	ff 27       	eor	r31, r31
     8f6:	93 58       	subi	r25, 0x83	; 131
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	2a f0       	brmi	.+10     	; 0x906 <__divsf3_pse+0x6c>
     8fc:	9e 3f       	cpi	r25, 0xFE	; 254
     8fe:	51 05       	cpc	r21, r1
     900:	68 f0       	brcs	.+26     	; 0x91c <__divsf3_pse+0x82>
     902:	92 c0       	rjmp	.+292    	; 0xa28 <__fp_inf>
     904:	dc c0       	rjmp	.+440    	; 0xabe <__fp_szero>
     906:	5f 3f       	cpi	r21, 0xFF	; 255
     908:	ec f3       	brlt	.-6      	; 0x904 <__divsf3_pse+0x6a>
     90a:	98 3e       	cpi	r25, 0xE8	; 232
     90c:	dc f3       	brlt	.-10     	; 0x904 <__divsf3_pse+0x6a>
     90e:	86 95       	lsr	r24
     910:	77 95       	ror	r23
     912:	67 95       	ror	r22
     914:	b7 95       	ror	r27
     916:	f7 95       	ror	r31
     918:	9f 5f       	subi	r25, 0xFF	; 255
     91a:	c9 f7       	brne	.-14     	; 0x90e <__divsf3_pse+0x74>
     91c:	88 0f       	add	r24, r24
     91e:	91 1d       	adc	r25, r1
     920:	96 95       	lsr	r25
     922:	87 95       	ror	r24
     924:	97 f9       	bld	r25, 7
     926:	08 95       	ret
     928:	e1 e0       	ldi	r30, 0x01	; 1
     92a:	66 0f       	add	r22, r22
     92c:	77 1f       	adc	r23, r23
     92e:	88 1f       	adc	r24, r24
     930:	bb 1f       	adc	r27, r27
     932:	62 17       	cp	r22, r18
     934:	73 07       	cpc	r23, r19
     936:	84 07       	cpc	r24, r20
     938:	ba 07       	cpc	r27, r26
     93a:	20 f0       	brcs	.+8      	; 0x944 <__divsf3_pse+0xaa>
     93c:	62 1b       	sub	r22, r18
     93e:	73 0b       	sbc	r23, r19
     940:	84 0b       	sbc	r24, r20
     942:	ba 0b       	sbc	r27, r26
     944:	ee 1f       	adc	r30, r30
     946:	88 f7       	brcc	.-30     	; 0x92a <__divsf3_pse+0x90>
     948:	e0 95       	com	r30
     94a:	08 95       	ret

0000094c <__fixsfsi>:
     94c:	04 d0       	rcall	.+8      	; 0x956 <__fixunssfsi>
     94e:	68 94       	set
     950:	b1 11       	cpse	r27, r1
     952:	b5 c0       	rjmp	.+362    	; 0xabe <__fp_szero>
     954:	08 95       	ret

00000956 <__fixunssfsi>:
     956:	98 d0       	rcall	.+304    	; 0xa88 <__fp_splitA>
     958:	88 f0       	brcs	.+34     	; 0x97c <__fixunssfsi+0x26>
     95a:	9f 57       	subi	r25, 0x7F	; 127
     95c:	90 f0       	brcs	.+36     	; 0x982 <__fixunssfsi+0x2c>
     95e:	b9 2f       	mov	r27, r25
     960:	99 27       	eor	r25, r25
     962:	b7 51       	subi	r27, 0x17	; 23
     964:	a0 f0       	brcs	.+40     	; 0x98e <__fixunssfsi+0x38>
     966:	d1 f0       	breq	.+52     	; 0x99c <__fixunssfsi+0x46>
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	88 1f       	adc	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	1a f0       	brmi	.+6      	; 0x978 <__fixunssfsi+0x22>
     972:	ba 95       	dec	r27
     974:	c9 f7       	brne	.-14     	; 0x968 <__fixunssfsi+0x12>
     976:	12 c0       	rjmp	.+36     	; 0x99c <__fixunssfsi+0x46>
     978:	b1 30       	cpi	r27, 0x01	; 1
     97a:	81 f0       	breq	.+32     	; 0x99c <__fixunssfsi+0x46>
     97c:	9f d0       	rcall	.+318    	; 0xabc <__fp_zero>
     97e:	b1 e0       	ldi	r27, 0x01	; 1
     980:	08 95       	ret
     982:	9c c0       	rjmp	.+312    	; 0xabc <__fp_zero>
     984:	67 2f       	mov	r22, r23
     986:	78 2f       	mov	r23, r24
     988:	88 27       	eor	r24, r24
     98a:	b8 5f       	subi	r27, 0xF8	; 248
     98c:	39 f0       	breq	.+14     	; 0x99c <__fixunssfsi+0x46>
     98e:	b9 3f       	cpi	r27, 0xF9	; 249
     990:	cc f3       	brlt	.-14     	; 0x984 <__fixunssfsi+0x2e>
     992:	86 95       	lsr	r24
     994:	77 95       	ror	r23
     996:	67 95       	ror	r22
     998:	b3 95       	inc	r27
     99a:	d9 f7       	brne	.-10     	; 0x992 <__fixunssfsi+0x3c>
     99c:	3e f4       	brtc	.+14     	; 0x9ac <__fixunssfsi+0x56>
     99e:	90 95       	com	r25
     9a0:	80 95       	com	r24
     9a2:	70 95       	com	r23
     9a4:	61 95       	neg	r22
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	8f 4f       	sbci	r24, 0xFF	; 255
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	08 95       	ret

000009ae <__floatunsisf>:
     9ae:	e8 94       	clt
     9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <__floatsisf+0x12>

000009b2 <__floatsisf>:
     9b2:	97 fb       	bst	r25, 7
     9b4:	3e f4       	brtc	.+14     	; 0x9c4 <__floatsisf+0x12>
     9b6:	90 95       	com	r25
     9b8:	80 95       	com	r24
     9ba:	70 95       	com	r23
     9bc:	61 95       	neg	r22
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	8f 4f       	sbci	r24, 0xFF	; 255
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	99 23       	and	r25, r25
     9c6:	a9 f0       	breq	.+42     	; 0x9f2 <__floatsisf+0x40>
     9c8:	f9 2f       	mov	r31, r25
     9ca:	96 e9       	ldi	r25, 0x96	; 150
     9cc:	bb 27       	eor	r27, r27
     9ce:	93 95       	inc	r25
     9d0:	f6 95       	lsr	r31
     9d2:	87 95       	ror	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	b7 95       	ror	r27
     9da:	f1 11       	cpse	r31, r1
     9dc:	f8 cf       	rjmp	.-16     	; 0x9ce <__floatsisf+0x1c>
     9de:	fa f4       	brpl	.+62     	; 0xa1e <__floatsisf+0x6c>
     9e0:	bb 0f       	add	r27, r27
     9e2:	11 f4       	brne	.+4      	; 0x9e8 <__floatsisf+0x36>
     9e4:	60 ff       	sbrs	r22, 0
     9e6:	1b c0       	rjmp	.+54     	; 0xa1e <__floatsisf+0x6c>
     9e8:	6f 5f       	subi	r22, 0xFF	; 255
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	8f 4f       	sbci	r24, 0xFF	; 255
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	16 c0       	rjmp	.+44     	; 0xa1e <__floatsisf+0x6c>
     9f2:	88 23       	and	r24, r24
     9f4:	11 f0       	breq	.+4      	; 0x9fa <__floatsisf+0x48>
     9f6:	96 e9       	ldi	r25, 0x96	; 150
     9f8:	11 c0       	rjmp	.+34     	; 0xa1c <__floatsisf+0x6a>
     9fa:	77 23       	and	r23, r23
     9fc:	21 f0       	breq	.+8      	; 0xa06 <__floatsisf+0x54>
     9fe:	9e e8       	ldi	r25, 0x8E	; 142
     a00:	87 2f       	mov	r24, r23
     a02:	76 2f       	mov	r23, r22
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__floatsisf+0x5e>
     a06:	66 23       	and	r22, r22
     a08:	71 f0       	breq	.+28     	; 0xa26 <__floatsisf+0x74>
     a0a:	96 e8       	ldi	r25, 0x86	; 134
     a0c:	86 2f       	mov	r24, r22
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	2a f0       	brmi	.+10     	; 0xa1e <__floatsisf+0x6c>
     a14:	9a 95       	dec	r25
     a16:	66 0f       	add	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	88 1f       	adc	r24, r24
     a1c:	da f7       	brpl	.-10     	; 0xa14 <__floatsisf+0x62>
     a1e:	88 0f       	add	r24, r24
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	97 f9       	bld	r25, 7
     a26:	08 95       	ret

00000a28 <__fp_inf>:
     a28:	97 f9       	bld	r25, 7
     a2a:	9f 67       	ori	r25, 0x7F	; 127
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	08 95       	ret

00000a34 <__fp_nan>:
     a34:	9f ef       	ldi	r25, 0xFF	; 255
     a36:	80 ec       	ldi	r24, 0xC0	; 192
     a38:	08 95       	ret

00000a3a <__fp_pscA>:
     a3a:	00 24       	eor	r0, r0
     a3c:	0a 94       	dec	r0
     a3e:	16 16       	cp	r1, r22
     a40:	17 06       	cpc	r1, r23
     a42:	18 06       	cpc	r1, r24
     a44:	09 06       	cpc	r0, r25
     a46:	08 95       	ret

00000a48 <__fp_pscB>:
     a48:	00 24       	eor	r0, r0
     a4a:	0a 94       	dec	r0
     a4c:	12 16       	cp	r1, r18
     a4e:	13 06       	cpc	r1, r19
     a50:	14 06       	cpc	r1, r20
     a52:	05 06       	cpc	r0, r21
     a54:	08 95       	ret

00000a56 <__fp_round>:
     a56:	09 2e       	mov	r0, r25
     a58:	03 94       	inc	r0
     a5a:	00 0c       	add	r0, r0
     a5c:	11 f4       	brne	.+4      	; 0xa62 <__fp_round+0xc>
     a5e:	88 23       	and	r24, r24
     a60:	52 f0       	brmi	.+20     	; 0xa76 <__fp_round+0x20>
     a62:	bb 0f       	add	r27, r27
     a64:	40 f4       	brcc	.+16     	; 0xa76 <__fp_round+0x20>
     a66:	bf 2b       	or	r27, r31
     a68:	11 f4       	brne	.+4      	; 0xa6e <__fp_round+0x18>
     a6a:	60 ff       	sbrs	r22, 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__fp_round+0x20>
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	8f 4f       	sbci	r24, 0xFF	; 255
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	08 95       	ret

00000a78 <__fp_split3>:
     a78:	57 fd       	sbrc	r21, 7
     a7a:	90 58       	subi	r25, 0x80	; 128
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	59 f0       	breq	.+22     	; 0xa98 <__fp_splitA+0x10>
     a82:	5f 3f       	cpi	r21, 0xFF	; 255
     a84:	71 f0       	breq	.+28     	; 0xaa2 <__fp_splitA+0x1a>
     a86:	47 95       	ror	r20

00000a88 <__fp_splitA>:
     a88:	88 0f       	add	r24, r24
     a8a:	97 fb       	bst	r25, 7
     a8c:	99 1f       	adc	r25, r25
     a8e:	61 f0       	breq	.+24     	; 0xaa8 <__fp_splitA+0x20>
     a90:	9f 3f       	cpi	r25, 0xFF	; 255
     a92:	79 f0       	breq	.+30     	; 0xab2 <__fp_splitA+0x2a>
     a94:	87 95       	ror	r24
     a96:	08 95       	ret
     a98:	12 16       	cp	r1, r18
     a9a:	13 06       	cpc	r1, r19
     a9c:	14 06       	cpc	r1, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	f2 cf       	rjmp	.-28     	; 0xa86 <__fp_split3+0xe>
     aa2:	46 95       	lsr	r20
     aa4:	f1 df       	rcall	.-30     	; 0xa88 <__fp_splitA>
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <__fp_splitA+0x30>
     aa8:	16 16       	cp	r1, r22
     aaa:	17 06       	cpc	r1, r23
     aac:	18 06       	cpc	r1, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	f1 cf       	rjmp	.-30     	; 0xa94 <__fp_splitA+0xc>
     ab2:	86 95       	lsr	r24
     ab4:	71 05       	cpc	r23, r1
     ab6:	61 05       	cpc	r22, r1
     ab8:	08 94       	sec
     aba:	08 95       	ret

00000abc <__fp_zero>:
     abc:	e8 94       	clt

00000abe <__fp_szero>:
     abe:	bb 27       	eor	r27, r27
     ac0:	66 27       	eor	r22, r22
     ac2:	77 27       	eor	r23, r23
     ac4:	cb 01       	movw	r24, r22
     ac6:	97 f9       	bld	r25, 7
     ac8:	08 95       	ret

00000aca <__mulsf3>:
     aca:	0b d0       	rcall	.+22     	; 0xae2 <__mulsf3x>
     acc:	c4 cf       	rjmp	.-120    	; 0xa56 <__fp_round>
     ace:	b5 df       	rcall	.-150    	; 0xa3a <__fp_pscA>
     ad0:	28 f0       	brcs	.+10     	; 0xadc <__mulsf3+0x12>
     ad2:	ba df       	rcall	.-140    	; 0xa48 <__fp_pscB>
     ad4:	18 f0       	brcs	.+6      	; 0xadc <__mulsf3+0x12>
     ad6:	95 23       	and	r25, r21
     ad8:	09 f0       	breq	.+2      	; 0xadc <__mulsf3+0x12>
     ada:	a6 cf       	rjmp	.-180    	; 0xa28 <__fp_inf>
     adc:	ab cf       	rjmp	.-170    	; 0xa34 <__fp_nan>
     ade:	11 24       	eor	r1, r1
     ae0:	ee cf       	rjmp	.-36     	; 0xabe <__fp_szero>

00000ae2 <__mulsf3x>:
     ae2:	ca df       	rcall	.-108    	; 0xa78 <__fp_split3>
     ae4:	a0 f3       	brcs	.-24     	; 0xace <__mulsf3+0x4>

00000ae6 <__mulsf3_pse>:
     ae6:	95 9f       	mul	r25, r21
     ae8:	d1 f3       	breq	.-12     	; 0xade <__mulsf3+0x14>
     aea:	95 0f       	add	r25, r21
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	55 1f       	adc	r21, r21
     af0:	62 9f       	mul	r22, r18
     af2:	f0 01       	movw	r30, r0
     af4:	72 9f       	mul	r23, r18
     af6:	bb 27       	eor	r27, r27
     af8:	f0 0d       	add	r31, r0
     afa:	b1 1d       	adc	r27, r1
     afc:	63 9f       	mul	r22, r19
     afe:	aa 27       	eor	r26, r26
     b00:	f0 0d       	add	r31, r0
     b02:	b1 1d       	adc	r27, r1
     b04:	aa 1f       	adc	r26, r26
     b06:	64 9f       	mul	r22, r20
     b08:	66 27       	eor	r22, r22
     b0a:	b0 0d       	add	r27, r0
     b0c:	a1 1d       	adc	r26, r1
     b0e:	66 1f       	adc	r22, r22
     b10:	82 9f       	mul	r24, r18
     b12:	22 27       	eor	r18, r18
     b14:	b0 0d       	add	r27, r0
     b16:	a1 1d       	adc	r26, r1
     b18:	62 1f       	adc	r22, r18
     b1a:	73 9f       	mul	r23, r19
     b1c:	b0 0d       	add	r27, r0
     b1e:	a1 1d       	adc	r26, r1
     b20:	62 1f       	adc	r22, r18
     b22:	83 9f       	mul	r24, r19
     b24:	a0 0d       	add	r26, r0
     b26:	61 1d       	adc	r22, r1
     b28:	22 1f       	adc	r18, r18
     b2a:	74 9f       	mul	r23, r20
     b2c:	33 27       	eor	r19, r19
     b2e:	a0 0d       	add	r26, r0
     b30:	61 1d       	adc	r22, r1
     b32:	23 1f       	adc	r18, r19
     b34:	84 9f       	mul	r24, r20
     b36:	60 0d       	add	r22, r0
     b38:	21 1d       	adc	r18, r1
     b3a:	82 2f       	mov	r24, r18
     b3c:	76 2f       	mov	r23, r22
     b3e:	6a 2f       	mov	r22, r26
     b40:	11 24       	eor	r1, r1
     b42:	9f 57       	subi	r25, 0x7F	; 127
     b44:	50 40       	sbci	r21, 0x00	; 0
     b46:	8a f0       	brmi	.+34     	; 0xb6a <__mulsf3_pse+0x84>
     b48:	e1 f0       	breq	.+56     	; 0xb82 <__mulsf3_pse+0x9c>
     b4a:	88 23       	and	r24, r24
     b4c:	4a f0       	brmi	.+18     	; 0xb60 <__mulsf3_pse+0x7a>
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	bb 1f       	adc	r27, r27
     b54:	66 1f       	adc	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	88 1f       	adc	r24, r24
     b5a:	91 50       	subi	r25, 0x01	; 1
     b5c:	50 40       	sbci	r21, 0x00	; 0
     b5e:	a9 f7       	brne	.-22     	; 0xb4a <__mulsf3_pse+0x64>
     b60:	9e 3f       	cpi	r25, 0xFE	; 254
     b62:	51 05       	cpc	r21, r1
     b64:	70 f0       	brcs	.+28     	; 0xb82 <__mulsf3_pse+0x9c>
     b66:	60 cf       	rjmp	.-320    	; 0xa28 <__fp_inf>
     b68:	aa cf       	rjmp	.-172    	; 0xabe <__fp_szero>
     b6a:	5f 3f       	cpi	r21, 0xFF	; 255
     b6c:	ec f3       	brlt	.-6      	; 0xb68 <__mulsf3_pse+0x82>
     b6e:	98 3e       	cpi	r25, 0xE8	; 232
     b70:	dc f3       	brlt	.-10     	; 0xb68 <__mulsf3_pse+0x82>
     b72:	86 95       	lsr	r24
     b74:	77 95       	ror	r23
     b76:	67 95       	ror	r22
     b78:	b7 95       	ror	r27
     b7a:	f7 95       	ror	r31
     b7c:	e7 95       	ror	r30
     b7e:	9f 5f       	subi	r25, 0xFF	; 255
     b80:	c1 f7       	brne	.-16     	; 0xb72 <__mulsf3_pse+0x8c>
     b82:	fe 2b       	or	r31, r30
     b84:	88 0f       	add	r24, r24
     b86:	91 1d       	adc	r25, r1
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	97 f9       	bld	r25, 7
     b8e:	08 95       	ret

00000b90 <__divmodhi4>:
     b90:	97 fb       	bst	r25, 7
     b92:	07 2e       	mov	r0, r23
     b94:	16 f4       	brtc	.+4      	; 0xb9a <__divmodhi4+0xa>
     b96:	00 94       	com	r0
     b98:	07 d0       	rcall	.+14     	; 0xba8 <__divmodhi4_neg1>
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	09 d0       	rcall	.+18     	; 0xbb0 <__divmodhi4_neg2>
     b9e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__udivmodhi4>
     ba2:	07 fc       	sbrc	r0, 7
     ba4:	05 d0       	rcall	.+10     	; 0xbb0 <__divmodhi4_neg2>
     ba6:	3e f4       	brtc	.+14     	; 0xbb6 <__divmodhi4_exit>

00000ba8 <__divmodhi4_neg1>:
     ba8:	90 95       	com	r25
     baa:	81 95       	neg	r24
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	08 95       	ret

00000bb0 <__divmodhi4_neg2>:
     bb0:	70 95       	com	r23
     bb2:	61 95       	neg	r22
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb6 <__divmodhi4_exit>:
     bb6:	08 95       	ret

00000bb8 <__udivmodhi4>:
     bb8:	aa 1b       	sub	r26, r26
     bba:	bb 1b       	sub	r27, r27
     bbc:	51 e1       	ldi	r21, 0x11	; 17
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <__udivmodhi4_ep>

00000bc0 <__udivmodhi4_loop>:
     bc0:	aa 1f       	adc	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	a6 17       	cp	r26, r22
     bc6:	b7 07       	cpc	r27, r23
     bc8:	10 f0       	brcs	.+4      	; 0xbce <__udivmodhi4_ep>
     bca:	a6 1b       	sub	r26, r22
     bcc:	b7 0b       	sbc	r27, r23

00000bce <__udivmodhi4_ep>:
     bce:	88 1f       	adc	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	5a 95       	dec	r21
     bd4:	a9 f7       	brne	.-22     	; 0xbc0 <__udivmodhi4_loop>
     bd6:	80 95       	com	r24
     bd8:	90 95       	com	r25
     bda:	bc 01       	movw	r22, r24
     bdc:	cd 01       	movw	r24, r26
     bde:	08 95       	ret

00000be0 <do_rand>:
     be0:	8f 92       	push	r8
     be2:	9f 92       	push	r9
     be4:	af 92       	push	r10
     be6:	bf 92       	push	r11
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
     bf6:	68 81       	ld	r22, Y
     bf8:	79 81       	ldd	r23, Y+1	; 0x01
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	61 15       	cp	r22, r1
     c00:	71 05       	cpc	r23, r1
     c02:	81 05       	cpc	r24, r1
     c04:	91 05       	cpc	r25, r1
     c06:	21 f4       	brne	.+8      	; 0xc10 <do_rand+0x30>
     c08:	64 e2       	ldi	r22, 0x24	; 36
     c0a:	79 ed       	ldi	r23, 0xD9	; 217
     c0c:	8b e5       	ldi	r24, 0x5B	; 91
     c0e:	97 e0       	ldi	r25, 0x07	; 7
     c10:	2d e1       	ldi	r18, 0x1D	; 29
     c12:	33 ef       	ldi	r19, 0xF3	; 243
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__divmodsi4>
     c1c:	49 01       	movw	r8, r18
     c1e:	5a 01       	movw	r10, r20
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	a7 ea       	ldi	r26, 0xA7	; 167
     c26:	b1 e4       	ldi	r27, 0x41	; 65
     c28:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__muluhisi3>
     c2c:	6b 01       	movw	r12, r22
     c2e:	7c 01       	movw	r14, r24
     c30:	ac ee       	ldi	r26, 0xEC	; 236
     c32:	b4 ef       	ldi	r27, 0xF4	; 244
     c34:	a5 01       	movw	r20, r10
     c36:	94 01       	movw	r18, r8
     c38:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__mulohisi3>
     c3c:	c6 0e       	add	r12, r22
     c3e:	d7 1e       	adc	r13, r23
     c40:	e8 1e       	adc	r14, r24
     c42:	f9 1e       	adc	r15, r25
     c44:	f7 fe       	sbrs	r15, 7
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <do_rand+0x74>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	c8 1a       	sub	r12, r24
     c4c:	d1 08       	sbc	r13, r1
     c4e:	e1 08       	sbc	r14, r1
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	f8 0a       	sbc	r15, r24
     c54:	c8 82       	st	Y, r12
     c56:	d9 82       	std	Y+1, r13	; 0x01
     c58:	ea 82       	std	Y+2, r14	; 0x02
     c5a:	fb 82       	std	Y+3, r15	; 0x03
     c5c:	c6 01       	movw	r24, r12
     c5e:	9f 77       	andi	r25, 0x7F	; 127
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	bf 90       	pop	r11
     c6e:	af 90       	pop	r10
     c70:	9f 90       	pop	r9
     c72:	8f 90       	pop	r8
     c74:	08 95       	ret

00000c76 <rand_r>:
     c76:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <do_rand>
     c7a:	08 95       	ret

00000c7c <rand>:
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <do_rand>
     c84:	08 95       	ret

00000c86 <srand>:
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	80 93 00 01 	sts	0x0100, r24
     c8e:	90 93 01 01 	sts	0x0101, r25
     c92:	a0 93 02 01 	sts	0x0102, r26
     c96:	b0 93 03 01 	sts	0x0103, r27
     c9a:	08 95       	ret

00000c9c <fdevopen>:
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
     ca6:	8b 01       	movw	r16, r22
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	31 f4       	brne	.+12     	; 0xcb8 <fdevopen+0x1c>
     cac:	61 15       	cp	r22, r1
     cae:	71 05       	cpc	r23, r1
     cb0:	19 f4       	brne	.+6      	; 0xcb8 <fdevopen+0x1c>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	38 c0       	rjmp	.+112    	; 0xd28 <fdevopen+0x8c>
     cb8:	6e e0       	ldi	r22, 0x0E	; 14
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 b3 08 	call	0x1166	; 0x1166 <calloc>
     cc4:	fc 01       	movw	r30, r24
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	a1 f3       	breq	.-24     	; 0xcb2 <fdevopen+0x16>
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	83 83       	std	Z+3, r24	; 0x03
     cce:	01 15       	cp	r16, r1
     cd0:	11 05       	cpc	r17, r1
     cd2:	71 f0       	breq	.+28     	; 0xcf0 <fdevopen+0x54>
     cd4:	13 87       	std	Z+11, r17	; 0x0b
     cd6:	02 87       	std	Z+10, r16	; 0x0a
     cd8:	81 e8       	ldi	r24, 0x81	; 129
     cda:	83 83       	std	Z+3, r24	; 0x03
     cdc:	80 91 56 03 	lds	r24, 0x0356
     ce0:	90 91 57 03 	lds	r25, 0x0357
     ce4:	89 2b       	or	r24, r25
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <fdevopen+0x54>
     ce8:	f0 93 57 03 	sts	0x0357, r31
     cec:	e0 93 56 03 	sts	0x0356, r30
     cf0:	20 97       	sbiw	r28, 0x00	; 0
     cf2:	c9 f0       	breq	.+50     	; 0xd26 <fdevopen+0x8a>
     cf4:	d1 87       	std	Z+9, r29	; 0x09
     cf6:	c0 87       	std	Z+8, r28	; 0x08
     cf8:	83 81       	ldd	r24, Z+3	; 0x03
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	83 83       	std	Z+3, r24	; 0x03
     cfe:	80 91 58 03 	lds	r24, 0x0358
     d02:	90 91 59 03 	lds	r25, 0x0359
     d06:	89 2b       	or	r24, r25
     d08:	71 f4       	brne	.+28     	; 0xd26 <fdevopen+0x8a>
     d0a:	f0 93 59 03 	sts	0x0359, r31
     d0e:	e0 93 58 03 	sts	0x0358, r30
     d12:	80 91 5a 03 	lds	r24, 0x035A
     d16:	90 91 5b 03 	lds	r25, 0x035B
     d1a:	89 2b       	or	r24, r25
     d1c:	21 f4       	brne	.+8      	; 0xd26 <fdevopen+0x8a>
     d1e:	f0 93 5b 03 	sts	0x035B, r31
     d22:	e0 93 5a 03 	sts	0x035A, r30
     d26:	cf 01       	movw	r24, r30
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <printf>:
     d32:	a0 e0       	ldi	r26, 0x00	; 0
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ef e9       	ldi	r30, 0x9F	; 159
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__prologue_saves__+0x20>
     d3e:	fe 01       	movw	r30, r28
     d40:	35 96       	adiw	r30, 0x05	; 5
     d42:	61 91       	ld	r22, Z+
     d44:	71 91       	ld	r23, Z+
     d46:	af 01       	movw	r20, r30
     d48:	80 91 58 03 	lds	r24, 0x0358
     d4c:	90 91 59 03 	lds	r25, 0x0359
     d50:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vfprintf>
     d54:	e2 e0       	ldi	r30, 0x02	; 2
     d56:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__epilogue_restores__+0x20>

00000d5a <putchar>:
     d5a:	60 91 58 03 	lds	r22, 0x0358
     d5e:	70 91 59 03 	lds	r23, 0x0359
     d62:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
     d66:	08 95       	ret

00000d68 <puts>:
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	e0 91 58 03 	lds	r30, 0x0358
     d74:	f0 91 59 03 	lds	r31, 0x0359
     d78:	23 81       	ldd	r18, Z+3	; 0x03
     d7a:	21 ff       	sbrs	r18, 1
     d7c:	1b c0       	rjmp	.+54     	; 0xdb4 <puts+0x4c>
     d7e:	ec 01       	movw	r28, r24
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	89 91       	ld	r24, Y+
     d86:	60 91 58 03 	lds	r22, 0x0358
     d8a:	70 91 59 03 	lds	r23, 0x0359
     d8e:	db 01       	movw	r26, r22
     d90:	18 96       	adiw	r26, 0x08	; 8
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	19 97       	sbiw	r26, 0x09	; 9
     d98:	88 23       	and	r24, r24
     d9a:	31 f0       	breq	.+12     	; 0xda8 <puts+0x40>
     d9c:	09 95       	icall
     d9e:	89 2b       	or	r24, r25
     da0:	89 f3       	breq	.-30     	; 0xd84 <puts+0x1c>
     da2:	0f ef       	ldi	r16, 0xFF	; 255
     da4:	1f ef       	ldi	r17, 0xFF	; 255
     da6:	ee cf       	rjmp	.-36     	; 0xd84 <puts+0x1c>
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	09 95       	icall
     dac:	89 2b       	or	r24, r25
     dae:	11 f4       	brne	.+4      	; 0xdb4 <puts+0x4c>
     db0:	c8 01       	movw	r24, r16
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <puts+0x50>
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <vfprintf>:
     dc2:	ac e0       	ldi	r26, 0x0C	; 12
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e7 ee       	ldi	r30, 0xE7	; 231
     dc8:	f6 e0       	ldi	r31, 0x06	; 6
     dca:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__prologue_saves__>
     dce:	7c 01       	movw	r14, r24
     dd0:	6b 01       	movw	r12, r22
     dd2:	8a 01       	movw	r16, r20
     dd4:	fc 01       	movw	r30, r24
     dd6:	17 82       	std	Z+7, r1	; 0x07
     dd8:	16 82       	std	Z+6, r1	; 0x06
     dda:	83 81       	ldd	r24, Z+3	; 0x03
     ddc:	81 ff       	sbrs	r24, 1
     dde:	bd c1       	rjmp	.+890    	; 0x115a <vfprintf+0x398>
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	4c 01       	movw	r8, r24
     de6:	f7 01       	movw	r30, r14
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	f6 01       	movw	r30, r12
     dec:	93 fd       	sbrc	r25, 3
     dee:	85 91       	lpm	r24, Z+
     df0:	93 ff       	sbrs	r25, 3
     df2:	81 91       	ld	r24, Z+
     df4:	6f 01       	movw	r12, r30
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <vfprintf+0x3a>
     dfa:	ab c1       	rjmp	.+854    	; 0x1152 <vfprintf+0x390>
     dfc:	85 32       	cpi	r24, 0x25	; 37
     dfe:	39 f4       	brne	.+14     	; 0xe0e <vfprintf+0x4c>
     e00:	93 fd       	sbrc	r25, 3
     e02:	85 91       	lpm	r24, Z+
     e04:	93 ff       	sbrs	r25, 3
     e06:	81 91       	ld	r24, Z+
     e08:	6f 01       	movw	r12, r30
     e0a:	85 32       	cpi	r24, 0x25	; 37
     e0c:	29 f4       	brne	.+10     	; 0xe18 <vfprintf+0x56>
     e0e:	b7 01       	movw	r22, r14
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
     e16:	e7 cf       	rjmp	.-50     	; 0xde6 <vfprintf+0x24>
     e18:	51 2c       	mov	r5, r1
     e1a:	31 2c       	mov	r3, r1
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	20 32       	cpi	r18, 0x20	; 32
     e20:	a0 f4       	brcc	.+40     	; 0xe4a <vfprintf+0x88>
     e22:	8b 32       	cpi	r24, 0x2B	; 43
     e24:	69 f0       	breq	.+26     	; 0xe40 <vfprintf+0x7e>
     e26:	30 f4       	brcc	.+12     	; 0xe34 <vfprintf+0x72>
     e28:	80 32       	cpi	r24, 0x20	; 32
     e2a:	59 f0       	breq	.+22     	; 0xe42 <vfprintf+0x80>
     e2c:	83 32       	cpi	r24, 0x23	; 35
     e2e:	69 f4       	brne	.+26     	; 0xe4a <vfprintf+0x88>
     e30:	20 61       	ori	r18, 0x10	; 16
     e32:	2c c0       	rjmp	.+88     	; 0xe8c <vfprintf+0xca>
     e34:	8d 32       	cpi	r24, 0x2D	; 45
     e36:	39 f0       	breq	.+14     	; 0xe46 <vfprintf+0x84>
     e38:	80 33       	cpi	r24, 0x30	; 48
     e3a:	39 f4       	brne	.+14     	; 0xe4a <vfprintf+0x88>
     e3c:	21 60       	ori	r18, 0x01	; 1
     e3e:	26 c0       	rjmp	.+76     	; 0xe8c <vfprintf+0xca>
     e40:	22 60       	ori	r18, 0x02	; 2
     e42:	24 60       	ori	r18, 0x04	; 4
     e44:	23 c0       	rjmp	.+70     	; 0xe8c <vfprintf+0xca>
     e46:	28 60       	ori	r18, 0x08	; 8
     e48:	21 c0       	rjmp	.+66     	; 0xe8c <vfprintf+0xca>
     e4a:	27 fd       	sbrc	r18, 7
     e4c:	27 c0       	rjmp	.+78     	; 0xe9c <vfprintf+0xda>
     e4e:	30 ed       	ldi	r19, 0xD0	; 208
     e50:	38 0f       	add	r19, r24
     e52:	3a 30       	cpi	r19, 0x0A	; 10
     e54:	78 f4       	brcc	.+30     	; 0xe74 <vfprintf+0xb2>
     e56:	26 ff       	sbrs	r18, 6
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0xa4>
     e5a:	fa e0       	ldi	r31, 0x0A	; 10
     e5c:	5f 9e       	mul	r5, r31
     e5e:	30 0d       	add	r19, r0
     e60:	11 24       	eor	r1, r1
     e62:	53 2e       	mov	r5, r19
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <vfprintf+0xca>
     e66:	8a e0       	ldi	r24, 0x0A	; 10
     e68:	38 9e       	mul	r3, r24
     e6a:	30 0d       	add	r19, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	33 2e       	mov	r3, r19
     e70:	20 62       	ori	r18, 0x20	; 32
     e72:	0c c0       	rjmp	.+24     	; 0xe8c <vfprintf+0xca>
     e74:	8e 32       	cpi	r24, 0x2E	; 46
     e76:	21 f4       	brne	.+8      	; 0xe80 <vfprintf+0xbe>
     e78:	26 fd       	sbrc	r18, 6
     e7a:	6b c1       	rjmp	.+726    	; 0x1152 <vfprintf+0x390>
     e7c:	20 64       	ori	r18, 0x40	; 64
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <vfprintf+0xca>
     e80:	8c 36       	cpi	r24, 0x6C	; 108
     e82:	11 f4       	brne	.+4      	; 0xe88 <vfprintf+0xc6>
     e84:	20 68       	ori	r18, 0x80	; 128
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0xca>
     e88:	88 36       	cpi	r24, 0x68	; 104
     e8a:	41 f4       	brne	.+16     	; 0xe9c <vfprintf+0xda>
     e8c:	f6 01       	movw	r30, r12
     e8e:	93 fd       	sbrc	r25, 3
     e90:	85 91       	lpm	r24, Z+
     e92:	93 ff       	sbrs	r25, 3
     e94:	81 91       	ld	r24, Z+
     e96:	6f 01       	movw	r12, r30
     e98:	81 11       	cpse	r24, r1
     e9a:	c1 cf       	rjmp	.-126    	; 0xe1e <vfprintf+0x5c>
     e9c:	98 2f       	mov	r25, r24
     e9e:	9f 7d       	andi	r25, 0xDF	; 223
     ea0:	95 54       	subi	r25, 0x45	; 69
     ea2:	93 30       	cpi	r25, 0x03	; 3
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <vfprintf+0xee>
     ea6:	0c 5f       	subi	r16, 0xFC	; 252
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	ff e3       	ldi	r31, 0x3F	; 63
     eac:	f9 83       	std	Y+1, r31	; 0x01
     eae:	0d c0       	rjmp	.+26     	; 0xeca <vfprintf+0x108>
     eb0:	83 36       	cpi	r24, 0x63	; 99
     eb2:	31 f0       	breq	.+12     	; 0xec0 <vfprintf+0xfe>
     eb4:	83 37       	cpi	r24, 0x73	; 115
     eb6:	71 f0       	breq	.+28     	; 0xed4 <vfprintf+0x112>
     eb8:	83 35       	cpi	r24, 0x53	; 83
     eba:	09 f0       	breq	.+2      	; 0xebe <vfprintf+0xfc>
     ebc:	5b c0       	rjmp	.+182    	; 0xf74 <vfprintf+0x1b2>
     ebe:	22 c0       	rjmp	.+68     	; 0xf04 <vfprintf+0x142>
     ec0:	f8 01       	movw	r30, r16
     ec2:	80 81       	ld	r24, Z
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	0e 5f       	subi	r16, 0xFE	; 254
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	44 24       	eor	r4, r4
     ecc:	43 94       	inc	r4
     ece:	51 2c       	mov	r5, r1
     ed0:	54 01       	movw	r10, r8
     ed2:	15 c0       	rjmp	.+42     	; 0xefe <vfprintf+0x13c>
     ed4:	38 01       	movw	r6, r16
     ed6:	f2 e0       	ldi	r31, 0x02	; 2
     ed8:	6f 0e       	add	r6, r31
     eda:	71 1c       	adc	r7, r1
     edc:	f8 01       	movw	r30, r16
     ede:	a0 80       	ld	r10, Z
     ee0:	b1 80       	ldd	r11, Z+1	; 0x01
     ee2:	26 ff       	sbrs	r18, 6
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <vfprintf+0x12a>
     ee6:	65 2d       	mov	r22, r5
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x12e>
     eec:	6f ef       	ldi	r22, 0xFF	; 255
     eee:	7f ef       	ldi	r23, 0xFF	; 255
     ef0:	c5 01       	movw	r24, r10
     ef2:	2c 87       	std	Y+12, r18	; 0x0c
     ef4:	0e 94 08 0a 	call	0x1410	; 0x1410 <strnlen>
     ef8:	2c 01       	movw	r4, r24
     efa:	83 01       	movw	r16, r6
     efc:	2c 85       	ldd	r18, Y+12	; 0x0c
     efe:	2f 77       	andi	r18, 0x7F	; 127
     f00:	22 2e       	mov	r2, r18
     f02:	17 c0       	rjmp	.+46     	; 0xf32 <vfprintf+0x170>
     f04:	38 01       	movw	r6, r16
     f06:	f2 e0       	ldi	r31, 0x02	; 2
     f08:	6f 0e       	add	r6, r31
     f0a:	71 1c       	adc	r7, r1
     f0c:	f8 01       	movw	r30, r16
     f0e:	a0 80       	ld	r10, Z
     f10:	b1 80       	ldd	r11, Z+1	; 0x01
     f12:	26 ff       	sbrs	r18, 6
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <vfprintf+0x15a>
     f16:	65 2d       	mov	r22, r5
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <vfprintf+0x15e>
     f1c:	6f ef       	ldi	r22, 0xFF	; 255
     f1e:	7f ef       	ldi	r23, 0xFF	; 255
     f20:	c5 01       	movw	r24, r10
     f22:	2c 87       	std	Y+12, r18	; 0x0c
     f24:	0e 94 f6 09 	call	0x13ec	; 0x13ec <strnlen_P>
     f28:	2c 01       	movw	r4, r24
     f2a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f2c:	20 68       	ori	r18, 0x80	; 128
     f2e:	22 2e       	mov	r2, r18
     f30:	83 01       	movw	r16, r6
     f32:	23 fc       	sbrc	r2, 3
     f34:	1b c0       	rjmp	.+54     	; 0xf6c <vfprintf+0x1aa>
     f36:	83 2d       	mov	r24, r3
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	48 16       	cp	r4, r24
     f3c:	59 06       	cpc	r5, r25
     f3e:	b0 f4       	brcc	.+44     	; 0xf6c <vfprintf+0x1aa>
     f40:	b7 01       	movw	r22, r14
     f42:	80 e2       	ldi	r24, 0x20	; 32
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
     f4a:	3a 94       	dec	r3
     f4c:	f4 cf       	rjmp	.-24     	; 0xf36 <vfprintf+0x174>
     f4e:	f5 01       	movw	r30, r10
     f50:	27 fc       	sbrc	r2, 7
     f52:	85 91       	lpm	r24, Z+
     f54:	27 fe       	sbrs	r2, 7
     f56:	81 91       	ld	r24, Z+
     f58:	5f 01       	movw	r10, r30
     f5a:	b7 01       	movw	r22, r14
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
     f62:	31 10       	cpse	r3, r1
     f64:	3a 94       	dec	r3
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	4f 1a       	sub	r4, r31
     f6a:	51 08       	sbc	r5, r1
     f6c:	41 14       	cp	r4, r1
     f6e:	51 04       	cpc	r5, r1
     f70:	71 f7       	brne	.-36     	; 0xf4e <vfprintf+0x18c>
     f72:	e5 c0       	rjmp	.+458    	; 0x113e <vfprintf+0x37c>
     f74:	84 36       	cpi	r24, 0x64	; 100
     f76:	11 f0       	breq	.+4      	; 0xf7c <vfprintf+0x1ba>
     f78:	89 36       	cpi	r24, 0x69	; 105
     f7a:	39 f5       	brne	.+78     	; 0xfca <vfprintf+0x208>
     f7c:	f8 01       	movw	r30, r16
     f7e:	27 ff       	sbrs	r18, 7
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <vfprintf+0x1ce>
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	0c 5f       	subi	r16, 0xFC	; 252
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <vfprintf+0x1de>
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	88 27       	eor	r24, r24
     f96:	77 fd       	sbrc	r23, 7
     f98:	80 95       	com	r24
     f9a:	98 2f       	mov	r25, r24
     f9c:	0e 5f       	subi	r16, 0xFE	; 254
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	2f 76       	andi	r18, 0x6F	; 111
     fa2:	b2 2e       	mov	r11, r18
     fa4:	97 ff       	sbrs	r25, 7
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <vfprintf+0x1f8>
     fa8:	90 95       	com	r25
     faa:	80 95       	com	r24
     fac:	70 95       	com	r23
     fae:	61 95       	neg	r22
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	20 68       	ori	r18, 0x80	; 128
     fb8:	b2 2e       	mov	r11, r18
     fba:	2a e0       	ldi	r18, 0x0A	; 10
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	a4 01       	movw	r20, r8
     fc0:	0e 94 45 0a 	call	0x148a	; 0x148a <__ultoa_invert>
     fc4:	a8 2e       	mov	r10, r24
     fc6:	a8 18       	sub	r10, r8
     fc8:	44 c0       	rjmp	.+136    	; 0x1052 <vfprintf+0x290>
     fca:	85 37       	cpi	r24, 0x75	; 117
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <vfprintf+0x216>
     fce:	2f 7e       	andi	r18, 0xEF	; 239
     fd0:	b2 2e       	mov	r11, r18
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	25 c0       	rjmp	.+74     	; 0x1022 <vfprintf+0x260>
     fd8:	f2 2f       	mov	r31, r18
     fda:	f9 7f       	andi	r31, 0xF9	; 249
     fdc:	bf 2e       	mov	r11, r31
     fde:	8f 36       	cpi	r24, 0x6F	; 111
     fe0:	c1 f0       	breq	.+48     	; 0x1012 <vfprintf+0x250>
     fe2:	18 f4       	brcc	.+6      	; 0xfea <vfprintf+0x228>
     fe4:	88 35       	cpi	r24, 0x58	; 88
     fe6:	79 f0       	breq	.+30     	; 0x1006 <vfprintf+0x244>
     fe8:	b4 c0       	rjmp	.+360    	; 0x1152 <vfprintf+0x390>
     fea:	80 37       	cpi	r24, 0x70	; 112
     fec:	19 f0       	breq	.+6      	; 0xff4 <vfprintf+0x232>
     fee:	88 37       	cpi	r24, 0x78	; 120
     ff0:	21 f0       	breq	.+8      	; 0xffa <vfprintf+0x238>
     ff2:	af c0       	rjmp	.+350    	; 0x1152 <vfprintf+0x390>
     ff4:	2f 2f       	mov	r18, r31
     ff6:	20 61       	ori	r18, 0x10	; 16
     ff8:	b2 2e       	mov	r11, r18
     ffa:	b4 fe       	sbrs	r11, 4
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <vfprintf+0x256>
     ffe:	8b 2d       	mov	r24, r11
    1000:	84 60       	ori	r24, 0x04	; 4
    1002:	b8 2e       	mov	r11, r24
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <vfprintf+0x256>
    1006:	24 ff       	sbrs	r18, 4
    1008:	0a c0       	rjmp	.+20     	; 0x101e <vfprintf+0x25c>
    100a:	9f 2f       	mov	r25, r31
    100c:	96 60       	ori	r25, 0x06	; 6
    100e:	b9 2e       	mov	r11, r25
    1010:	06 c0       	rjmp	.+12     	; 0x101e <vfprintf+0x25c>
    1012:	28 e0       	ldi	r18, 0x08	; 8
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <vfprintf+0x260>
    1018:	20 e1       	ldi	r18, 0x10	; 16
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vfprintf+0x260>
    101e:	20 e1       	ldi	r18, 0x10	; 16
    1020:	32 e0       	ldi	r19, 0x02	; 2
    1022:	f8 01       	movw	r30, r16
    1024:	b7 fe       	sbrs	r11, 7
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <vfprintf+0x274>
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0c 5f       	subi	r16, 0xFC	; 252
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0x280>
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 5f       	subi	r16, 0xFE	; 254
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	a4 01       	movw	r20, r8
    1044:	0e 94 45 0a 	call	0x148a	; 0x148a <__ultoa_invert>
    1048:	a8 2e       	mov	r10, r24
    104a:	a8 18       	sub	r10, r8
    104c:	fb 2d       	mov	r31, r11
    104e:	ff 77       	andi	r31, 0x7F	; 127
    1050:	bf 2e       	mov	r11, r31
    1052:	b6 fe       	sbrs	r11, 6
    1054:	0b c0       	rjmp	.+22     	; 0x106c <vfprintf+0x2aa>
    1056:	2b 2d       	mov	r18, r11
    1058:	2e 7f       	andi	r18, 0xFE	; 254
    105a:	a5 14       	cp	r10, r5
    105c:	50 f4       	brcc	.+20     	; 0x1072 <vfprintf+0x2b0>
    105e:	b4 fe       	sbrs	r11, 4
    1060:	0a c0       	rjmp	.+20     	; 0x1076 <vfprintf+0x2b4>
    1062:	b2 fc       	sbrc	r11, 2
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <vfprintf+0x2b4>
    1066:	2b 2d       	mov	r18, r11
    1068:	2e 7e       	andi	r18, 0xEE	; 238
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <vfprintf+0x2b4>
    106c:	7a 2c       	mov	r7, r10
    106e:	2b 2d       	mov	r18, r11
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <vfprintf+0x2b6>
    1072:	7a 2c       	mov	r7, r10
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <vfprintf+0x2b6>
    1076:	75 2c       	mov	r7, r5
    1078:	24 ff       	sbrs	r18, 4
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <vfprintf+0x2d4>
    107c:	fe 01       	movw	r30, r28
    107e:	ea 0d       	add	r30, r10
    1080:	f1 1d       	adc	r31, r1
    1082:	80 81       	ld	r24, Z
    1084:	80 33       	cpi	r24, 0x30	; 48
    1086:	11 f4       	brne	.+4      	; 0x108c <vfprintf+0x2ca>
    1088:	29 7e       	andi	r18, 0xE9	; 233
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x2dc>
    108c:	22 ff       	sbrs	r18, 2
    108e:	06 c0       	rjmp	.+12     	; 0x109c <vfprintf+0x2da>
    1090:	73 94       	inc	r7
    1092:	73 94       	inc	r7
    1094:	04 c0       	rjmp	.+8      	; 0x109e <vfprintf+0x2dc>
    1096:	82 2f       	mov	r24, r18
    1098:	86 78       	andi	r24, 0x86	; 134
    109a:	09 f0       	breq	.+2      	; 0x109e <vfprintf+0x2dc>
    109c:	73 94       	inc	r7
    109e:	23 fd       	sbrc	r18, 3
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <vfprintf+0x306>
    10a2:	20 ff       	sbrs	r18, 0
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <vfprintf+0x2f0>
    10a6:	5a 2c       	mov	r5, r10
    10a8:	73 14       	cp	r7, r3
    10aa:	18 f4       	brcc	.+6      	; 0x10b2 <vfprintf+0x2f0>
    10ac:	53 0c       	add	r5, r3
    10ae:	57 18       	sub	r5, r7
    10b0:	73 2c       	mov	r7, r3
    10b2:	73 14       	cp	r7, r3
    10b4:	68 f4       	brcc	.+26     	; 0x10d0 <vfprintf+0x30e>
    10b6:	b7 01       	movw	r22, r14
    10b8:	80 e2       	ldi	r24, 0x20	; 32
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	2c 87       	std	Y+12, r18	; 0x0c
    10be:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    10c2:	73 94       	inc	r7
    10c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c6:	f5 cf       	rjmp	.-22     	; 0x10b2 <vfprintf+0x2f0>
    10c8:	73 14       	cp	r7, r3
    10ca:	10 f4       	brcc	.+4      	; 0x10d0 <vfprintf+0x30e>
    10cc:	37 18       	sub	r3, r7
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <vfprintf+0x310>
    10d0:	31 2c       	mov	r3, r1
    10d2:	24 ff       	sbrs	r18, 4
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <vfprintf+0x338>
    10d6:	b7 01       	movw	r22, r14
    10d8:	80 e3       	ldi	r24, 0x30	; 48
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	2c 87       	std	Y+12, r18	; 0x0c
    10de:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    10e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e4:	22 ff       	sbrs	r18, 2
    10e6:	17 c0       	rjmp	.+46     	; 0x1116 <vfprintf+0x354>
    10e8:	21 ff       	sbrs	r18, 1
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x330>
    10ec:	88 e5       	ldi	r24, 0x58	; 88
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x334>
    10f2:	88 e7       	ldi	r24, 0x78	; 120
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	b7 01       	movw	r22, r14
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <vfprintf+0x350>
    10fa:	82 2f       	mov	r24, r18
    10fc:	86 78       	andi	r24, 0x86	; 134
    10fe:	59 f0       	breq	.+22     	; 0x1116 <vfprintf+0x354>
    1100:	21 fd       	sbrc	r18, 1
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x346>
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	01 c0       	rjmp	.+2      	; 0x110a <vfprintf+0x348>
    1108:	8b e2       	ldi	r24, 0x2B	; 43
    110a:	27 fd       	sbrc	r18, 7
    110c:	8d e2       	ldi	r24, 0x2D	; 45
    110e:	b7 01       	movw	r22, r14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    1116:	a5 14       	cp	r10, r5
    1118:	38 f4       	brcc	.+14     	; 0x1128 <vfprintf+0x366>
    111a:	b7 01       	movw	r22, r14
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    1124:	5a 94       	dec	r5
    1126:	f7 cf       	rjmp	.-18     	; 0x1116 <vfprintf+0x354>
    1128:	aa 94       	dec	r10
    112a:	f4 01       	movw	r30, r8
    112c:	ea 0d       	add	r30, r10
    112e:	f1 1d       	adc	r31, r1
    1130:	80 81       	ld	r24, Z
    1132:	b7 01       	movw	r22, r14
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    113a:	a1 10       	cpse	r10, r1
    113c:	f5 cf       	rjmp	.-22     	; 0x1128 <vfprintf+0x366>
    113e:	33 20       	and	r3, r3
    1140:	09 f4       	brne	.+2      	; 0x1144 <vfprintf+0x382>
    1142:	51 ce       	rjmp	.-862    	; 0xde6 <vfprintf+0x24>
    1144:	b7 01       	movw	r22, r14
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 13 0a 	call	0x1426	; 0x1426 <fputc>
    114e:	3a 94       	dec	r3
    1150:	f6 cf       	rjmp	.-20     	; 0x113e <vfprintf+0x37c>
    1152:	f7 01       	movw	r30, r14
    1154:	86 81       	ldd	r24, Z+6	; 0x06
    1156:	97 81       	ldd	r25, Z+7	; 0x07
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0x39c>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	2c 96       	adiw	r28, 0x0c	; 12
    1160:	e2 e1       	ldi	r30, 0x12	; 18
    1162:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__epilogue_restores__>

00001166 <calloc>:
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	86 9f       	mul	r24, r22
    1170:	80 01       	movw	r16, r0
    1172:	87 9f       	mul	r24, r23
    1174:	10 0d       	add	r17, r0
    1176:	96 9f       	mul	r25, r22
    1178:	10 0d       	add	r17, r0
    117a:	11 24       	eor	r1, r1
    117c:	c8 01       	movw	r24, r16
    117e:	0e 94 cf 08 	call	0x119e	; 0x119e <malloc>
    1182:	ec 01       	movw	r28, r24
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	29 f0       	breq	.+10     	; 0x1192 <calloc+0x2c>
    1188:	a8 01       	movw	r20, r16
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	0e 94 01 0a 	call	0x1402	; 0x1402 <memset>
    1192:	ce 01       	movw	r24, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <malloc>:
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	10 f4       	brcc	.+4      	; 0x11ac <malloc+0xe>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	e0 91 5e 03 	lds	r30, 0x035E
    11b0:	f0 91 5f 03 	lds	r31, 0x035F
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	39 f1       	breq	.+78     	; 0x120e <malloc+0x70>
    11c0:	40 81       	ld	r20, Z
    11c2:	51 81       	ldd	r21, Z+1	; 0x01
    11c4:	48 17       	cp	r20, r24
    11c6:	59 07       	cpc	r21, r25
    11c8:	b8 f0       	brcs	.+46     	; 0x11f8 <malloc+0x5a>
    11ca:	48 17       	cp	r20, r24
    11cc:	59 07       	cpc	r21, r25
    11ce:	71 f4       	brne	.+28     	; 0x11ec <malloc+0x4e>
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	93 81       	ldd	r25, Z+3	; 0x03
    11d4:	10 97       	sbiw	r26, 0x00	; 0
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <malloc+0x44>
    11d8:	13 96       	adiw	r26, 0x03	; 3
    11da:	9c 93       	st	X, r25
    11dc:	8e 93       	st	-X, r24
    11de:	12 97       	sbiw	r26, 0x02	; 2
    11e0:	2c c0       	rjmp	.+88     	; 0x123a <malloc+0x9c>
    11e2:	90 93 5f 03 	sts	0x035F, r25
    11e6:	80 93 5e 03 	sts	0x035E, r24
    11ea:	27 c0       	rjmp	.+78     	; 0x123a <malloc+0x9c>
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	31 f0       	breq	.+12     	; 0x11fe <malloc+0x60>
    11f2:	42 17       	cp	r20, r18
    11f4:	53 07       	cpc	r21, r19
    11f6:	18 f0       	brcs	.+6      	; 0x11fe <malloc+0x60>
    11f8:	a9 01       	movw	r20, r18
    11fa:	db 01       	movw	r26, r22
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <malloc+0x62>
    11fe:	ef 01       	movw	r28, r30
    1200:	9a 01       	movw	r18, r20
    1202:	bd 01       	movw	r22, r26
    1204:	df 01       	movw	r26, r30
    1206:	02 80       	ldd	r0, Z+2	; 0x02
    1208:	f3 81       	ldd	r31, Z+3	; 0x03
    120a:	e0 2d       	mov	r30, r0
    120c:	d7 cf       	rjmp	.-82     	; 0x11bc <malloc+0x1e>
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	f9 f0       	breq	.+62     	; 0x1252 <malloc+0xb4>
    1214:	28 1b       	sub	r18, r24
    1216:	39 0b       	sbc	r19, r25
    1218:	24 30       	cpi	r18, 0x04	; 4
    121a:	31 05       	cpc	r19, r1
    121c:	80 f4       	brcc	.+32     	; 0x123e <malloc+0xa0>
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	21 f0       	breq	.+8      	; 0x1230 <malloc+0x92>
    1228:	fb 01       	movw	r30, r22
    122a:	93 83       	std	Z+3, r25	; 0x03
    122c:	82 83       	std	Z+2, r24	; 0x02
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <malloc+0x9a>
    1230:	90 93 5f 03 	sts	0x035F, r25
    1234:	80 93 5e 03 	sts	0x035E, r24
    1238:	fe 01       	movw	r30, r28
    123a:	32 96       	adiw	r30, 0x02	; 2
    123c:	44 c0       	rjmp	.+136    	; 0x12c6 <malloc+0x128>
    123e:	fe 01       	movw	r30, r28
    1240:	e2 0f       	add	r30, r18
    1242:	f3 1f       	adc	r31, r19
    1244:	81 93       	st	Z+, r24
    1246:	91 93       	st	Z+, r25
    1248:	22 50       	subi	r18, 0x02	; 2
    124a:	31 09       	sbc	r19, r1
    124c:	39 83       	std	Y+1, r19	; 0x01
    124e:	28 83       	st	Y, r18
    1250:	3a c0       	rjmp	.+116    	; 0x12c6 <malloc+0x128>
    1252:	20 91 5c 03 	lds	r18, 0x035C
    1256:	30 91 5d 03 	lds	r19, 0x035D
    125a:	23 2b       	or	r18, r19
    125c:	41 f4       	brne	.+16     	; 0x126e <malloc+0xd0>
    125e:	20 91 06 01 	lds	r18, 0x0106
    1262:	30 91 07 01 	lds	r19, 0x0107
    1266:	30 93 5d 03 	sts	0x035D, r19
    126a:	20 93 5c 03 	sts	0x035C, r18
    126e:	20 91 04 01 	lds	r18, 0x0104
    1272:	30 91 05 01 	lds	r19, 0x0105
    1276:	21 15       	cp	r18, r1
    1278:	31 05       	cpc	r19, r1
    127a:	41 f4       	brne	.+16     	; 0x128c <malloc+0xee>
    127c:	2d b7       	in	r18, 0x3d	; 61
    127e:	3e b7       	in	r19, 0x3e	; 62
    1280:	40 91 08 01 	lds	r20, 0x0108
    1284:	50 91 09 01 	lds	r21, 0x0109
    1288:	24 1b       	sub	r18, r20
    128a:	35 0b       	sbc	r19, r21
    128c:	e0 91 5c 03 	lds	r30, 0x035C
    1290:	f0 91 5d 03 	lds	r31, 0x035D
    1294:	e2 17       	cp	r30, r18
    1296:	f3 07       	cpc	r31, r19
    1298:	a0 f4       	brcc	.+40     	; 0x12c2 <malloc+0x124>
    129a:	2e 1b       	sub	r18, r30
    129c:	3f 0b       	sbc	r19, r31
    129e:	28 17       	cp	r18, r24
    12a0:	39 07       	cpc	r19, r25
    12a2:	78 f0       	brcs	.+30     	; 0x12c2 <malloc+0x124>
    12a4:	ac 01       	movw	r20, r24
    12a6:	4e 5f       	subi	r20, 0xFE	; 254
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	24 17       	cp	r18, r20
    12ac:	35 07       	cpc	r19, r21
    12ae:	48 f0       	brcs	.+18     	; 0x12c2 <malloc+0x124>
    12b0:	4e 0f       	add	r20, r30
    12b2:	5f 1f       	adc	r21, r31
    12b4:	50 93 5d 03 	sts	0x035D, r21
    12b8:	40 93 5c 03 	sts	0x035C, r20
    12bc:	81 93       	st	Z+, r24
    12be:	91 93       	st	Z+, r25
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <malloc+0x128>
    12c2:	e0 e0       	ldi	r30, 0x00	; 0
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	cf 01       	movw	r24, r30
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <free>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <free+0xa>
    12d6:	87 c0       	rjmp	.+270    	; 0x13e6 <free+0x118>
    12d8:	fc 01       	movw	r30, r24
    12da:	32 97       	sbiw	r30, 0x02	; 2
    12dc:	13 82       	std	Z+3, r1	; 0x03
    12de:	12 82       	std	Z+2, r1	; 0x02
    12e0:	c0 91 5e 03 	lds	r28, 0x035E
    12e4:	d0 91 5f 03 	lds	r29, 0x035F
    12e8:	20 97       	sbiw	r28, 0x00	; 0
    12ea:	81 f4       	brne	.+32     	; 0x130c <free+0x3e>
    12ec:	20 81       	ld	r18, Z
    12ee:	31 81       	ldd	r19, Z+1	; 0x01
    12f0:	28 0f       	add	r18, r24
    12f2:	39 1f       	adc	r19, r25
    12f4:	80 91 5c 03 	lds	r24, 0x035C
    12f8:	90 91 5d 03 	lds	r25, 0x035D
    12fc:	82 17       	cp	r24, r18
    12fe:	93 07       	cpc	r25, r19
    1300:	79 f5       	brne	.+94     	; 0x1360 <free+0x92>
    1302:	f0 93 5d 03 	sts	0x035D, r31
    1306:	e0 93 5c 03 	sts	0x035C, r30
    130a:	6d c0       	rjmp	.+218    	; 0x13e6 <free+0x118>
    130c:	de 01       	movw	r26, r28
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	ae 17       	cp	r26, r30
    1314:	bf 07       	cpc	r27, r31
    1316:	50 f4       	brcc	.+20     	; 0x132c <free+0x5e>
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	4d 91       	ld	r20, X+
    131c:	5c 91       	ld	r21, X
    131e:	13 97       	sbiw	r26, 0x03	; 3
    1320:	9d 01       	movw	r18, r26
    1322:	41 15       	cp	r20, r1
    1324:	51 05       	cpc	r21, r1
    1326:	09 f1       	breq	.+66     	; 0x136a <free+0x9c>
    1328:	da 01       	movw	r26, r20
    132a:	f3 cf       	rjmp	.-26     	; 0x1312 <free+0x44>
    132c:	b3 83       	std	Z+3, r27	; 0x03
    132e:	a2 83       	std	Z+2, r26	; 0x02
    1330:	40 81       	ld	r20, Z
    1332:	51 81       	ldd	r21, Z+1	; 0x01
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	8a 17       	cp	r24, r26
    133a:	9b 07       	cpc	r25, r27
    133c:	71 f4       	brne	.+28     	; 0x135a <free+0x8c>
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	11 97       	sbiw	r26, 0x01	; 1
    1344:	84 0f       	add	r24, r20
    1346:	95 1f       	adc	r25, r21
    1348:	02 96       	adiw	r24, 0x02	; 2
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	12 96       	adiw	r26, 0x02	; 2
    1350:	8d 91       	ld	r24, X+
    1352:	9c 91       	ld	r25, X
    1354:	13 97       	sbiw	r26, 0x03	; 3
    1356:	93 83       	std	Z+3, r25	; 0x03
    1358:	82 83       	std	Z+2, r24	; 0x02
    135a:	21 15       	cp	r18, r1
    135c:	31 05       	cpc	r19, r1
    135e:	29 f4       	brne	.+10     	; 0x136a <free+0x9c>
    1360:	f0 93 5f 03 	sts	0x035F, r31
    1364:	e0 93 5e 03 	sts	0x035E, r30
    1368:	3e c0       	rjmp	.+124    	; 0x13e6 <free+0x118>
    136a:	d9 01       	movw	r26, r18
    136c:	13 96       	adiw	r26, 0x03	; 3
    136e:	fc 93       	st	X, r31
    1370:	ee 93       	st	-X, r30
    1372:	12 97       	sbiw	r26, 0x02	; 2
    1374:	4d 91       	ld	r20, X+
    1376:	5d 91       	ld	r21, X+
    1378:	a4 0f       	add	r26, r20
    137a:	b5 1f       	adc	r27, r21
    137c:	ea 17       	cp	r30, r26
    137e:	fb 07       	cpc	r31, r27
    1380:	79 f4       	brne	.+30     	; 0x13a0 <free+0xd2>
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	84 0f       	add	r24, r20
    1388:	95 1f       	adc	r25, r21
    138a:	02 96       	adiw	r24, 0x02	; 2
    138c:	d9 01       	movw	r26, r18
    138e:	11 96       	adiw	r26, 0x01	; 1
    1390:	9c 93       	st	X, r25
    1392:	8e 93       	st	-X, r24
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	93 81       	ldd	r25, Z+3	; 0x03
    1398:	13 96       	adiw	r26, 0x03	; 3
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	12 97       	sbiw	r26, 0x02	; 2
    13a0:	e0 e0       	ldi	r30, 0x00	; 0
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <free+0xe4>
    13ac:	fe 01       	movw	r30, r28
    13ae:	ec 01       	movw	r28, r24
    13b0:	f9 cf       	rjmp	.-14     	; 0x13a4 <free+0xd6>
    13b2:	ce 01       	movw	r24, r28
    13b4:	02 96       	adiw	r24, 0x02	; 2
    13b6:	28 81       	ld	r18, Y
    13b8:	39 81       	ldd	r19, Y+1	; 0x01
    13ba:	82 0f       	add	r24, r18
    13bc:	93 1f       	adc	r25, r19
    13be:	20 91 5c 03 	lds	r18, 0x035C
    13c2:	30 91 5d 03 	lds	r19, 0x035D
    13c6:	28 17       	cp	r18, r24
    13c8:	39 07       	cpc	r19, r25
    13ca:	69 f4       	brne	.+26     	; 0x13e6 <free+0x118>
    13cc:	30 97       	sbiw	r30, 0x00	; 0
    13ce:	29 f4       	brne	.+10     	; 0x13da <free+0x10c>
    13d0:	10 92 5f 03 	sts	0x035F, r1
    13d4:	10 92 5e 03 	sts	0x035E, r1
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <free+0x110>
    13da:	13 82       	std	Z+3, r1	; 0x03
    13dc:	12 82       	std	Z+2, r1	; 0x02
    13de:	d0 93 5d 03 	sts	0x035D, r29
    13e2:	c0 93 5c 03 	sts	0x035C, r28
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <strnlen_P>:
    13ec:	fc 01       	movw	r30, r24
    13ee:	05 90       	lpm	r0, Z+
    13f0:	61 50       	subi	r22, 0x01	; 1
    13f2:	70 40       	sbci	r23, 0x00	; 0
    13f4:	01 10       	cpse	r0, r1
    13f6:	d8 f7       	brcc	.-10     	; 0x13ee <strnlen_P+0x2>
    13f8:	80 95       	com	r24
    13fa:	90 95       	com	r25
    13fc:	8e 0f       	add	r24, r30
    13fe:	9f 1f       	adc	r25, r31
    1400:	08 95       	ret

00001402 <memset>:
    1402:	dc 01       	movw	r26, r24
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <memset+0x6>
    1406:	6d 93       	st	X+, r22
    1408:	41 50       	subi	r20, 0x01	; 1
    140a:	50 40       	sbci	r21, 0x00	; 0
    140c:	e0 f7       	brcc	.-8      	; 0x1406 <memset+0x4>
    140e:	08 95       	ret

00001410 <strnlen>:
    1410:	fc 01       	movw	r30, r24
    1412:	61 50       	subi	r22, 0x01	; 1
    1414:	70 40       	sbci	r23, 0x00	; 0
    1416:	01 90       	ld	r0, Z+
    1418:	01 10       	cpse	r0, r1
    141a:	d8 f7       	brcc	.-10     	; 0x1412 <strnlen+0x2>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	8e 0f       	add	r24, r30
    1422:	9f 1f       	adc	r25, r31
    1424:	08 95       	ret

00001426 <fputc>:
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	18 2f       	mov	r17, r24
    1430:	09 2f       	mov	r16, r25
    1432:	eb 01       	movw	r28, r22
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 fd       	sbrc	r24, 1
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <fputc+0x1a>
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f ef       	ldi	r25, 0xFF	; 255
    143e:	20 c0       	rjmp	.+64     	; 0x1480 <fputc+0x5a>
    1440:	82 ff       	sbrs	r24, 2
    1442:	10 c0       	rjmp	.+32     	; 0x1464 <fputc+0x3e>
    1444:	4e 81       	ldd	r20, Y+6	; 0x06
    1446:	5f 81       	ldd	r21, Y+7	; 0x07
    1448:	2c 81       	ldd	r18, Y+4	; 0x04
    144a:	3d 81       	ldd	r19, Y+5	; 0x05
    144c:	42 17       	cp	r20, r18
    144e:	53 07       	cpc	r21, r19
    1450:	7c f4       	brge	.+30     	; 0x1470 <fputc+0x4a>
    1452:	e8 81       	ld	r30, Y
    1454:	f9 81       	ldd	r31, Y+1	; 0x01
    1456:	9f 01       	movw	r18, r30
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	39 83       	std	Y+1, r19	; 0x01
    145e:	28 83       	st	Y, r18
    1460:	10 83       	st	Z, r17
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <fputc+0x4a>
    1464:	e8 85       	ldd	r30, Y+8	; 0x08
    1466:	f9 85       	ldd	r31, Y+9	; 0x09
    1468:	81 2f       	mov	r24, r17
    146a:	09 95       	icall
    146c:	89 2b       	or	r24, r25
    146e:	29 f7       	brne	.-54     	; 0x143a <fputc+0x14>
    1470:	2e 81       	ldd	r18, Y+6	; 0x06
    1472:	3f 81       	ldd	r19, Y+7	; 0x07
    1474:	2f 5f       	subi	r18, 0xFF	; 255
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	3f 83       	std	Y+7, r19	; 0x07
    147a:	2e 83       	std	Y+6, r18	; 0x06
    147c:	81 2f       	mov	r24, r17
    147e:	90 2f       	mov	r25, r16
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <__ultoa_invert>:
    148a:	fa 01       	movw	r30, r20
    148c:	aa 27       	eor	r26, r26
    148e:	28 30       	cpi	r18, 0x08	; 8
    1490:	51 f1       	breq	.+84     	; 0x14e6 <__ultoa_invert+0x5c>
    1492:	20 31       	cpi	r18, 0x10	; 16
    1494:	81 f1       	breq	.+96     	; 0x14f6 <__ultoa_invert+0x6c>
    1496:	e8 94       	clt
    1498:	6f 93       	push	r22
    149a:	6e 7f       	andi	r22, 0xFE	; 254
    149c:	6e 5f       	subi	r22, 0xFE	; 254
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	af 4f       	sbci	r26, 0xFF	; 255
    14a6:	b1 e0       	ldi	r27, 0x01	; 1
    14a8:	3e d0       	rcall	.+124    	; 0x1526 <__ultoa_invert+0x9c>
    14aa:	b4 e0       	ldi	r27, 0x04	; 4
    14ac:	3c d0       	rcall	.+120    	; 0x1526 <__ultoa_invert+0x9c>
    14ae:	67 0f       	add	r22, r23
    14b0:	78 1f       	adc	r23, r24
    14b2:	89 1f       	adc	r24, r25
    14b4:	9a 1f       	adc	r25, r26
    14b6:	a1 1d       	adc	r26, r1
    14b8:	68 0f       	add	r22, r24
    14ba:	79 1f       	adc	r23, r25
    14bc:	8a 1f       	adc	r24, r26
    14be:	91 1d       	adc	r25, r1
    14c0:	a1 1d       	adc	r26, r1
    14c2:	6a 0f       	add	r22, r26
    14c4:	71 1d       	adc	r23, r1
    14c6:	81 1d       	adc	r24, r1
    14c8:	91 1d       	adc	r25, r1
    14ca:	a1 1d       	adc	r26, r1
    14cc:	20 d0       	rcall	.+64     	; 0x150e <__ultoa_invert+0x84>
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <__ultoa_invert+0x48>
    14d0:	68 94       	set
    14d2:	3f 91       	pop	r19
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	26 9f       	mul	r18, r22
    14d8:	11 24       	eor	r1, r1
    14da:	30 19       	sub	r19, r0
    14dc:	30 5d       	subi	r19, 0xD0	; 208
    14de:	31 93       	st	Z+, r19
    14e0:	de f6       	brtc	.-74     	; 0x1498 <__ultoa_invert+0xe>
    14e2:	cf 01       	movw	r24, r30
    14e4:	08 95       	ret
    14e6:	46 2f       	mov	r20, r22
    14e8:	47 70       	andi	r20, 0x07	; 7
    14ea:	40 5d       	subi	r20, 0xD0	; 208
    14ec:	41 93       	st	Z+, r20
    14ee:	b3 e0       	ldi	r27, 0x03	; 3
    14f0:	0f d0       	rcall	.+30     	; 0x1510 <__ultoa_invert+0x86>
    14f2:	c9 f7       	brne	.-14     	; 0x14e6 <__ultoa_invert+0x5c>
    14f4:	f6 cf       	rjmp	.-20     	; 0x14e2 <__ultoa_invert+0x58>
    14f6:	46 2f       	mov	r20, r22
    14f8:	4f 70       	andi	r20, 0x0F	; 15
    14fa:	40 5d       	subi	r20, 0xD0	; 208
    14fc:	4a 33       	cpi	r20, 0x3A	; 58
    14fe:	18 f0       	brcs	.+6      	; 0x1506 <__ultoa_invert+0x7c>
    1500:	49 5d       	subi	r20, 0xD9	; 217
    1502:	31 fd       	sbrc	r19, 1
    1504:	40 52       	subi	r20, 0x20	; 32
    1506:	41 93       	st	Z+, r20
    1508:	02 d0       	rcall	.+4      	; 0x150e <__ultoa_invert+0x84>
    150a:	a9 f7       	brne	.-22     	; 0x14f6 <__ultoa_invert+0x6c>
    150c:	ea cf       	rjmp	.-44     	; 0x14e2 <__ultoa_invert+0x58>
    150e:	b4 e0       	ldi	r27, 0x04	; 4
    1510:	a6 95       	lsr	r26
    1512:	97 95       	ror	r25
    1514:	87 95       	ror	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	ba 95       	dec	r27
    151c:	c9 f7       	brne	.-14     	; 0x1510 <__ultoa_invert+0x86>
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	61 05       	cpc	r22, r1
    1522:	71 05       	cpc	r23, r1
    1524:	08 95       	ret
    1526:	9b 01       	movw	r18, r22
    1528:	ac 01       	movw	r20, r24
    152a:	0a 2e       	mov	r0, r26
    152c:	06 94       	lsr	r0
    152e:	57 95       	ror	r21
    1530:	47 95       	ror	r20
    1532:	37 95       	ror	r19
    1534:	27 95       	ror	r18
    1536:	ba 95       	dec	r27
    1538:	c9 f7       	brne	.-14     	; 0x152c <__ultoa_invert+0xa2>
    153a:	62 0f       	add	r22, r18
    153c:	73 1f       	adc	r23, r19
    153e:	84 1f       	adc	r24, r20
    1540:	95 1f       	adc	r25, r21
    1542:	a0 1d       	adc	r26, r0
    1544:	08 95       	ret

00001546 <__divmodsi4>:
    1546:	05 2e       	mov	r0, r21
    1548:	97 fb       	bst	r25, 7
    154a:	1e f4       	brtc	.+6      	; 0x1552 <__divmodsi4+0xc>
    154c:	00 94       	com	r0
    154e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__negsi2>
    1552:	57 fd       	sbrc	r21, 7
    1554:	07 d0       	rcall	.+14     	; 0x1564 <__divmodsi4_neg2>
    1556:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodsi4>
    155a:	07 fc       	sbrc	r0, 7
    155c:	03 d0       	rcall	.+6      	; 0x1564 <__divmodsi4_neg2>
    155e:	4e f4       	brtc	.+18     	; 0x1572 <__divmodsi4_exit>
    1560:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__negsi2>

00001564 <__divmodsi4_neg2>:
    1564:	50 95       	com	r21
    1566:	40 95       	com	r20
    1568:	30 95       	com	r19
    156a:	21 95       	neg	r18
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	4f 4f       	sbci	r20, 0xFF	; 255
    1570:	5f 4f       	sbci	r21, 0xFF	; 255

00001572 <__divmodsi4_exit>:
    1572:	08 95       	ret

00001574 <__negsi2>:
    1574:	90 95       	com	r25
    1576:	80 95       	com	r24
    1578:	70 95       	com	r23
    157a:	61 95       	neg	r22
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	08 95       	ret

00001584 <__muluhisi3>:
    1584:	0e 94 2e 0b 	call	0x165c	; 0x165c <__umulhisi3>
    1588:	a5 9f       	mul	r26, r21
    158a:	90 0d       	add	r25, r0
    158c:	b4 9f       	mul	r27, r20
    158e:	90 0d       	add	r25, r0
    1590:	a4 9f       	mul	r26, r20
    1592:	80 0d       	add	r24, r0
    1594:	91 1d       	adc	r25, r1
    1596:	11 24       	eor	r1, r1
    1598:	08 95       	ret

0000159a <__mulshisi3>:
    159a:	b7 ff       	sbrs	r27, 7
    159c:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__muluhisi3>

000015a0 <__mulohisi3>:
    15a0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__muluhisi3>
    15a4:	82 1b       	sub	r24, r18
    15a6:	93 0b       	sbc	r25, r19
    15a8:	08 95       	ret

000015aa <__prologue_saves__>:
    15aa:	2f 92       	push	r2
    15ac:	3f 92       	push	r3
    15ae:	4f 92       	push	r4
    15b0:	5f 92       	push	r5
    15b2:	6f 92       	push	r6
    15b4:	7f 92       	push	r7
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	af 92       	push	r10
    15bc:	bf 92       	push	r11
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	ca 1b       	sub	r28, r26
    15d4:	db 0b       	sbc	r29, r27
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	09 94       	ijmp

000015e2 <__epilogue_restores__>:
    15e2:	2a 88       	ldd	r2, Y+18	; 0x12
    15e4:	39 88       	ldd	r3, Y+17	; 0x11
    15e6:	48 88       	ldd	r4, Y+16	; 0x10
    15e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    15ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f4:	b9 84       	ldd	r11, Y+9	; 0x09
    15f6:	c8 84       	ldd	r12, Y+8	; 0x08
    15f8:	df 80       	ldd	r13, Y+7	; 0x07
    15fa:	ee 80       	ldd	r14, Y+6	; 0x06
    15fc:	fd 80       	ldd	r15, Y+5	; 0x05
    15fe:	0c 81       	ldd	r16, Y+4	; 0x04
    1600:	1b 81       	ldd	r17, Y+3	; 0x03
    1602:	aa 81       	ldd	r26, Y+2	; 0x02
    1604:	b9 81       	ldd	r27, Y+1	; 0x01
    1606:	ce 0f       	add	r28, r30
    1608:	d1 1d       	adc	r29, r1
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	ed 01       	movw	r28, r26
    1616:	08 95       	ret

00001618 <__udivmodsi4>:
    1618:	a1 e2       	ldi	r26, 0x21	; 33
    161a:	1a 2e       	mov	r1, r26
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	fd 01       	movw	r30, r26
    1622:	0d c0       	rjmp	.+26     	; 0x163e <__udivmodsi4_ep>

00001624 <__udivmodsi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	ee 1f       	adc	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	a2 17       	cp	r26, r18
    162e:	b3 07       	cpc	r27, r19
    1630:	e4 07       	cpc	r30, r20
    1632:	f5 07       	cpc	r31, r21
    1634:	20 f0       	brcs	.+8      	; 0x163e <__udivmodsi4_ep>
    1636:	a2 1b       	sub	r26, r18
    1638:	b3 0b       	sbc	r27, r19
    163a:	e4 0b       	sbc	r30, r20
    163c:	f5 0b       	sbc	r31, r21

0000163e <__udivmodsi4_ep>:
    163e:	66 1f       	adc	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	1a 94       	dec	r1
    1648:	69 f7       	brne	.-38     	; 0x1624 <__udivmodsi4_loop>
    164a:	60 95       	com	r22
    164c:	70 95       	com	r23
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	bd 01       	movw	r22, r26
    1658:	cf 01       	movw	r24, r30
    165a:	08 95       	ret

0000165c <__umulhisi3>:
    165c:	a2 9f       	mul	r26, r18
    165e:	b0 01       	movw	r22, r0
    1660:	b3 9f       	mul	r27, r19
    1662:	c0 01       	movw	r24, r0
    1664:	a3 9f       	mul	r26, r19
    1666:	70 0d       	add	r23, r0
    1668:	81 1d       	adc	r24, r1
    166a:	11 24       	eor	r1, r1
    166c:	91 1d       	adc	r25, r1
    166e:	b2 9f       	mul	r27, r18
    1670:	70 0d       	add	r23, r0
    1672:	81 1d       	adc	r24, r1
    1674:	11 24       	eor	r1, r1
    1676:	91 1d       	adc	r25, r1
    1678:	08 95       	ret

0000167a <_exit>:
    167a:	f8 94       	cli

0000167c <__stop_program>:
    167c:	ff cf       	rjmp	.-2      	; 0x167c <__stop_program>
